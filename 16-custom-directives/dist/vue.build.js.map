{"version":3,"sources":["node_modules/browser-pack/_prelude.js","node_modules/process/browser.js","vue.build.js","node_modules/vue-hot-reload-api/index.js","node_modules/vue/dist/vue.common.js","src/js/App.vue","src/js/vue.entry.js"],"names":["e","t","n","r","s","o","u","a","require","i","f","Error","code","l","exports","call","length","1","module","defaultSetTimout","defaultClearTimeout","runTimeout","fun","cachedSetTimeout","setTimeout","this","runClearTimeout","marker","cachedClearTimeout","clearTimeout","cleanUpNextTick","draining","currentQueue","queue","concat","queueIndex","drainQueue","timeout","len","run","Item","array","noop","process","nextTick","args","Array","arguments","push","prototype","apply","title","browser","env","argv","version","versions","on","addListener","once","off","removeListener","removeAllListeners","emit","binding","name","cwd","chdir","dir","umask","2","makeOptionsHot","id","options","injectHook","initHookName","map","instances","splice","indexOf","hook","existing","isArray","tryWrap","fn","arg","console","error","warn","Vue","window","__VUE_HOT_MAP__","Object","create","installed","isBrowserify","install","vue","browserify","config","_lifecycleHooks","compatible","Number","split","createRecord","Ctor","extend","rerender","fns","record","render","staticRenderFns","slice","forEach","instance","$options","_staticTrees","$forceUpdate","reload","extendOptions","newCtor","cid","release","$parent","3","set","obj","key","val","hasOwn","_isVue","_data","ob","__ob__","convert","dep","notify","vms","vm","_proxy","_digest","del","_unproxy","hasOwnProperty","isLiteral","exp","literalValueRE","test","isReserved","str","c","charCodeAt","_toString","value","toString","toNumber","parsed","isNaN","toBoolean","stripQuotes","b","camelize","replace","camelizeRE","toUpper","_","toUpperCase","hyphenate","hyphenateRE","toLowerCase","classify","classifyRE","bind","ctx","toArray","list","start","ret","to","from","keys","isObject","isPlainObject","OBJECT_STRING","def","enumerable","defineProperty","writable","configurable","_debounce","func","wait","context","timestamp","result","later","last","Date","now","arr","cancellable","cb","cancelled","cancel","looseEqual","JSON","stringify","isNative","Cache","limit","size","head","tail","undefined","_keymap","peek","index","next","eof","eatSpace","spaceChr","isStringStart","chr","doubleChr","singleChr","isExpStart","expStartChr","isExpEnd","expChrPair","parseString","stringQuote","escapeChr","parseSpecialExp","inExp","startChr","parseExpression","pipeChr","state","startState","filterArgState","filterState","filterNameState","parseFilterList","filters","parseFilter","filter","trim","parseFilterArguments","processFilterArg","reservedArgRE","dynamic","stripped","parseDirective","hit","cache$1","get","expression","put","escapeRegex","regexEscapeRE","compileRegex","open","delimiters","close","unsafeOpen","unsafeDelimiters","unsafeClose","tagRE","RegExp","htmlRE","cache","parseText","text","match","html","first","oneTime","tokens","lastIndex","exec","tag","tokensToExp","token","formatToken","join","single","$eval","inlineFilters","filterRE","appendWithTransition","el","target","applyTransition","appendChild","beforeWithTransition","before","removeWithTransition","remove","direction","op","transition","__v_trans","hooks","transitionEndEvent","_isCompiled","action","query","selector","document","querySelector","NODE_ENV","inDoc","node","doc","ownerDocument","documentElement","parent","parentNode","nodeType","contains","getAttr","_attr","getAttribute","removeAttribute","getBindAttr","hasBindAttr","hasAttribute","insertBefore","after","nextSibling","removeChild","prepend","firstChild","replaceChild","event","useCapture","addEventListener","removeEventListener","getClass","classname","className","baseVal","setClass","cls","isIE9","namespaceURI","setAttribute","addClass","classList","add","cur","removeClass","tar","extractContent","asFragment","child","rawContent","isTemplate","isFragment","content","hasChildNodes","trimNode","createDocumentFragment","createElement","isTrimmable","lastChild","data","tagName","createAnchor","persist","anchor","debug","createComment","createTextNode","__v_anchor","findRef","hasAttributes","attrs","attributes","refRE","mapNodeRange","end","removeNodeRange","frag","onRemoved","removed","done","nodes","getOuterHTML","outerHTML","container","cloneNode","innerHTML","checkComponentAttr","hasAttrs","commonTagRE","reservedTagRE","getIsBinding","resolveAsset","is","expectedTag","_componentNameMap","isUnknownElement","mergeData","toVal","fromVal","mergeAssets","parentVal","childVal","res","guardArrayAssets","guardComponents","components","ids","guardProps","props","type","assets","asset","mergeOptions","mergeField","strat","strats","defaultStrat","propsData","mixins","mixin","mixinOptions","warnMissing","camelizedId","charAt","Dep","uid$1","subs","withoutConversion","shouldConvert","Observer","augment","hasProto","protoAugment","copyAugment","arrayMethods","arrayKeys","observeArray","walk","src","__proto__","observe","isExtensible","addVm","defineReactive","property","getOwnPropertyDescriptor","getter","setter","childOb","depend","newVal","initMixin","_init","$el","$root","$children","$refs","$els","_watchers","_directives","_uid","uid","_events","_eventsCount","_isFragment","_fragment","_fragmentStart","_fragmentEnd","_isDestroyed","_isReady","_isAttached","_isBeingDestroyed","_vForRemoving","_unlinkFn","_context","_scope","_frag","children","constructor","_updateRef","_callHook","_initState","_initEvents","$mount","getPathCharType","ch","formatSubPath","path","trimmed","parse","maybeUnescapeQuote","nextChar","mode","IN_SINGLE_QUOTE","IN_DOUBLE_QUOTE","newChar","actions","APPEND","typeMap","BEFORE_PATH","subPathDepth","PUSH","INC_SUB_PATH_DEPTH","PUSH_SUB_PATH","IN_SUB_PATH","pathStateMachine","ERROR","AFTER_PATH","raw","parsePath","pathCache","getPath","parseExpression$1","setPath","original","warnNonExistent","$set","save","isString","saved","newlineRE","rewrite","allowedKeywordsRE","restoreRE","restore","compileGetter","improperKeywordsRE","body","saveRE","wsRE","identRE","makeGetterFn","Function","compileSetter","scope","needSet","expressionCache","isSimplePath","pathTestRE","literalValueRE$1","resetBatcherState","userQueue","has","circular","waiting","flushBatcherQueue","_again","runBatcherQueue","devtools","watcher","_maxUpdateCount","pushWatcher","q","user","Watcher","expOrFn","isFn","uid$2","active","dirty","lazy","deps","newDeps","depIds","_Set","newDepIds","prevError","twoWay","queued","shallow","traverse","seen","seenObjects","clear","isA","isO","depId","isRealTemplate","stringToFragment","templateString","cacheKey","templateCache","tagMatch","tagRE$1","entityMatch","entityRE","commentMatch","commentRE","wrap","efault","depth","prefix","suffix","nodeToFragment","textContent","clonedNode","querySelectorAll","cloned","hasBrokenTemplate","tempClone","hasTextareaCloneBug","parseTemplate","template","shouldClone","idSelectorCache","getElementById","Fragment","linker","host","parentFrag","childFrags","inserted","unlink","childNodes","singleBefore","singleRemove","multiBefore","multiRemove","__v_frag","withTransition","method","callHook","attach","shouldCallRemove","self","beforeRemove","detach","destroy","FragmentFactory","cacheId","linkerCache","compile","findPrevFrag","previousSibling","forId","range","Math","floor","getTrackByKey","trackByKey","findVmFromFrag","__vue__","getValue","multi","init","selected","_value","indexOf$1","keyFilter","handler","codes","charCode","parseInt","keyCodes","keyCode","stopFilter","stopPropagation","preventFilter","preventDefault","selfFilter","currentTarget","normalize","prop","propCache","camel","upper","testEl","prefixed","prefixes","style","kebab","camelPrefixes","normalize$1","_key","k","callActivateHooks","called","total","compileProps","propOptions","attr","names","empty","identRE$1","propBindingModes","ONE_WAY","TWO_WAY","ONE_TIME","optimizedLiteral","settablePathRE","parentPath","lowerCaseName","required","makePropsLinkFn","_props","inlineProps","initProp","$get","_bindDir","propDef","Boolean","processPropValue","rawValue","isSimple","getPropDefaultValue","coerceProp","coerced","assertProp","updateProp","valid","expectedTypes","assertedType","assertType","expectedType","formatType","formatValue","validator","coerce","String","pushJob","job","queue$1","flush","offsetHeight","Transition","enterClass","leaveClass","pendingCssEvent","pendingCssCb","pendingJsCb","justEntered","entered","left","typeCache","TYPE_TRANSITION","TYPE_ANIMATION","m","isHidden","rect","getBoundingClientRect","width","height","offsetWidth","getClientRects","partial","nodeLinkFn","_asComponent","compileNode","childLinkFn","terminal","isScript","compileNodeList","dirs","linkAndCapture","makeUnlinkFn","originalDirCount","sortDirectives","_bind","j","groupedMap","priorities","priority","descriptor","DEFAULT_PRIORITY","sort","group","contextDirs","destroying","teardownDirs","_teardown","$remove","compileAndLinkProps","propsLinkFn","propDirs","compileRoot","contextOptions","contextLinkFn","replacerLinkFn","containerAttrs","_containerAttrs","replacerAttrs","_replacerAttrs","compileDirectives","onRE","plural","componentName","selfDirs","compileTextNode","compileElement","skip","linkFn","checkTerminalDirectives","checkElementDirectives","checkComponent","_skip","removeText","wholeText","processTextToken","makeTextNodeLinkFn","setTokenType","directives","fragClone","nodeList","linkFns","makeChildLinkFn","childrenLinkFn","makeTerminalNodeLinkFn","component","ref","internalDirectives","modifiers","literal","componentLinkFn","prev","previousElementSibling","matched","dirName","rawName","termDef","modifierRE","dirAttrRE","DEFAULT_TERMINAL_PRIORITY","parseModifiers","pushDir","interpTokens","hasOneTimeToken","hasOneTime","interp","dirDef","some","transitionRE","bindRE","makeNodeLinkFn","transclude","extractAttrs","_content","transcludeTemplate","replacer","mergeAttrs","specialCharRE","resolveSlots","contents","_slotContents","extractFragment","stateMixin","makeComputedGetter","owner","evaluate","newData","_setData","_initProps","_initMeta","_initMethods","_initData","_initComputed","_propsUnlinkFn","dataFn","oldData","removeVm","update","computed","userDef","methods","metas","_meta","eventsMixin","registerComponentEvents","eventRE","_fromParent","$on","registerCallbacks","hash","handlers","register","onAttached","callAttach","onDetached","callDetach","events","watch","_initDOMHooks","$emit","noop$1","Directive","_locked","_bound","_listeners","_host","_vue_directives","lifecycleMixin","_ref","refs","_compile","_initElement","rootLinker","contentLinkFn","ctor","_linkerCachable","rootUnlinkFn","contentUnlinkFn","_destroy","deferCleanup","_cleanup","destroyReady","pendingRemoval","cleanupIfPossible","$destroy","teardown","$off","miscMixin","_applyFilters","oldValue","write","offset","read","_resolveComponent","factory","resolved","requested","pendingCallbacks","cbs","reason","dataAPI","clean","asStatement","$arguments","$delete","$watch","deep","sync","immediate","filterRE$1","$interpolate","$log","log","domAPI","insert","op1","op2","targetIsDetached","shouldCallHook","append","beforeWithCb","removeWithCb","$nextTick","$appendTo","$prependTo","$before","$after","inDocument","realCb","eventsAPI","modifyListenerCount","count","hookRE","$once","isSource","shouldPropagate","hasParentCbs","$broadcast","source","$dispatch","lifecycleAPI","ready","$compile","limitBy","filterBy","search","delimiter","convertArray","item","$value","$key","orderBy","baseCompare","sortKeyIndex","sortKey","sortKeys","order","comparator","firstArg","installGlobalAPI","createClass","elementDirectives","transitions","partials","util","compiler","parsers","directive","Super","isFirstExtend","_Ctor","Sub","_assetTypes","use","plugin","unshift","definition","inBrowser","__VUE_DEVTOOLS_GLOBAL_HOOK__","UA","navigator","userAgent","isIE","isAndroid","isIOS","transitionProp","animationProp","animationEndEvent","isWebkitTrans","ontransitionend","onwebkittransitionend","isWebkitAnim","onanimationend","onwebkitanimationend","nextTickHandler","pending","copies","callbacks","timerFunc","Promise","p","resolve","then","MutationObserver","counter","observer","textNode","characterData","Set","entry","shift","newer","older","returnEntry","91","123","40","freeze","defineProperties","silent","async","warnExpressionErrors","_delimitersChanged","_propBindingModes","formatComponentName","hasConsole","msg","HTMLUnknownElement","HTMLElement","optionMergeStrategies","instanceData","defaultData","created","attached","detached","beforeCompile","compiled","beforeDestroy","destroyed","activate","addSub","sub","removeSub","addDep","arrayProto","getOwnPropertyNames","items","debounce","IN_PATH","BEFORE_IDENT","IN_IDENT","ws","ident","[",".","0","number","'","\"","]","else","allowedKeywords","improperKeywords","beforeGet","preProcess","postProcess","afterGet","forContext","$forContext","alias","_withLock","$index","tmp","current","text$1","legend","tr","col","td","th","option","optgroup","thead","tbody","colgroup","caption","tfoot","g","defs","symbol","image","circle","ellipse","line","polygon","polyline","placeholder","swap","_watcher","ON","MODEL","BIND","TRANSITION","EL","COMPONENT","PARTIAL","IF","FOR","SLOT","uid$3","vFor","params","inMatch","itMatch","iterator","isOption","diff","updateRef","updateModel","primitive","convertedFromObject","fromObject","trackBy","oldFrags","frags","getCachedFrag","reused","fresh","removalIndex","totalRemoved","deleteCachedFrag","w","targetPrev","prevEl","currentPrev","insertionIndex","staggerCb","staggerAnchor","move","parentScope","cacheFrag","model","__v_model","forceUpdate","staggerAmount","getStagger","warnDuplicate","trans","stagger","_preProcess","_postProcess","unbind","vIf","invalid","nextElementSibling","elseEl","elseFrag","elseFactory","show","toggle","display","text$2","isRange","composing","listener","focused","rawListener","hasjQuery","jQuery","afterBind","radio","checked","select","_this","multiple","initValue","selectedIndex","checkbox","getBooleanValue","_trueValue","_falseValue","checkFilters","hasRead","hasWrite","_unbind","esc","tab","enter","space","delete","up","right","down","on$1","acceptStatement","iframeBind","contentWindow","capture","stop","prevent","reset","importantRE","cssText","handleObject","reduce","handleSingle","isImportant","setProperty","xlinkNS","xlinkRE","disallowedInterpAttrRE","attrWithPropsRE","enumeratedAttrRE","modelProps","true-value","false-value","bind$1","attrValue","modelProp","setAttributeNS","cloak","for","if","vClass","cleanup","prevKeys","keepAlive","inlineTemplate","pendingComponentCb","Component","pendingRemovals","pendingRemovalCb","setComponent","invalidatePending","resolveComponent","mountComponent","unbuild","childVM","ComponentName","activateHooks","cached","getCached","newComponent","build","waitingFor","extraOptions","_isRouterView","defer","_inactive","transitionMode","bindingModes","childKey","parentKey","parentWatcher","childWatcher","transDurationProp","animDurationProp","raf","requestAnimationFrame","waitForTransitionStart","p$1","cancelPending","callHookWithCb","enterCancelled","enterNextTick","enterDone","getCssTransitionType","setupCssCb","leave","leaveCancelled","leaveDone","leaveNextTick","hasPending","hidden","css","inlineStyles","computedStyles","getComputedStyle","transDuration","animDuration","onEnd","transition$1","oldId","class","_setupParams","_checkStatement","_update","oldVal","mappedKey","_setupParamWatcher","unwatch","paramWatchers","_paramUnwatchFns","$event","listeners","unwatchFns","slot","fallback","elseBlock","digitsRE","json","indent","capitalize","uppercase","lowercase","currency","_currency","decimals","parseFloat","isFinite","stringified","abs","toFixed","_int","_float","sign","pluralize","delay","_process","4","__esModule","hot","accept","hotAPI","vue-hot-reload-api","5","_interopRequireDefault","default","_App","_App2","http","headers","common","onSubmit","onSubmitn","$http","getRequestType","onComplete","App","./App.vue"],"mappings":"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","file":"vue.build.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","// shim for using process in browser\nvar process = module.exports = {};\n\n// cached from whatever global is present so that test runners that stub it\n// don't break things.  But we need to wrap it in a try catch in case it is\n// wrapped in strict mode code which doesn't define any globals.  It's inside a\n// function because try/catches deoptimize in certain engines.\n\nvar cachedSetTimeout;\nvar cachedClearTimeout;\n\nfunction defaultSetTimout() {\n    throw new Error('setTimeout has not been defined');\n}\nfunction defaultClearTimeout () {\n    throw new Error('clearTimeout has not been defined');\n}\n(function () {\n    try {\n        if (typeof setTimeout === 'function') {\n            cachedSetTimeout = setTimeout;\n        } else {\n            cachedSetTimeout = defaultSetTimout;\n        }\n    } catch (e) {\n        cachedSetTimeout = defaultSetTimout;\n    }\n    try {\n        if (typeof clearTimeout === 'function') {\n            cachedClearTimeout = clearTimeout;\n        } else {\n            cachedClearTimeout = defaultClearTimeout;\n        }\n    } catch (e) {\n        cachedClearTimeout = defaultClearTimeout;\n    }\n} ())\nfunction runTimeout(fun) {\n    if (cachedSetTimeout === setTimeout) {\n        //normal enviroments in sane situations\n        return setTimeout(fun, 0);\n    }\n    // if setTimeout wasn't available but was latter defined\n    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {\n        cachedSetTimeout = setTimeout;\n        return setTimeout(fun, 0);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedSetTimeout(fun, 0);\n    } catch(e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally\n            return cachedSetTimeout.call(null, fun, 0);\n        } catch(e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error\n            return cachedSetTimeout.call(this, fun, 0);\n        }\n    }\n\n\n}\nfunction runClearTimeout(marker) {\n    if (cachedClearTimeout === clearTimeout) {\n        //normal enviroments in sane situations\n        return clearTimeout(marker);\n    }\n    // if clearTimeout wasn't available but was latter defined\n    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {\n        cachedClearTimeout = clearTimeout;\n        return clearTimeout(marker);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedClearTimeout(marker);\n    } catch (e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally\n            return cachedClearTimeout.call(null, marker);\n        } catch (e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.\n            // Some versions of I.E. have different rules for clearTimeout vs setTimeout\n            return cachedClearTimeout.call(this, marker);\n        }\n    }\n\n\n\n}\nvar queue = [];\nvar draining = false;\nvar currentQueue;\nvar queueIndex = -1;\n\nfunction cleanUpNextTick() {\n    if (!draining || !currentQueue) {\n        return;\n    }\n    draining = false;\n    if (currentQueue.length) {\n        queue = currentQueue.concat(queue);\n    } else {\n        queueIndex = -1;\n    }\n    if (queue.length) {\n        drainQueue();\n    }\n}\n\nfunction drainQueue() {\n    if (draining) {\n        return;\n    }\n    var timeout = runTimeout(cleanUpNextTick);\n    draining = true;\n\n    var len = queue.length;\n    while(len) {\n        currentQueue = queue;\n        queue = [];\n        while (++queueIndex < len) {\n            if (currentQueue) {\n                currentQueue[queueIndex].run();\n            }\n        }\n        queueIndex = -1;\n        len = queue.length;\n    }\n    currentQueue = null;\n    draining = false;\n    runClearTimeout(timeout);\n}\n\nprocess.nextTick = function (fun) {\n    var args = new Array(arguments.length - 1);\n    if (arguments.length > 1) {\n        for (var i = 1; i < arguments.length; i++) {\n            args[i - 1] = arguments[i];\n        }\n    }\n    queue.push(new Item(fun, args));\n    if (queue.length === 1 && !draining) {\n        runTimeout(drainQueue);\n    }\n};\n\n// v8 likes predictible objects\nfunction Item(fun, array) {\n    this.fun = fun;\n    this.array = array;\n}\nItem.prototype.run = function () {\n    this.fun.apply(null, this.array);\n};\nprocess.title = 'browser';\nprocess.browser = true;\nprocess.env = {};\nprocess.argv = [];\nprocess.version = ''; // empty string to avoid regexp issues\nprocess.versions = {};\n\nfunction noop() {}\n\nprocess.on = noop;\nprocess.addListener = noop;\nprocess.once = noop;\nprocess.off = noop;\nprocess.removeListener = noop;\nprocess.removeAllListeners = noop;\nprocess.emit = noop;\n\nprocess.binding = function (name) {\n    throw new Error('process.binding is not supported');\n};\n\nprocess.cwd = function () { return '/' };\nprocess.chdir = function (dir) {\n    throw new Error('process.chdir is not supported');\n};\nprocess.umask = function() { return 0; };\n","(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){\n// shim for using process in browser\nvar process = module.exports = {};\n\n// cached from whatever global is present so that test runners that stub it\n// don't break things.  But we need to wrap it in a try catch in case it is\n// wrapped in strict mode code which doesn't define any globals.  It's inside a\n// function because try/catches deoptimize in certain engines.\n\nvar cachedSetTimeout;\nvar cachedClearTimeout;\n\nfunction defaultSetTimout() {\n    throw new Error('setTimeout has not been defined');\n}\nfunction defaultClearTimeout () {\n    throw new Error('clearTimeout has not been defined');\n}\n(function () {\n    try {\n        if (typeof setTimeout === 'function') {\n            cachedSetTimeout = setTimeout;\n        } else {\n            cachedSetTimeout = defaultSetTimout;\n        }\n    } catch (e) {\n        cachedSetTimeout = defaultSetTimout;\n    }\n    try {\n        if (typeof clearTimeout === 'function') {\n            cachedClearTimeout = clearTimeout;\n        } else {\n            cachedClearTimeout = defaultClearTimeout;\n        }\n    } catch (e) {\n        cachedClearTimeout = defaultClearTimeout;\n    }\n} ())\nfunction runTimeout(fun) {\n    if (cachedSetTimeout === setTimeout) {\n        //normal enviroments in sane situations\n        return setTimeout(fun, 0);\n    }\n    // if setTimeout wasn't available but was latter defined\n    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {\n        cachedSetTimeout = setTimeout;\n        return setTimeout(fun, 0);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedSetTimeout(fun, 0);\n    } catch(e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally\n            return cachedSetTimeout.call(null, fun, 0);\n        } catch(e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error\n            return cachedSetTimeout.call(this, fun, 0);\n        }\n    }\n\n\n}\nfunction runClearTimeout(marker) {\n    if (cachedClearTimeout === clearTimeout) {\n        //normal enviroments in sane situations\n        return clearTimeout(marker);\n    }\n    // if clearTimeout wasn't available but was latter defined\n    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {\n        cachedClearTimeout = clearTimeout;\n        return clearTimeout(marker);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedClearTimeout(marker);\n    } catch (e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally\n            return cachedClearTimeout.call(null, marker);\n        } catch (e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.\n            // Some versions of I.E. have different rules for clearTimeout vs setTimeout\n            return cachedClearTimeout.call(this, marker);\n        }\n    }\n\n\n\n}\nvar queue = [];\nvar draining = false;\nvar currentQueue;\nvar queueIndex = -1;\n\nfunction cleanUpNextTick() {\n    if (!draining || !currentQueue) {\n        return;\n    }\n    draining = false;\n    if (currentQueue.length) {\n        queue = currentQueue.concat(queue);\n    } else {\n        queueIndex = -1;\n    }\n    if (queue.length) {\n        drainQueue();\n    }\n}\n\nfunction drainQueue() {\n    if (draining) {\n        return;\n    }\n    var timeout = runTimeout(cleanUpNextTick);\n    draining = true;\n\n    var len = queue.length;\n    while(len) {\n        currentQueue = queue;\n        queue = [];\n        while (++queueIndex < len) {\n            if (currentQueue) {\n                currentQueue[queueIndex].run();\n            }\n        }\n        queueIndex = -1;\n        len = queue.length;\n    }\n    currentQueue = null;\n    draining = false;\n    runClearTimeout(timeout);\n}\n\nprocess.nextTick = function (fun) {\n    var args = new Array(arguments.length - 1);\n    if (arguments.length > 1) {\n        for (var i = 1; i < arguments.length; i++) {\n            args[i - 1] = arguments[i];\n        }\n    }\n    queue.push(new Item(fun, args));\n    if (queue.length === 1 && !draining) {\n        runTimeout(drainQueue);\n    }\n};\n\n// v8 likes predictible objects\nfunction Item(fun, array) {\n    this.fun = fun;\n    this.array = array;\n}\nItem.prototype.run = function () {\n    this.fun.apply(null, this.array);\n};\nprocess.title = 'browser';\nprocess.browser = true;\nprocess.env = {};\nprocess.argv = [];\nprocess.version = ''; // empty string to avoid regexp issues\nprocess.versions = {};\n\nfunction noop() {}\n\nprocess.on = noop;\nprocess.addListener = noop;\nprocess.once = noop;\nprocess.off = noop;\nprocess.removeListener = noop;\nprocess.removeAllListeners = noop;\nprocess.emit = noop;\n\nprocess.binding = function (name) {\n    throw new Error('process.binding is not supported');\n};\n\nprocess.cwd = function () { return '/' };\nprocess.chdir = function (dir) {\n    throw new Error('process.chdir is not supported');\n};\nprocess.umask = function() { return 0; };\n\n},{}],2:[function(require,module,exports){\nvar Vue // late bind\nvar map = window.__VUE_HOT_MAP__ = Object.create(null)\nvar installed = false\nvar isBrowserify = false\nvar initHookName = 'beforeCreate'\n\nexports.install = function (vue, browserify) {\n  if (installed) return\n  installed = true\n\n  Vue = vue\n  isBrowserify = browserify\n\n  // compat with < 2.0.0-alpha.7\n  if (Vue.config._lifecycleHooks.indexOf('init') > -1) {\n    initHookName = 'init'\n  }\n\n  exports.compatible = Number(Vue.version.split('.')[0]) >= 2\n  if (!exports.compatible) {\n    console.warn(\n      '[HMR] You are using a version of vue-hot-reload-api that is ' +\n      'only compatible with Vue.js core ^2.0.0.'\n    )\n    return\n  }\n}\n\n/**\n * Create a record for a hot module, which keeps track of its constructor\n * and instances\n *\n * @param {String} id\n * @param {Object} options\n */\n\nexports.createRecord = function (id, options) {\n  var Ctor = null\n  if (typeof options === 'function') {\n    Ctor = options\n    options = Ctor.options\n  }\n  makeOptionsHot(id, options)\n  map[id] = {\n    Ctor: Vue.extend(options),\n    instances: []\n  }\n}\n\n/**\n * Make a Component options object hot.\n *\n * @param {String} id\n * @param {Object} options\n */\n\nfunction makeOptionsHot (id, options) {\n  injectHook(options, initHookName, function () {\n    map[id].instances.push(this)\n  })\n  injectHook(options, 'beforeDestroy', function () {\n    var instances = map[id].instances\n    instances.splice(instances.indexOf(this), 1)\n  })\n}\n\n/**\n * Inject a hook to a hot reloadable component so that\n * we can keep track of it.\n *\n * @param {Object} options\n * @param {String} name\n * @param {Function} hook\n */\n\nfunction injectHook (options, name, hook) {\n  var existing = options[name]\n  options[name] = existing\n    ? Array.isArray(existing)\n      ? existing.concat(hook)\n      : [existing, hook]\n    : [hook]\n}\n\nfunction tryWrap (fn) {\n  return function (id, arg) {\n    try { fn(id, arg) } catch (e) {\n      console.error(e)\n      console.warn('Something went wrong during Vue component hot-reload. Full reload required.')\n    }\n  }\n}\n\nexports.rerender = tryWrap(function (id, fns) {\n  var record = map[id]\n  record.Ctor.options.render = fns.render\n  record.Ctor.options.staticRenderFns = fns.staticRenderFns\n  record.instances.slice().forEach(function (instance) {\n    instance.$options.render = fns.render\n    instance.$options.staticRenderFns = fns.staticRenderFns\n    instance._staticTrees = [] // reset static trees\n    instance.$forceUpdate()\n  })\n})\n\nexports.reload = tryWrap(function (id, options) {\n  makeOptionsHot(id, options)\n  var record = map[id]\n  record.Ctor.extendOptions = options\n  var newCtor = Vue.extend(options)\n  record.Ctor.options = newCtor.options\n  record.Ctor.cid = newCtor.cid\n  if (newCtor.release) {\n    // temporary global mixin strategy used in < 2.0.0-alpha.6\n    newCtor.release()\n  }\n  record.instances.slice().forEach(function (instance) {\n    if (instance.$parent) {\n      instance.$parent.$forceUpdate()\n    } else {\n      console.warn('Root or manually mounted instance modified. Full reload required.')\n    }\n  })\n})\n\n},{}],3:[function(require,module,exports){\n(function (process){\n/*!\n * Vue.js v1.0.28\n * (c) 2016 Evan You\n * Released under the MIT License.\n */\n'use strict';\n\nfunction set(obj, key, val) {\n  if (hasOwn(obj, key)) {\n    obj[key] = val;\n    return;\n  }\n  if (obj._isVue) {\n    set(obj._data, key, val);\n    return;\n  }\n  var ob = obj.__ob__;\n  if (!ob) {\n    obj[key] = val;\n    return;\n  }\n  ob.convert(key, val);\n  ob.dep.notify();\n  if (ob.vms) {\n    var i = ob.vms.length;\n    while (i--) {\n      var vm = ob.vms[i];\n      vm._proxy(key);\n      vm._digest();\n    }\n  }\n  return val;\n}\n\n/**\n * Delete a property and trigger change if necessary.\n *\n * @param {Object} obj\n * @param {String} key\n */\n\nfunction del(obj, key) {\n  if (!hasOwn(obj, key)) {\n    return;\n  }\n  delete obj[key];\n  var ob = obj.__ob__;\n  if (!ob) {\n    if (obj._isVue) {\n      delete obj._data[key];\n      obj._digest();\n    }\n    return;\n  }\n  ob.dep.notify();\n  if (ob.vms) {\n    var i = ob.vms.length;\n    while (i--) {\n      var vm = ob.vms[i];\n      vm._unproxy(key);\n      vm._digest();\n    }\n  }\n}\n\nvar hasOwnProperty = Object.prototype.hasOwnProperty;\n/**\n * Check whether the object has the property.\n *\n * @param {Object} obj\n * @param {String} key\n * @return {Boolean}\n */\n\nfunction hasOwn(obj, key) {\n  return hasOwnProperty.call(obj, key);\n}\n\n/**\n * Check if an expression is a literal value.\n *\n * @param {String} exp\n * @return {Boolean}\n */\n\nvar literalValueRE = /^\\s?(true|false|-?[\\d\\.]+|'[^']*'|\"[^\"]*\")\\s?$/;\n\nfunction isLiteral(exp) {\n  return literalValueRE.test(exp);\n}\n\n/**\n * Check if a string starts with $ or _\n *\n * @param {String} str\n * @return {Boolean}\n */\n\nfunction isReserved(str) {\n  var c = (str + '').charCodeAt(0);\n  return c === 0x24 || c === 0x5F;\n}\n\n/**\n * Guard text output, make sure undefined outputs\n * empty string\n *\n * @param {*} value\n * @return {String}\n */\n\nfunction _toString(value) {\n  return value == null ? '' : value.toString();\n}\n\n/**\n * Check and convert possible numeric strings to numbers\n * before setting back to data\n *\n * @param {*} value\n * @return {*|Number}\n */\n\nfunction toNumber(value) {\n  if (typeof value !== 'string') {\n    return value;\n  } else {\n    var parsed = Number(value);\n    return isNaN(parsed) ? value : parsed;\n  }\n}\n\n/**\n * Convert string boolean literals into real booleans.\n *\n * @param {*} value\n * @return {*|Boolean}\n */\n\nfunction toBoolean(value) {\n  return value === 'true' ? true : value === 'false' ? false : value;\n}\n\n/**\n * Strip quotes from a string\n *\n * @param {String} str\n * @return {String | false}\n */\n\nfunction stripQuotes(str) {\n  var a = str.charCodeAt(0);\n  var b = str.charCodeAt(str.length - 1);\n  return a === b && (a === 0x22 || a === 0x27) ? str.slice(1, -1) : str;\n}\n\n/**\n * Camelize a hyphen-delimited string.\n *\n * @param {String} str\n * @return {String}\n */\n\nvar camelizeRE = /-(\\w)/g;\n\nfunction camelize(str) {\n  return str.replace(camelizeRE, toUpper);\n}\n\nfunction toUpper(_, c) {\n  return c ? c.toUpperCase() : '';\n}\n\n/**\n * Hyphenate a camelCase string.\n *\n * @param {String} str\n * @return {String}\n */\n\nvar hyphenateRE = /([^-])([A-Z])/g;\n\nfunction hyphenate(str) {\n  return str.replace(hyphenateRE, '$1-$2').replace(hyphenateRE, '$1-$2').toLowerCase();\n}\n\n/**\n * Converts hyphen/underscore/slash delimitered names into\n * camelized classNames.\n *\n * e.g. my-component => MyComponent\n *      some_else    => SomeElse\n *      some/comp    => SomeComp\n *\n * @param {String} str\n * @return {String}\n */\n\nvar classifyRE = /(?:^|[-_\\/])(\\w)/g;\n\nfunction classify(str) {\n  return str.replace(classifyRE, toUpper);\n}\n\n/**\n * Simple bind, faster than native\n *\n * @param {Function} fn\n * @param {Object} ctx\n * @return {Function}\n */\n\nfunction bind(fn, ctx) {\n  return function (a) {\n    var l = arguments.length;\n    return l ? l > 1 ? fn.apply(ctx, arguments) : fn.call(ctx, a) : fn.call(ctx);\n  };\n}\n\n/**\n * Convert an Array-like object to a real Array.\n *\n * @param {Array-like} list\n * @param {Number} [start] - start index\n * @return {Array}\n */\n\nfunction toArray(list, start) {\n  start = start || 0;\n  var i = list.length - start;\n  var ret = new Array(i);\n  while (i--) {\n    ret[i] = list[i + start];\n  }\n  return ret;\n}\n\n/**\n * Mix properties into target object.\n *\n * @param {Object} to\n * @param {Object} from\n */\n\nfunction extend(to, from) {\n  var keys = Object.keys(from);\n  var i = keys.length;\n  while (i--) {\n    to[keys[i]] = from[keys[i]];\n  }\n  return to;\n}\n\n/**\n * Quick object check - this is primarily used to tell\n * Objects from primitive values when we know the value\n * is a JSON-compliant type.\n *\n * @param {*} obj\n * @return {Boolean}\n */\n\nfunction isObject(obj) {\n  return obj !== null && typeof obj === 'object';\n}\n\n/**\n * Strict object type check. Only returns true\n * for plain JavaScript objects.\n *\n * @param {*} obj\n * @return {Boolean}\n */\n\nvar toString = Object.prototype.toString;\nvar OBJECT_STRING = '[object Object]';\n\nfunction isPlainObject(obj) {\n  return toString.call(obj) === OBJECT_STRING;\n}\n\n/**\n * Array type check.\n *\n * @param {*} obj\n * @return {Boolean}\n */\n\nvar isArray = Array.isArray;\n\n/**\n * Define a property.\n *\n * @param {Object} obj\n * @param {String} key\n * @param {*} val\n * @param {Boolean} [enumerable]\n */\n\nfunction def(obj, key, val, enumerable) {\n  Object.defineProperty(obj, key, {\n    value: val,\n    enumerable: !!enumerable,\n    writable: true,\n    configurable: true\n  });\n}\n\n/**\n * Debounce a function so it only gets called after the\n * input stops arriving after the given wait period.\n *\n * @param {Function} func\n * @param {Number} wait\n * @return {Function} - the debounced function\n */\n\nfunction _debounce(func, wait) {\n  var timeout, args, context, timestamp, result;\n  var later = function later() {\n    var last = Date.now() - timestamp;\n    if (last < wait && last >= 0) {\n      timeout = setTimeout(later, wait - last);\n    } else {\n      timeout = null;\n      result = func.apply(context, args);\n      if (!timeout) context = args = null;\n    }\n  };\n  return function () {\n    context = this;\n    args = arguments;\n    timestamp = Date.now();\n    if (!timeout) {\n      timeout = setTimeout(later, wait);\n    }\n    return result;\n  };\n}\n\n/**\n * Manual indexOf because it's slightly faster than\n * native.\n *\n * @param {Array} arr\n * @param {*} obj\n */\n\nfunction indexOf(arr, obj) {\n  var i = arr.length;\n  while (i--) {\n    if (arr[i] === obj) return i;\n  }\n  return -1;\n}\n\n/**\n * Make a cancellable version of an async callback.\n *\n * @param {Function} fn\n * @return {Function}\n */\n\nfunction cancellable(fn) {\n  var cb = function cb() {\n    if (!cb.cancelled) {\n      return fn.apply(this, arguments);\n    }\n  };\n  cb.cancel = function () {\n    cb.cancelled = true;\n  };\n  return cb;\n}\n\n/**\n * Check if two values are loosely equal - that is,\n * if they are plain objects, do they have the same shape?\n *\n * @param {*} a\n * @param {*} b\n * @return {Boolean}\n */\n\nfunction looseEqual(a, b) {\n  /* eslint-disable eqeqeq */\n  return a == b || (isObject(a) && isObject(b) ? JSON.stringify(a) === JSON.stringify(b) : false);\n  /* eslint-enable eqeqeq */\n}\n\nvar hasProto = ('__proto__' in {});\n\n// Browser environment sniffing\nvar inBrowser = typeof window !== 'undefined' && Object.prototype.toString.call(window) !== '[object Object]';\n\n// detect devtools\nvar devtools = inBrowser && window.__VUE_DEVTOOLS_GLOBAL_HOOK__;\n\n// UA sniffing for working around browser-specific quirks\nvar UA = inBrowser && window.navigator.userAgent.toLowerCase();\nvar isIE = UA && UA.indexOf('trident') > 0;\nvar isIE9 = UA && UA.indexOf('msie 9.0') > 0;\nvar isAndroid = UA && UA.indexOf('android') > 0;\nvar isIOS = UA && /iphone|ipad|ipod|ios/.test(UA);\n\nvar transitionProp = undefined;\nvar transitionEndEvent = undefined;\nvar animationProp = undefined;\nvar animationEndEvent = undefined;\n\n// Transition property/event sniffing\nif (inBrowser && !isIE9) {\n  var isWebkitTrans = window.ontransitionend === undefined && window.onwebkittransitionend !== undefined;\n  var isWebkitAnim = window.onanimationend === undefined && window.onwebkitanimationend !== undefined;\n  transitionProp = isWebkitTrans ? 'WebkitTransition' : 'transition';\n  transitionEndEvent = isWebkitTrans ? 'webkitTransitionEnd' : 'transitionend';\n  animationProp = isWebkitAnim ? 'WebkitAnimation' : 'animation';\n  animationEndEvent = isWebkitAnim ? 'webkitAnimationEnd' : 'animationend';\n}\n\n/* istanbul ignore next */\nfunction isNative(Ctor) {\n  return (/native code/.test(Ctor.toString())\n  );\n}\n\n/**\n * Defer a task to execute it asynchronously. Ideally this\n * should be executed as a microtask, so we leverage\n * MutationObserver if it's available, and fallback to\n * setTimeout(0).\n *\n * @param {Function} cb\n * @param {Object} ctx\n */\n\nvar nextTick = (function () {\n  var callbacks = [];\n  var pending = false;\n  var timerFunc = undefined;\n\n  function nextTickHandler() {\n    pending = false;\n    var copies = callbacks.slice(0);\n    callbacks.length = 0;\n    for (var i = 0; i < copies.length; i++) {\n      copies[i]();\n    }\n  }\n\n  // the nextTick behavior leverages the microtask queue, which can be accessed\n  // via either native Promise.then or MutationObserver.\n  // MutationObserver has wider support, however it is seriously bugged in\n  // UIWebView in iOS >= 9.3.3 when triggered in touch event handlers. It\n  // completely stops working after triggering a few times... so, if native\n  // Promise is available, we will use it:\n  /* istanbul ignore if */\n  if (typeof Promise !== 'undefined' && isNative(Promise)) {\n    var p = Promise.resolve();\n    var noop = function noop() {};\n    timerFunc = function () {\n      p.then(nextTickHandler);\n      // in problematic UIWebViews, Promise.then doesn't completely break, but\n      // it can get stuck in a weird state where callbacks are pushed into the\n      // microtask queue but the queue isn't being flushed, until the browser\n      // needs to do some other work, e.g. handle a timer. Therefore we can\n      // \"force\" the microtask queue to be flushed by adding an empty timer.\n      if (isIOS) setTimeout(noop);\n    };\n  } else if (typeof MutationObserver !== 'undefined') {\n    // use MutationObserver where native Promise is not available,\n    // e.g. IE11, iOS7, Android 4.4\n    var counter = 1;\n    var observer = new MutationObserver(nextTickHandler);\n    var textNode = document.createTextNode(String(counter));\n    observer.observe(textNode, {\n      characterData: true\n    });\n    timerFunc = function () {\n      counter = (counter + 1) % 2;\n      textNode.data = String(counter);\n    };\n  } else {\n    // fallback to setTimeout\n    /* istanbul ignore next */\n    timerFunc = setTimeout;\n  }\n\n  return function (cb, ctx) {\n    var func = ctx ? function () {\n      cb.call(ctx);\n    } : cb;\n    callbacks.push(func);\n    if (pending) return;\n    pending = true;\n    timerFunc(nextTickHandler, 0);\n  };\n})();\n\nvar _Set = undefined;\n/* istanbul ignore if */\nif (typeof Set !== 'undefined' && isNative(Set)) {\n  // use native Set when available.\n  _Set = Set;\n} else {\n  // a non-standard Set polyfill that only works with primitive keys.\n  _Set = function () {\n    this.set = Object.create(null);\n  };\n  _Set.prototype.has = function (key) {\n    return this.set[key] !== undefined;\n  };\n  _Set.prototype.add = function (key) {\n    this.set[key] = 1;\n  };\n  _Set.prototype.clear = function () {\n    this.set = Object.create(null);\n  };\n}\n\nfunction Cache(limit) {\n  this.size = 0;\n  this.limit = limit;\n  this.head = this.tail = undefined;\n  this._keymap = Object.create(null);\n}\n\nvar p = Cache.prototype;\n\n/**\n * Put <value> into the cache associated with <key>.\n * Returns the entry which was removed to make room for\n * the new entry. Otherwise undefined is returned.\n * (i.e. if there was enough room already).\n *\n * @param {String} key\n * @param {*} value\n * @return {Entry|undefined}\n */\n\np.put = function (key, value) {\n  var removed;\n\n  var entry = this.get(key, true);\n  if (!entry) {\n    if (this.size === this.limit) {\n      removed = this.shift();\n    }\n    entry = {\n      key: key\n    };\n    this._keymap[key] = entry;\n    if (this.tail) {\n      this.tail.newer = entry;\n      entry.older = this.tail;\n    } else {\n      this.head = entry;\n    }\n    this.tail = entry;\n    this.size++;\n  }\n  entry.value = value;\n\n  return removed;\n};\n\n/**\n * Purge the least recently used (oldest) entry from the\n * cache. Returns the removed entry or undefined if the\n * cache was empty.\n */\n\np.shift = function () {\n  var entry = this.head;\n  if (entry) {\n    this.head = this.head.newer;\n    this.head.older = undefined;\n    entry.newer = entry.older = undefined;\n    this._keymap[entry.key] = undefined;\n    this.size--;\n  }\n  return entry;\n};\n\n/**\n * Get and register recent use of <key>. Returns the value\n * associated with <key> or undefined if not in cache.\n *\n * @param {String} key\n * @param {Boolean} returnEntry\n * @return {Entry|*}\n */\n\np.get = function (key, returnEntry) {\n  var entry = this._keymap[key];\n  if (entry === undefined) return;\n  if (entry === this.tail) {\n    return returnEntry ? entry : entry.value;\n  }\n  // HEAD--------------TAIL\n  //   <.older   .newer>\n  //  <--- add direction --\n  //   A  B  C  <D>  E\n  if (entry.newer) {\n    if (entry === this.head) {\n      this.head = entry.newer;\n    }\n    entry.newer.older = entry.older; // C <-- E.\n  }\n  if (entry.older) {\n    entry.older.newer = entry.newer; // C. --> E\n  }\n  entry.newer = undefined; // D --x\n  entry.older = this.tail; // D. --> E\n  if (this.tail) {\n    this.tail.newer = entry; // E. <-- D\n  }\n  this.tail = entry;\n  return returnEntry ? entry : entry.value;\n};\n\nvar cache$1 = new Cache(1000);\nvar reservedArgRE = /^in$|^-?\\d+/;\n\n/**\n * Parser state\n */\n\nvar str;\nvar dir;\nvar len;\nvar index;\nvar chr;\nvar state;\nvar startState = 0;\nvar filterState = 1;\nvar filterNameState = 2;\nvar filterArgState = 3;\n\nvar doubleChr = 0x22;\nvar singleChr = 0x27;\nvar pipeChr = 0x7C;\nvar escapeChr = 0x5C;\nvar spaceChr = 0x20;\n\nvar expStartChr = { 0x5B: 1, 0x7B: 1, 0x28: 1 };\nvar expChrPair = { 0x5B: 0x5D, 0x7B: 0x7D, 0x28: 0x29 };\n\nfunction peek() {\n  return str.charCodeAt(index + 1);\n}\n\nfunction next() {\n  return str.charCodeAt(++index);\n}\n\nfunction eof() {\n  return index >= len;\n}\n\nfunction eatSpace() {\n  while (peek() === spaceChr) {\n    next();\n  }\n}\n\nfunction isStringStart(chr) {\n  return chr === doubleChr || chr === singleChr;\n}\n\nfunction isExpStart(chr) {\n  return expStartChr[chr];\n}\n\nfunction isExpEnd(start, chr) {\n  return expChrPair[start] === chr;\n}\n\nfunction parseString() {\n  var stringQuote = next();\n  var chr;\n  while (!eof()) {\n    chr = next();\n    // escape char\n    if (chr === escapeChr) {\n      next();\n    } else if (chr === stringQuote) {\n      break;\n    }\n  }\n}\n\nfunction parseSpecialExp(chr) {\n  var inExp = 0;\n  var startChr = chr;\n\n  while (!eof()) {\n    chr = peek();\n    if (isStringStart(chr)) {\n      parseString();\n      continue;\n    }\n\n    if (startChr === chr) {\n      inExp++;\n    }\n    if (isExpEnd(startChr, chr)) {\n      inExp--;\n    }\n\n    next();\n\n    if (inExp === 0) {\n      break;\n    }\n  }\n}\n\n/**\n * syntax:\n * expression | filterName  [arg  arg [| filterName arg arg]]\n */\n\nfunction parseExpression() {\n  var start = index;\n  while (!eof()) {\n    chr = peek();\n    if (isStringStart(chr)) {\n      parseString();\n    } else if (isExpStart(chr)) {\n      parseSpecialExp(chr);\n    } else if (chr === pipeChr) {\n      next();\n      chr = peek();\n      if (chr === pipeChr) {\n        next();\n      } else {\n        if (state === startState || state === filterArgState) {\n          state = filterState;\n        }\n        break;\n      }\n    } else if (chr === spaceChr && (state === filterNameState || state === filterArgState)) {\n      eatSpace();\n      break;\n    } else {\n      if (state === filterState) {\n        state = filterNameState;\n      }\n      next();\n    }\n  }\n\n  return str.slice(start + 1, index) || null;\n}\n\nfunction parseFilterList() {\n  var filters = [];\n  while (!eof()) {\n    filters.push(parseFilter());\n  }\n  return filters;\n}\n\nfunction parseFilter() {\n  var filter = {};\n  var args;\n\n  state = filterState;\n  filter.name = parseExpression().trim();\n\n  state = filterArgState;\n  args = parseFilterArguments();\n\n  if (args.length) {\n    filter.args = args;\n  }\n  return filter;\n}\n\nfunction parseFilterArguments() {\n  var args = [];\n  while (!eof() && state !== filterState) {\n    var arg = parseExpression();\n    if (!arg) {\n      break;\n    }\n    args.push(processFilterArg(arg));\n  }\n\n  return args;\n}\n\n/**\n * Check if an argument is dynamic and strip quotes.\n *\n * @param {String} arg\n * @return {Object}\n */\n\nfunction processFilterArg(arg) {\n  if (reservedArgRE.test(arg)) {\n    return {\n      value: toNumber(arg),\n      dynamic: false\n    };\n  } else {\n    var stripped = stripQuotes(arg);\n    var dynamic = stripped === arg;\n    return {\n      value: dynamic ? arg : stripped,\n      dynamic: dynamic\n    };\n  }\n}\n\n/**\n * Parse a directive value and extract the expression\n * and its filters into a descriptor.\n *\n * Example:\n *\n * \"a + 1 | uppercase\" will yield:\n * {\n *   expression: 'a + 1',\n *   filters: [\n *     { name: 'uppercase', args: null }\n *   ]\n * }\n *\n * @param {String} s\n * @return {Object}\n */\n\nfunction parseDirective(s) {\n  var hit = cache$1.get(s);\n  if (hit) {\n    return hit;\n  }\n\n  // reset parser state\n  str = s;\n  dir = {};\n  len = str.length;\n  index = -1;\n  chr = '';\n  state = startState;\n\n  var filters;\n\n  if (str.indexOf('|') < 0) {\n    dir.expression = str.trim();\n  } else {\n    dir.expression = parseExpression().trim();\n    filters = parseFilterList();\n    if (filters.length) {\n      dir.filters = filters;\n    }\n  }\n\n  cache$1.put(s, dir);\n  return dir;\n}\n\nvar directive = Object.freeze({\n  parseDirective: parseDirective\n});\n\nvar regexEscapeRE = /[-.*+?^${}()|[\\]\\/\\\\]/g;\nvar cache = undefined;\nvar tagRE = undefined;\nvar htmlRE = undefined;\n/**\n * Escape a string so it can be used in a RegExp\n * constructor.\n *\n * @param {String} str\n */\n\nfunction escapeRegex(str) {\n  return str.replace(regexEscapeRE, '\\\\$&');\n}\n\nfunction compileRegex() {\n  var open = escapeRegex(config.delimiters[0]);\n  var close = escapeRegex(config.delimiters[1]);\n  var unsafeOpen = escapeRegex(config.unsafeDelimiters[0]);\n  var unsafeClose = escapeRegex(config.unsafeDelimiters[1]);\n  tagRE = new RegExp(unsafeOpen + '((?:.|\\\\n)+?)' + unsafeClose + '|' + open + '((?:.|\\\\n)+?)' + close, 'g');\n  htmlRE = new RegExp('^' + unsafeOpen + '((?:.|\\\\n)+?)' + unsafeClose + '$');\n  // reset cache\n  cache = new Cache(1000);\n}\n\n/**\n * Parse a template text string into an array of tokens.\n *\n * @param {String} text\n * @return {Array<Object> | null}\n *               - {String} type\n *               - {String} value\n *               - {Boolean} [html]\n *               - {Boolean} [oneTime]\n */\n\nfunction parseText(text) {\n  if (!cache) {\n    compileRegex();\n  }\n  var hit = cache.get(text);\n  if (hit) {\n    return hit;\n  }\n  if (!tagRE.test(text)) {\n    return null;\n  }\n  var tokens = [];\n  var lastIndex = tagRE.lastIndex = 0;\n  var match, index, html, value, first, oneTime;\n  /* eslint-disable no-cond-assign */\n  while (match = tagRE.exec(text)) {\n    /* eslint-enable no-cond-assign */\n    index = match.index;\n    // push text token\n    if (index > lastIndex) {\n      tokens.push({\n        value: text.slice(lastIndex, index)\n      });\n    }\n    // tag token\n    html = htmlRE.test(match[0]);\n    value = html ? match[1] : match[2];\n    first = value.charCodeAt(0);\n    oneTime = first === 42; // *\n    value = oneTime ? value.slice(1) : value;\n    tokens.push({\n      tag: true,\n      value: value.trim(),\n      html: html,\n      oneTime: oneTime\n    });\n    lastIndex = index + match[0].length;\n  }\n  if (lastIndex < text.length) {\n    tokens.push({\n      value: text.slice(lastIndex)\n    });\n  }\n  cache.put(text, tokens);\n  return tokens;\n}\n\n/**\n * Format a list of tokens into an expression.\n * e.g. tokens parsed from 'a {{b}} c' can be serialized\n * into one single expression as '\"a \" + b + \" c\"'.\n *\n * @param {Array} tokens\n * @param {Vue} [vm]\n * @return {String}\n */\n\nfunction tokensToExp(tokens, vm) {\n  if (tokens.length > 1) {\n    return tokens.map(function (token) {\n      return formatToken(token, vm);\n    }).join('+');\n  } else {\n    return formatToken(tokens[0], vm, true);\n  }\n}\n\n/**\n * Format a single token.\n *\n * @param {Object} token\n * @param {Vue} [vm]\n * @param {Boolean} [single]\n * @return {String}\n */\n\nfunction formatToken(token, vm, single) {\n  return token.tag ? token.oneTime && vm ? '\"' + vm.$eval(token.value) + '\"' : inlineFilters(token.value, single) : '\"' + token.value + '\"';\n}\n\n/**\n * For an attribute with multiple interpolation tags,\n * e.g. attr=\"some-{{thing | filter}}\", in order to combine\n * the whole thing into a single watchable expression, we\n * have to inline those filters. This function does exactly\n * that. This is a bit hacky but it avoids heavy changes\n * to directive parser and watcher mechanism.\n *\n * @param {String} exp\n * @param {Boolean} single\n * @return {String}\n */\n\nvar filterRE = /[^|]\\|[^|]/;\nfunction inlineFilters(exp, single) {\n  if (!filterRE.test(exp)) {\n    return single ? exp : '(' + exp + ')';\n  } else {\n    var dir = parseDirective(exp);\n    if (!dir.filters) {\n      return '(' + exp + ')';\n    } else {\n      return 'this._applyFilters(' + dir.expression + // value\n      ',null,' + // oldValue (null for read)\n      JSON.stringify(dir.filters) + // filter descriptors\n      ',false)'; // write?\n    }\n  }\n}\n\nvar text = Object.freeze({\n  compileRegex: compileRegex,\n  parseText: parseText,\n  tokensToExp: tokensToExp\n});\n\nvar delimiters = ['{{', '}}'];\nvar unsafeDelimiters = ['{{{', '}}}'];\n\nvar config = Object.defineProperties({\n\n  /**\n   * Whether to print debug messages.\n   * Also enables stack trace for warnings.\n   *\n   * @type {Boolean}\n   */\n\n  debug: false,\n\n  /**\n   * Whether to suppress warnings.\n   *\n   * @type {Boolean}\n   */\n\n  silent: false,\n\n  /**\n   * Whether to use async rendering.\n   */\n\n  async: true,\n\n  /**\n   * Whether to warn against errors caught when evaluating\n   * expressions.\n   */\n\n  warnExpressionErrors: true,\n\n  /**\n   * Whether to allow devtools inspection.\n   * Disabled by default in production builds.\n   */\n\n  devtools: process.env.NODE_ENV !== 'production',\n\n  /**\n   * Internal flag to indicate the delimiters have been\n   * changed.\n   *\n   * @type {Boolean}\n   */\n\n  _delimitersChanged: true,\n\n  /**\n   * List of asset types that a component can own.\n   *\n   * @type {Array}\n   */\n\n  _assetTypes: ['component', 'directive', 'elementDirective', 'filter', 'transition', 'partial'],\n\n  /**\n   * prop binding modes\n   */\n\n  _propBindingModes: {\n    ONE_WAY: 0,\n    TWO_WAY: 1,\n    ONE_TIME: 2\n  },\n\n  /**\n   * Max circular updates allowed in a batcher flush cycle.\n   */\n\n  _maxUpdateCount: 100\n\n}, {\n  delimiters: { /**\n                 * Interpolation delimiters. Changing these would trigger\n                 * the text parser to re-compile the regular expressions.\n                 *\n                 * @type {Array<String>}\n                 */\n\n    get: function get() {\n      return delimiters;\n    },\n    set: function set(val) {\n      delimiters = val;\n      compileRegex();\n    },\n    configurable: true,\n    enumerable: true\n  },\n  unsafeDelimiters: {\n    get: function get() {\n      return unsafeDelimiters;\n    },\n    set: function set(val) {\n      unsafeDelimiters = val;\n      compileRegex();\n    },\n    configurable: true,\n    enumerable: true\n  }\n});\n\nvar warn = undefined;\nvar formatComponentName = undefined;\n\nif (process.env.NODE_ENV !== 'production') {\n  (function () {\n    var hasConsole = typeof console !== 'undefined';\n\n    warn = function (msg, vm) {\n      if (hasConsole && !config.silent) {\n        console.error('[Vue warn]: ' + msg + (vm ? formatComponentName(vm) : ''));\n      }\n    };\n\n    formatComponentName = function (vm) {\n      var name = vm._isVue ? vm.$options.name : vm.name;\n      return name ? ' (found in component: <' + hyphenate(name) + '>)' : '';\n    };\n  })();\n}\n\n/**\n * Append with transition.\n *\n * @param {Element} el\n * @param {Element} target\n * @param {Vue} vm\n * @param {Function} [cb]\n */\n\nfunction appendWithTransition(el, target, vm, cb) {\n  applyTransition(el, 1, function () {\n    target.appendChild(el);\n  }, vm, cb);\n}\n\n/**\n * InsertBefore with transition.\n *\n * @param {Element} el\n * @param {Element} target\n * @param {Vue} vm\n * @param {Function} [cb]\n */\n\nfunction beforeWithTransition(el, target, vm, cb) {\n  applyTransition(el, 1, function () {\n    before(el, target);\n  }, vm, cb);\n}\n\n/**\n * Remove with transition.\n *\n * @param {Element} el\n * @param {Vue} vm\n * @param {Function} [cb]\n */\n\nfunction removeWithTransition(el, vm, cb) {\n  applyTransition(el, -1, function () {\n    remove(el);\n  }, vm, cb);\n}\n\n/**\n * Apply transitions with an operation callback.\n *\n * @param {Element} el\n * @param {Number} direction\n *                  1: enter\n *                 -1: leave\n * @param {Function} op - the actual DOM operation\n * @param {Vue} vm\n * @param {Function} [cb]\n */\n\nfunction applyTransition(el, direction, op, vm, cb) {\n  var transition = el.__v_trans;\n  if (!transition ||\n  // skip if there are no js hooks and CSS transition is\n  // not supported\n  !transition.hooks && !transitionEndEvent ||\n  // skip transitions for initial compile\n  !vm._isCompiled ||\n  // if the vm is being manipulated by a parent directive\n  // during the parent's compilation phase, skip the\n  // animation.\n  vm.$parent && !vm.$parent._isCompiled) {\n    op();\n    if (cb) cb();\n    return;\n  }\n  var action = direction > 0 ? 'enter' : 'leave';\n  transition[action](op, cb);\n}\n\nvar transition = Object.freeze({\n  appendWithTransition: appendWithTransition,\n  beforeWithTransition: beforeWithTransition,\n  removeWithTransition: removeWithTransition,\n  applyTransition: applyTransition\n});\n\n/**\n * Query an element selector if it's not an element already.\n *\n * @param {String|Element} el\n * @return {Element}\n */\n\nfunction query(el) {\n  if (typeof el === 'string') {\n    var selector = el;\n    el = document.querySelector(el);\n    if (!el) {\n      process.env.NODE_ENV !== 'production' && warn('Cannot find element: ' + selector);\n    }\n  }\n  return el;\n}\n\n/**\n * Check if a node is in the document.\n * Note: document.documentElement.contains should work here\n * but always returns false for comment nodes in phantomjs,\n * making unit tests difficult. This is fixed by doing the\n * contains() check on the node's parentNode instead of\n * the node itself.\n *\n * @param {Node} node\n * @return {Boolean}\n */\n\nfunction inDoc(node) {\n  if (!node) return false;\n  var doc = node.ownerDocument.documentElement;\n  var parent = node.parentNode;\n  return doc === node || doc === parent || !!(parent && parent.nodeType === 1 && doc.contains(parent));\n}\n\n/**\n * Get and remove an attribute from a node.\n *\n * @param {Node} node\n * @param {String} _attr\n */\n\nfunction getAttr(node, _attr) {\n  var val = node.getAttribute(_attr);\n  if (val !== null) {\n    node.removeAttribute(_attr);\n  }\n  return val;\n}\n\n/**\n * Get an attribute with colon or v-bind: prefix.\n *\n * @param {Node} node\n * @param {String} name\n * @return {String|null}\n */\n\nfunction getBindAttr(node, name) {\n  var val = getAttr(node, ':' + name);\n  if (val === null) {\n    val = getAttr(node, 'v-bind:' + name);\n  }\n  return val;\n}\n\n/**\n * Check the presence of a bind attribute.\n *\n * @param {Node} node\n * @param {String} name\n * @return {Boolean}\n */\n\nfunction hasBindAttr(node, name) {\n  return node.hasAttribute(name) || node.hasAttribute(':' + name) || node.hasAttribute('v-bind:' + name);\n}\n\n/**\n * Insert el before target\n *\n * @param {Element} el\n * @param {Element} target\n */\n\nfunction before(el, target) {\n  target.parentNode.insertBefore(el, target);\n}\n\n/**\n * Insert el after target\n *\n * @param {Element} el\n * @param {Element} target\n */\n\nfunction after(el, target) {\n  if (target.nextSibling) {\n    before(el, target.nextSibling);\n  } else {\n    target.parentNode.appendChild(el);\n  }\n}\n\n/**\n * Remove el from DOM\n *\n * @param {Element} el\n */\n\nfunction remove(el) {\n  el.parentNode.removeChild(el);\n}\n\n/**\n * Prepend el to target\n *\n * @param {Element} el\n * @param {Element} target\n */\n\nfunction prepend(el, target) {\n  if (target.firstChild) {\n    before(el, target.firstChild);\n  } else {\n    target.appendChild(el);\n  }\n}\n\n/**\n * Replace target with el\n *\n * @param {Element} target\n * @param {Element} el\n */\n\nfunction replace(target, el) {\n  var parent = target.parentNode;\n  if (parent) {\n    parent.replaceChild(el, target);\n  }\n}\n\n/**\n * Add event listener shorthand.\n *\n * @param {Element} el\n * @param {String} event\n * @param {Function} cb\n * @param {Boolean} [useCapture]\n */\n\nfunction on(el, event, cb, useCapture) {\n  el.addEventListener(event, cb, useCapture);\n}\n\n/**\n * Remove event listener shorthand.\n *\n * @param {Element} el\n * @param {String} event\n * @param {Function} cb\n */\n\nfunction off(el, event, cb) {\n  el.removeEventListener(event, cb);\n}\n\n/**\n * For IE9 compat: when both class and :class are present\n * getAttribute('class') returns wrong value...\n *\n * @param {Element} el\n * @return {String}\n */\n\nfunction getClass(el) {\n  var classname = el.className;\n  if (typeof classname === 'object') {\n    classname = classname.baseVal || '';\n  }\n  return classname;\n}\n\n/**\n * In IE9, setAttribute('class') will result in empty class\n * if the element also has the :class attribute; However in\n * PhantomJS, setting `className` does not work on SVG elements...\n * So we have to do a conditional check here.\n *\n * @param {Element} el\n * @param {String} cls\n */\n\nfunction setClass(el, cls) {\n  /* istanbul ignore if */\n  if (isIE9 && !/svg$/.test(el.namespaceURI)) {\n    el.className = cls;\n  } else {\n    el.setAttribute('class', cls);\n  }\n}\n\n/**\n * Add class with compatibility for IE & SVG\n *\n * @param {Element} el\n * @param {String} cls\n */\n\nfunction addClass(el, cls) {\n  if (el.classList) {\n    el.classList.add(cls);\n  } else {\n    var cur = ' ' + getClass(el) + ' ';\n    if (cur.indexOf(' ' + cls + ' ') < 0) {\n      setClass(el, (cur + cls).trim());\n    }\n  }\n}\n\n/**\n * Remove class with compatibility for IE & SVG\n *\n * @param {Element} el\n * @param {String} cls\n */\n\nfunction removeClass(el, cls) {\n  if (el.classList) {\n    el.classList.remove(cls);\n  } else {\n    var cur = ' ' + getClass(el) + ' ';\n    var tar = ' ' + cls + ' ';\n    while (cur.indexOf(tar) >= 0) {\n      cur = cur.replace(tar, ' ');\n    }\n    setClass(el, cur.trim());\n  }\n  if (!el.className) {\n    el.removeAttribute('class');\n  }\n}\n\n/**\n * Extract raw content inside an element into a temporary\n * container div\n *\n * @param {Element} el\n * @param {Boolean} asFragment\n * @return {Element|DocumentFragment}\n */\n\nfunction extractContent(el, asFragment) {\n  var child;\n  var rawContent;\n  /* istanbul ignore if */\n  if (isTemplate(el) && isFragment(el.content)) {\n    el = el.content;\n  }\n  if (el.hasChildNodes()) {\n    trimNode(el);\n    rawContent = asFragment ? document.createDocumentFragment() : document.createElement('div');\n    /* eslint-disable no-cond-assign */\n    while (child = el.firstChild) {\n      /* eslint-enable no-cond-assign */\n      rawContent.appendChild(child);\n    }\n  }\n  return rawContent;\n}\n\n/**\n * Trim possible empty head/tail text and comment\n * nodes inside a parent.\n *\n * @param {Node} node\n */\n\nfunction trimNode(node) {\n  var child;\n  /* eslint-disable no-sequences */\n  while ((child = node.firstChild, isTrimmable(child))) {\n    node.removeChild(child);\n  }\n  while ((child = node.lastChild, isTrimmable(child))) {\n    node.removeChild(child);\n  }\n  /* eslint-enable no-sequences */\n}\n\nfunction isTrimmable(node) {\n  return node && (node.nodeType === 3 && !node.data.trim() || node.nodeType === 8);\n}\n\n/**\n * Check if an element is a template tag.\n * Note if the template appears inside an SVG its tagName\n * will be in lowercase.\n *\n * @param {Element} el\n */\n\nfunction isTemplate(el) {\n  return el.tagName && el.tagName.toLowerCase() === 'template';\n}\n\n/**\n * Create an \"anchor\" for performing dom insertion/removals.\n * This is used in a number of scenarios:\n * - fragment instance\n * - v-html\n * - v-if\n * - v-for\n * - component\n *\n * @param {String} content\n * @param {Boolean} persist - IE trashes empty textNodes on\n *                            cloneNode(true), so in certain\n *                            cases the anchor needs to be\n *                            non-empty to be persisted in\n *                            templates.\n * @return {Comment|Text}\n */\n\nfunction createAnchor(content, persist) {\n  var anchor = config.debug ? document.createComment(content) : document.createTextNode(persist ? ' ' : '');\n  anchor.__v_anchor = true;\n  return anchor;\n}\n\n/**\n * Find a component ref attribute that starts with $.\n *\n * @param {Element} node\n * @return {String|undefined}\n */\n\nvar refRE = /^v-ref:/;\n\nfunction findRef(node) {\n  if (node.hasAttributes()) {\n    var attrs = node.attributes;\n    for (var i = 0, l = attrs.length; i < l; i++) {\n      var name = attrs[i].name;\n      if (refRE.test(name)) {\n        return camelize(name.replace(refRE, ''));\n      }\n    }\n  }\n}\n\n/**\n * Map a function to a range of nodes .\n *\n * @param {Node} node\n * @param {Node} end\n * @param {Function} op\n */\n\nfunction mapNodeRange(node, end, op) {\n  var next;\n  while (node !== end) {\n    next = node.nextSibling;\n    op(node);\n    node = next;\n  }\n  op(end);\n}\n\n/**\n * Remove a range of nodes with transition, store\n * the nodes in a fragment with correct ordering,\n * and call callback when done.\n *\n * @param {Node} start\n * @param {Node} end\n * @param {Vue} vm\n * @param {DocumentFragment} frag\n * @param {Function} cb\n */\n\nfunction removeNodeRange(start, end, vm, frag, cb) {\n  var done = false;\n  var removed = 0;\n  var nodes = [];\n  mapNodeRange(start, end, function (node) {\n    if (node === end) done = true;\n    nodes.push(node);\n    removeWithTransition(node, vm, onRemoved);\n  });\n  function onRemoved() {\n    removed++;\n    if (done && removed >= nodes.length) {\n      for (var i = 0; i < nodes.length; i++) {\n        frag.appendChild(nodes[i]);\n      }\n      cb && cb();\n    }\n  }\n}\n\n/**\n * Check if a node is a DocumentFragment.\n *\n * @param {Node} node\n * @return {Boolean}\n */\n\nfunction isFragment(node) {\n  return node && node.nodeType === 11;\n}\n\n/**\n * Get outerHTML of elements, taking care\n * of SVG elements in IE as well.\n *\n * @param {Element} el\n * @return {String}\n */\n\nfunction getOuterHTML(el) {\n  if (el.outerHTML) {\n    return el.outerHTML;\n  } else {\n    var container = document.createElement('div');\n    container.appendChild(el.cloneNode(true));\n    return container.innerHTML;\n  }\n}\n\nvar commonTagRE = /^(div|p|span|img|a|b|i|br|ul|ol|li|h1|h2|h3|h4|h5|h6|code|pre|table|th|td|tr|form|label|input|select|option|nav|article|section|header|footer)$/i;\nvar reservedTagRE = /^(slot|partial|component)$/i;\n\nvar isUnknownElement = undefined;\nif (process.env.NODE_ENV !== 'production') {\n  isUnknownElement = function (el, tag) {\n    if (tag.indexOf('-') > -1) {\n      // http://stackoverflow.com/a/28210364/1070244\n      return el.constructor === window.HTMLUnknownElement || el.constructor === window.HTMLElement;\n    } else {\n      return (/HTMLUnknownElement/.test(el.toString()) &&\n        // Chrome returns unknown for several HTML5 elements.\n        // https://code.google.com/p/chromium/issues/detail?id=540526\n        // Firefox returns unknown for some \"Interactive elements.\"\n        !/^(data|time|rtc|rb|details|dialog|summary)$/.test(tag)\n      );\n    }\n  };\n}\n\n/**\n * Check if an element is a component, if yes return its\n * component id.\n *\n * @param {Element} el\n * @param {Object} options\n * @return {Object|undefined}\n */\n\nfunction checkComponentAttr(el, options) {\n  var tag = el.tagName.toLowerCase();\n  var hasAttrs = el.hasAttributes();\n  if (!commonTagRE.test(tag) && !reservedTagRE.test(tag)) {\n    if (resolveAsset(options, 'components', tag)) {\n      return { id: tag };\n    } else {\n      var is = hasAttrs && getIsBinding(el, options);\n      if (is) {\n        return is;\n      } else if (process.env.NODE_ENV !== 'production') {\n        var expectedTag = options._componentNameMap && options._componentNameMap[tag];\n        if (expectedTag) {\n          warn('Unknown custom element: <' + tag + '> - ' + 'did you mean <' + expectedTag + '>? ' + 'HTML is case-insensitive, remember to use kebab-case in templates.');\n        } else if (isUnknownElement(el, tag)) {\n          warn('Unknown custom element: <' + tag + '> - did you ' + 'register the component correctly? For recursive components, ' + 'make sure to provide the \"name\" option.');\n        }\n      }\n    }\n  } else if (hasAttrs) {\n    return getIsBinding(el, options);\n  }\n}\n\n/**\n * Get \"is\" binding from an element.\n *\n * @param {Element} el\n * @param {Object} options\n * @return {Object|undefined}\n */\n\nfunction getIsBinding(el, options) {\n  // dynamic syntax\n  var exp = el.getAttribute('is');\n  if (exp != null) {\n    if (resolveAsset(options, 'components', exp)) {\n      el.removeAttribute('is');\n      return { id: exp };\n    }\n  } else {\n    exp = getBindAttr(el, 'is');\n    if (exp != null) {\n      return { id: exp, dynamic: true };\n    }\n  }\n}\n\n/**\n * Option overwriting strategies are functions that handle\n * how to merge a parent option value and a child option\n * value into the final value.\n *\n * All strategy functions follow the same signature:\n *\n * @param {*} parentVal\n * @param {*} childVal\n * @param {Vue} [vm]\n */\n\nvar strats = config.optionMergeStrategies = Object.create(null);\n\n/**\n * Helper that recursively merges two data objects together.\n */\n\nfunction mergeData(to, from) {\n  var key, toVal, fromVal;\n  for (key in from) {\n    toVal = to[key];\n    fromVal = from[key];\n    if (!hasOwn(to, key)) {\n      set(to, key, fromVal);\n    } else if (isObject(toVal) && isObject(fromVal)) {\n      mergeData(toVal, fromVal);\n    }\n  }\n  return to;\n}\n\n/**\n * Data\n */\n\nstrats.data = function (parentVal, childVal, vm) {\n  if (!vm) {\n    // in a Vue.extend merge, both should be functions\n    if (!childVal) {\n      return parentVal;\n    }\n    if (typeof childVal !== 'function') {\n      process.env.NODE_ENV !== 'production' && warn('The \"data\" option should be a function ' + 'that returns a per-instance value in component ' + 'definitions.', vm);\n      return parentVal;\n    }\n    if (!parentVal) {\n      return childVal;\n    }\n    // when parentVal & childVal are both present,\n    // we need to return a function that returns the\n    // merged result of both functions... no need to\n    // check if parentVal is a function here because\n    // it has to be a function to pass previous merges.\n    return function mergedDataFn() {\n      return mergeData(childVal.call(this), parentVal.call(this));\n    };\n  } else if (parentVal || childVal) {\n    return function mergedInstanceDataFn() {\n      // instance merge\n      var instanceData = typeof childVal === 'function' ? childVal.call(vm) : childVal;\n      var defaultData = typeof parentVal === 'function' ? parentVal.call(vm) : undefined;\n      if (instanceData) {\n        return mergeData(instanceData, defaultData);\n      } else {\n        return defaultData;\n      }\n    };\n  }\n};\n\n/**\n * El\n */\n\nstrats.el = function (parentVal, childVal, vm) {\n  if (!vm && childVal && typeof childVal !== 'function') {\n    process.env.NODE_ENV !== 'production' && warn('The \"el\" option should be a function ' + 'that returns a per-instance value in component ' + 'definitions.', vm);\n    return;\n  }\n  var ret = childVal || parentVal;\n  // invoke the element factory if this is instance merge\n  return vm && typeof ret === 'function' ? ret.call(vm) : ret;\n};\n\n/**\n * Hooks and param attributes are merged as arrays.\n */\n\nstrats.init = strats.created = strats.ready = strats.attached = strats.detached = strats.beforeCompile = strats.compiled = strats.beforeDestroy = strats.destroyed = strats.activate = function (parentVal, childVal) {\n  return childVal ? parentVal ? parentVal.concat(childVal) : isArray(childVal) ? childVal : [childVal] : parentVal;\n};\n\n/**\n * Assets\n *\n * When a vm is present (instance creation), we need to do\n * a three-way merge between constructor options, instance\n * options and parent options.\n */\n\nfunction mergeAssets(parentVal, childVal) {\n  var res = Object.create(parentVal || null);\n  return childVal ? extend(res, guardArrayAssets(childVal)) : res;\n}\n\nconfig._assetTypes.forEach(function (type) {\n  strats[type + 's'] = mergeAssets;\n});\n\n/**\n * Events & Watchers.\n *\n * Events & watchers hashes should not overwrite one\n * another, so we merge them as arrays.\n */\n\nstrats.watch = strats.events = function (parentVal, childVal) {\n  if (!childVal) return parentVal;\n  if (!parentVal) return childVal;\n  var ret = {};\n  extend(ret, parentVal);\n  for (var key in childVal) {\n    var parent = ret[key];\n    var child = childVal[key];\n    if (parent && !isArray(parent)) {\n      parent = [parent];\n    }\n    ret[key] = parent ? parent.concat(child) : [child];\n  }\n  return ret;\n};\n\n/**\n * Other object hashes.\n */\n\nstrats.props = strats.methods = strats.computed = function (parentVal, childVal) {\n  if (!childVal) return parentVal;\n  if (!parentVal) return childVal;\n  var ret = Object.create(null);\n  extend(ret, parentVal);\n  extend(ret, childVal);\n  return ret;\n};\n\n/**\n * Default strategy.\n */\n\nvar defaultStrat = function defaultStrat(parentVal, childVal) {\n  return childVal === undefined ? parentVal : childVal;\n};\n\n/**\n * Make sure component options get converted to actual\n * constructors.\n *\n * @param {Object} options\n */\n\nfunction guardComponents(options) {\n  if (options.components) {\n    var components = options.components = guardArrayAssets(options.components);\n    var ids = Object.keys(components);\n    var def;\n    if (process.env.NODE_ENV !== 'production') {\n      var map = options._componentNameMap = {};\n    }\n    for (var i = 0, l = ids.length; i < l; i++) {\n      var key = ids[i];\n      if (commonTagRE.test(key) || reservedTagRE.test(key)) {\n        process.env.NODE_ENV !== 'production' && warn('Do not use built-in or reserved HTML elements as component ' + 'id: ' + key);\n        continue;\n      }\n      // record a all lowercase <-> kebab-case mapping for\n      // possible custom element case error warning\n      if (process.env.NODE_ENV !== 'production') {\n        map[key.replace(/-/g, '').toLowerCase()] = hyphenate(key);\n      }\n      def = components[key];\n      if (isPlainObject(def)) {\n        components[key] = Vue.extend(def);\n      }\n    }\n  }\n}\n\n/**\n * Ensure all props option syntax are normalized into the\n * Object-based format.\n *\n * @param {Object} options\n */\n\nfunction guardProps(options) {\n  var props = options.props;\n  var i, val;\n  if (isArray(props)) {\n    options.props = {};\n    i = props.length;\n    while (i--) {\n      val = props[i];\n      if (typeof val === 'string') {\n        options.props[val] = null;\n      } else if (val.name) {\n        options.props[val.name] = val;\n      }\n    }\n  } else if (isPlainObject(props)) {\n    var keys = Object.keys(props);\n    i = keys.length;\n    while (i--) {\n      val = props[keys[i]];\n      if (typeof val === 'function') {\n        props[keys[i]] = { type: val };\n      }\n    }\n  }\n}\n\n/**\n * Guard an Array-format assets option and converted it\n * into the key-value Object format.\n *\n * @param {Object|Array} assets\n * @return {Object}\n */\n\nfunction guardArrayAssets(assets) {\n  if (isArray(assets)) {\n    var res = {};\n    var i = assets.length;\n    var asset;\n    while (i--) {\n      asset = assets[i];\n      var id = typeof asset === 'function' ? asset.options && asset.options.name || asset.id : asset.name || asset.id;\n      if (!id) {\n        process.env.NODE_ENV !== 'production' && warn('Array-syntax assets must provide a \"name\" or \"id\" field.');\n      } else {\n        res[id] = asset;\n      }\n    }\n    return res;\n  }\n  return assets;\n}\n\n/**\n * Merge two option objects into a new one.\n * Core utility used in both instantiation and inheritance.\n *\n * @param {Object} parent\n * @param {Object} child\n * @param {Vue} [vm] - if vm is present, indicates this is\n *                     an instantiation merge.\n */\n\nfunction mergeOptions(parent, child, vm) {\n  guardComponents(child);\n  guardProps(child);\n  if (process.env.NODE_ENV !== 'production') {\n    if (child.propsData && !vm) {\n      warn('propsData can only be used as an instantiation option.');\n    }\n  }\n  var options = {};\n  var key;\n  if (child['extends']) {\n    parent = typeof child['extends'] === 'function' ? mergeOptions(parent, child['extends'].options, vm) : mergeOptions(parent, child['extends'], vm);\n  }\n  if (child.mixins) {\n    for (var i = 0, l = child.mixins.length; i < l; i++) {\n      var mixin = child.mixins[i];\n      var mixinOptions = mixin.prototype instanceof Vue ? mixin.options : mixin;\n      parent = mergeOptions(parent, mixinOptions, vm);\n    }\n  }\n  for (key in parent) {\n    mergeField(key);\n  }\n  for (key in child) {\n    if (!hasOwn(parent, key)) {\n      mergeField(key);\n    }\n  }\n  function mergeField(key) {\n    var strat = strats[key] || defaultStrat;\n    options[key] = strat(parent[key], child[key], vm, key);\n  }\n  return options;\n}\n\n/**\n * Resolve an asset.\n * This function is used because child instances need access\n * to assets defined in its ancestor chain.\n *\n * @param {Object} options\n * @param {String} type\n * @param {String} id\n * @param {Boolean} warnMissing\n * @return {Object|Function}\n */\n\nfunction resolveAsset(options, type, id, warnMissing) {\n  /* istanbul ignore if */\n  if (typeof id !== 'string') {\n    return;\n  }\n  var assets = options[type];\n  var camelizedId;\n  var res = assets[id] ||\n  // camelCase ID\n  assets[camelizedId = camelize(id)] ||\n  // Pascal Case ID\n  assets[camelizedId.charAt(0).toUpperCase() + camelizedId.slice(1)];\n  if (process.env.NODE_ENV !== 'production' && warnMissing && !res) {\n    warn('Failed to resolve ' + type.slice(0, -1) + ': ' + id, options);\n  }\n  return res;\n}\n\nvar uid$1 = 0;\n\n/**\n * A dep is an observable that can have multiple\n * directives subscribing to it.\n *\n * @constructor\n */\nfunction Dep() {\n  this.id = uid$1++;\n  this.subs = [];\n}\n\n// the current target watcher being evaluated.\n// this is globally unique because there could be only one\n// watcher being evaluated at any time.\nDep.target = null;\n\n/**\n * Add a directive subscriber.\n *\n * @param {Directive} sub\n */\n\nDep.prototype.addSub = function (sub) {\n  this.subs.push(sub);\n};\n\n/**\n * Remove a directive subscriber.\n *\n * @param {Directive} sub\n */\n\nDep.prototype.removeSub = function (sub) {\n  this.subs.$remove(sub);\n};\n\n/**\n * Add self as a dependency to the target watcher.\n */\n\nDep.prototype.depend = function () {\n  Dep.target.addDep(this);\n};\n\n/**\n * Notify all subscribers of a new value.\n */\n\nDep.prototype.notify = function () {\n  // stablize the subscriber list first\n  var subs = toArray(this.subs);\n  for (var i = 0, l = subs.length; i < l; i++) {\n    subs[i].update();\n  }\n};\n\nvar arrayProto = Array.prototype;\nvar arrayMethods = Object.create(arrayProto)\n\n/**\n * Intercept mutating methods and emit events\n */\n\n;['push', 'pop', 'shift', 'unshift', 'splice', 'sort', 'reverse'].forEach(function (method) {\n  // cache original method\n  var original = arrayProto[method];\n  def(arrayMethods, method, function mutator() {\n    // avoid leaking arguments:\n    // http://jsperf.com/closure-with-arguments\n    var i = arguments.length;\n    var args = new Array(i);\n    while (i--) {\n      args[i] = arguments[i];\n    }\n    var result = original.apply(this, args);\n    var ob = this.__ob__;\n    var inserted;\n    switch (method) {\n      case 'push':\n        inserted = args;\n        break;\n      case 'unshift':\n        inserted = args;\n        break;\n      case 'splice':\n        inserted = args.slice(2);\n        break;\n    }\n    if (inserted) ob.observeArray(inserted);\n    // notify change\n    ob.dep.notify();\n    return result;\n  });\n});\n\n/**\n * Swap the element at the given index with a new value\n * and emits corresponding event.\n *\n * @param {Number} index\n * @param {*} val\n * @return {*} - replaced element\n */\n\ndef(arrayProto, '$set', function $set(index, val) {\n  if (index >= this.length) {\n    this.length = Number(index) + 1;\n  }\n  return this.splice(index, 1, val)[0];\n});\n\n/**\n * Convenience method to remove the element at given index or target element reference.\n *\n * @param {*} item\n */\n\ndef(arrayProto, '$remove', function $remove(item) {\n  /* istanbul ignore if */\n  if (!this.length) return;\n  var index = indexOf(this, item);\n  if (index > -1) {\n    return this.splice(index, 1);\n  }\n});\n\nvar arrayKeys = Object.getOwnPropertyNames(arrayMethods);\n\n/**\n * By default, when a reactive property is set, the new value is\n * also converted to become reactive. However in certain cases, e.g.\n * v-for scope alias and props, we don't want to force conversion\n * because the value may be a nested value under a frozen data structure.\n *\n * So whenever we want to set a reactive property without forcing\n * conversion on the new value, we wrap that call inside this function.\n */\n\nvar shouldConvert = true;\n\nfunction withoutConversion(fn) {\n  shouldConvert = false;\n  fn();\n  shouldConvert = true;\n}\n\n/**\n * Observer class that are attached to each observed\n * object. Once attached, the observer converts target\n * object's property keys into getter/setters that\n * collect dependencies and dispatches updates.\n *\n * @param {Array|Object} value\n * @constructor\n */\n\nfunction Observer(value) {\n  this.value = value;\n  this.dep = new Dep();\n  def(value, '__ob__', this);\n  if (isArray(value)) {\n    var augment = hasProto ? protoAugment : copyAugment;\n    augment(value, arrayMethods, arrayKeys);\n    this.observeArray(value);\n  } else {\n    this.walk(value);\n  }\n}\n\n// Instance methods\n\n/**\n * Walk through each property and convert them into\n * getter/setters. This method should only be called when\n * value type is Object.\n *\n * @param {Object} obj\n */\n\nObserver.prototype.walk = function (obj) {\n  var keys = Object.keys(obj);\n  for (var i = 0, l = keys.length; i < l; i++) {\n    this.convert(keys[i], obj[keys[i]]);\n  }\n};\n\n/**\n * Observe a list of Array items.\n *\n * @param {Array} items\n */\n\nObserver.prototype.observeArray = function (items) {\n  for (var i = 0, l = items.length; i < l; i++) {\n    observe(items[i]);\n  }\n};\n\n/**\n * Convert a property into getter/setter so we can emit\n * the events when the property is accessed/changed.\n *\n * @param {String} key\n * @param {*} val\n */\n\nObserver.prototype.convert = function (key, val) {\n  defineReactive(this.value, key, val);\n};\n\n/**\n * Add an owner vm, so that when $set/$delete mutations\n * happen we can notify owner vms to proxy the keys and\n * digest the watchers. This is only called when the object\n * is observed as an instance's root $data.\n *\n * @param {Vue} vm\n */\n\nObserver.prototype.addVm = function (vm) {\n  (this.vms || (this.vms = [])).push(vm);\n};\n\n/**\n * Remove an owner vm. This is called when the object is\n * swapped out as an instance's $data object.\n *\n * @param {Vue} vm\n */\n\nObserver.prototype.removeVm = function (vm) {\n  this.vms.$remove(vm);\n};\n\n// helpers\n\n/**\n * Augment an target Object or Array by intercepting\n * the prototype chain using __proto__\n *\n * @param {Object|Array} target\n * @param {Object} src\n */\n\nfunction protoAugment(target, src) {\n  /* eslint-disable no-proto */\n  target.__proto__ = src;\n  /* eslint-enable no-proto */\n}\n\n/**\n * Augment an target Object or Array by defining\n * hidden properties.\n *\n * @param {Object|Array} target\n * @param {Object} proto\n */\n\nfunction copyAugment(target, src, keys) {\n  for (var i = 0, l = keys.length; i < l; i++) {\n    var key = keys[i];\n    def(target, key, src[key]);\n  }\n}\n\n/**\n * Attempt to create an observer instance for a value,\n * returns the new observer if successfully observed,\n * or the existing observer if the value already has one.\n *\n * @param {*} value\n * @param {Vue} [vm]\n * @return {Observer|undefined}\n * @static\n */\n\nfunction observe(value, vm) {\n  if (!value || typeof value !== 'object') {\n    return;\n  }\n  var ob;\n  if (hasOwn(value, '__ob__') && value.__ob__ instanceof Observer) {\n    ob = value.__ob__;\n  } else if (shouldConvert && (isArray(value) || isPlainObject(value)) && Object.isExtensible(value) && !value._isVue) {\n    ob = new Observer(value);\n  }\n  if (ob && vm) {\n    ob.addVm(vm);\n  }\n  return ob;\n}\n\n/**\n * Define a reactive property on an Object.\n *\n * @param {Object} obj\n * @param {String} key\n * @param {*} val\n */\n\nfunction defineReactive(obj, key, val) {\n  var dep = new Dep();\n\n  var property = Object.getOwnPropertyDescriptor(obj, key);\n  if (property && property.configurable === false) {\n    return;\n  }\n\n  // cater for pre-defined getter/setters\n  var getter = property && property.get;\n  var setter = property && property.set;\n\n  var childOb = observe(val);\n  Object.defineProperty(obj, key, {\n    enumerable: true,\n    configurable: true,\n    get: function reactiveGetter() {\n      var value = getter ? getter.call(obj) : val;\n      if (Dep.target) {\n        dep.depend();\n        if (childOb) {\n          childOb.dep.depend();\n        }\n        if (isArray(value)) {\n          for (var e, i = 0, l = value.length; i < l; i++) {\n            e = value[i];\n            e && e.__ob__ && e.__ob__.dep.depend();\n          }\n        }\n      }\n      return value;\n    },\n    set: function reactiveSetter(newVal) {\n      var value = getter ? getter.call(obj) : val;\n      if (newVal === value) {\n        return;\n      }\n      if (setter) {\n        setter.call(obj, newVal);\n      } else {\n        val = newVal;\n      }\n      childOb = observe(newVal);\n      dep.notify();\n    }\n  });\n}\n\n\n\nvar util = Object.freeze({\n\tdefineReactive: defineReactive,\n\tset: set,\n\tdel: del,\n\thasOwn: hasOwn,\n\tisLiteral: isLiteral,\n\tisReserved: isReserved,\n\t_toString: _toString,\n\ttoNumber: toNumber,\n\ttoBoolean: toBoolean,\n\tstripQuotes: stripQuotes,\n\tcamelize: camelize,\n\thyphenate: hyphenate,\n\tclassify: classify,\n\tbind: bind,\n\ttoArray: toArray,\n\textend: extend,\n\tisObject: isObject,\n\tisPlainObject: isPlainObject,\n\tdef: def,\n\tdebounce: _debounce,\n\tindexOf: indexOf,\n\tcancellable: cancellable,\n\tlooseEqual: looseEqual,\n\tisArray: isArray,\n\thasProto: hasProto,\n\tinBrowser: inBrowser,\n\tdevtools: devtools,\n\tisIE: isIE,\n\tisIE9: isIE9,\n\tisAndroid: isAndroid,\n\tisIOS: isIOS,\n\tget transitionProp () { return transitionProp; },\n\tget transitionEndEvent () { return transitionEndEvent; },\n\tget animationProp () { return animationProp; },\n\tget animationEndEvent () { return animationEndEvent; },\n\tnextTick: nextTick,\n\tget _Set () { return _Set; },\n\tquery: query,\n\tinDoc: inDoc,\n\tgetAttr: getAttr,\n\tgetBindAttr: getBindAttr,\n\thasBindAttr: hasBindAttr,\n\tbefore: before,\n\tafter: after,\n\tremove: remove,\n\tprepend: prepend,\n\treplace: replace,\n\ton: on,\n\toff: off,\n\tsetClass: setClass,\n\taddClass: addClass,\n\tremoveClass: removeClass,\n\textractContent: extractContent,\n\ttrimNode: trimNode,\n\tisTemplate: isTemplate,\n\tcreateAnchor: createAnchor,\n\tfindRef: findRef,\n\tmapNodeRange: mapNodeRange,\n\tremoveNodeRange: removeNodeRange,\n\tisFragment: isFragment,\n\tgetOuterHTML: getOuterHTML,\n\tmergeOptions: mergeOptions,\n\tresolveAsset: resolveAsset,\n\tcheckComponentAttr: checkComponentAttr,\n\tcommonTagRE: commonTagRE,\n\treservedTagRE: reservedTagRE,\n\tget warn () { return warn; }\n});\n\nvar uid = 0;\n\nfunction initMixin (Vue) {\n  /**\n   * The main init sequence. This is called for every\n   * instance, including ones that are created from extended\n   * constructors.\n   *\n   * @param {Object} options - this options object should be\n   *                           the result of merging class\n   *                           options and the options passed\n   *                           in to the constructor.\n   */\n\n  Vue.prototype._init = function (options) {\n    options = options || {};\n\n    this.$el = null;\n    this.$parent = options.parent;\n    this.$root = this.$parent ? this.$parent.$root : this;\n    this.$children = [];\n    this.$refs = {}; // child vm references\n    this.$els = {}; // element references\n    this._watchers = []; // all watchers as an array\n    this._directives = []; // all directives\n\n    // a uid\n    this._uid = uid++;\n\n    // a flag to avoid this being observed\n    this._isVue = true;\n\n    // events bookkeeping\n    this._events = {}; // registered callbacks\n    this._eventsCount = {}; // for $broadcast optimization\n\n    // fragment instance properties\n    this._isFragment = false;\n    this._fragment = // @type {DocumentFragment}\n    this._fragmentStart = // @type {Text|Comment}\n    this._fragmentEnd = null; // @type {Text|Comment}\n\n    // lifecycle state\n    this._isCompiled = this._isDestroyed = this._isReady = this._isAttached = this._isBeingDestroyed = this._vForRemoving = false;\n    this._unlinkFn = null;\n\n    // context:\n    // if this is a transcluded component, context\n    // will be the common parent vm of this instance\n    // and its host.\n    this._context = options._context || this.$parent;\n\n    // scope:\n    // if this is inside an inline v-for, the scope\n    // will be the intermediate scope created for this\n    // repeat fragment. this is used for linking props\n    // and container directives.\n    this._scope = options._scope;\n\n    // fragment:\n    // if this instance is compiled inside a Fragment, it\n    // needs to register itself as a child of that fragment\n    // for attach/detach to work properly.\n    this._frag = options._frag;\n    if (this._frag) {\n      this._frag.children.push(this);\n    }\n\n    // push self into parent / transclusion host\n    if (this.$parent) {\n      this.$parent.$children.push(this);\n    }\n\n    // merge options.\n    options = this.$options = mergeOptions(this.constructor.options, options, this);\n\n    // set ref\n    this._updateRef();\n\n    // initialize data as empty object.\n    // it will be filled up in _initData().\n    this._data = {};\n\n    // call init hook\n    this._callHook('init');\n\n    // initialize data observation and scope inheritance.\n    this._initState();\n\n    // setup event system and option events.\n    this._initEvents();\n\n    // call created hook\n    this._callHook('created');\n\n    // if `el` option is passed, start compilation.\n    if (options.el) {\n      this.$mount(options.el);\n    }\n  };\n}\n\nvar pathCache = new Cache(1000);\n\n// actions\nvar APPEND = 0;\nvar PUSH = 1;\nvar INC_SUB_PATH_DEPTH = 2;\nvar PUSH_SUB_PATH = 3;\n\n// states\nvar BEFORE_PATH = 0;\nvar IN_PATH = 1;\nvar BEFORE_IDENT = 2;\nvar IN_IDENT = 3;\nvar IN_SUB_PATH = 4;\nvar IN_SINGLE_QUOTE = 5;\nvar IN_DOUBLE_QUOTE = 6;\nvar AFTER_PATH = 7;\nvar ERROR = 8;\n\nvar pathStateMachine = [];\n\npathStateMachine[BEFORE_PATH] = {\n  'ws': [BEFORE_PATH],\n  'ident': [IN_IDENT, APPEND],\n  '[': [IN_SUB_PATH],\n  'eof': [AFTER_PATH]\n};\n\npathStateMachine[IN_PATH] = {\n  'ws': [IN_PATH],\n  '.': [BEFORE_IDENT],\n  '[': [IN_SUB_PATH],\n  'eof': [AFTER_PATH]\n};\n\npathStateMachine[BEFORE_IDENT] = {\n  'ws': [BEFORE_IDENT],\n  'ident': [IN_IDENT, APPEND]\n};\n\npathStateMachine[IN_IDENT] = {\n  'ident': [IN_IDENT, APPEND],\n  '0': [IN_IDENT, APPEND],\n  'number': [IN_IDENT, APPEND],\n  'ws': [IN_PATH, PUSH],\n  '.': [BEFORE_IDENT, PUSH],\n  '[': [IN_SUB_PATH, PUSH],\n  'eof': [AFTER_PATH, PUSH]\n};\n\npathStateMachine[IN_SUB_PATH] = {\n  \"'\": [IN_SINGLE_QUOTE, APPEND],\n  '\"': [IN_DOUBLE_QUOTE, APPEND],\n  '[': [IN_SUB_PATH, INC_SUB_PATH_DEPTH],\n  ']': [IN_PATH, PUSH_SUB_PATH],\n  'eof': ERROR,\n  'else': [IN_SUB_PATH, APPEND]\n};\n\npathStateMachine[IN_SINGLE_QUOTE] = {\n  \"'\": [IN_SUB_PATH, APPEND],\n  'eof': ERROR,\n  'else': [IN_SINGLE_QUOTE, APPEND]\n};\n\npathStateMachine[IN_DOUBLE_QUOTE] = {\n  '\"': [IN_SUB_PATH, APPEND],\n  'eof': ERROR,\n  'else': [IN_DOUBLE_QUOTE, APPEND]\n};\n\n/**\n * Determine the type of a character in a keypath.\n *\n * @param {Char} ch\n * @return {String} type\n */\n\nfunction getPathCharType(ch) {\n  if (ch === undefined) {\n    return 'eof';\n  }\n\n  var code = ch.charCodeAt(0);\n\n  switch (code) {\n    case 0x5B: // [\n    case 0x5D: // ]\n    case 0x2E: // .\n    case 0x22: // \"\n    case 0x27: // '\n    case 0x30:\n      // 0\n      return ch;\n\n    case 0x5F: // _\n    case 0x24:\n      // $\n      return 'ident';\n\n    case 0x20: // Space\n    case 0x09: // Tab\n    case 0x0A: // Newline\n    case 0x0D: // Return\n    case 0xA0: // No-break space\n    case 0xFEFF: // Byte Order Mark\n    case 0x2028: // Line Separator\n    case 0x2029:\n      // Paragraph Separator\n      return 'ws';\n  }\n\n  // a-z, A-Z\n  if (code >= 0x61 && code <= 0x7A || code >= 0x41 && code <= 0x5A) {\n    return 'ident';\n  }\n\n  // 1-9\n  if (code >= 0x31 && code <= 0x39) {\n    return 'number';\n  }\n\n  return 'else';\n}\n\n/**\n * Format a subPath, return its plain form if it is\n * a literal string or number. Otherwise prepend the\n * dynamic indicator (*).\n *\n * @param {String} path\n * @return {String}\n */\n\nfunction formatSubPath(path) {\n  var trimmed = path.trim();\n  // invalid leading 0\n  if (path.charAt(0) === '0' && isNaN(path)) {\n    return false;\n  }\n  return isLiteral(trimmed) ? stripQuotes(trimmed) : '*' + trimmed;\n}\n\n/**\n * Parse a string path into an array of segments\n *\n * @param {String} path\n * @return {Array|undefined}\n */\n\nfunction parse(path) {\n  var keys = [];\n  var index = -1;\n  var mode = BEFORE_PATH;\n  var subPathDepth = 0;\n  var c, newChar, key, type, transition, action, typeMap;\n\n  var actions = [];\n\n  actions[PUSH] = function () {\n    if (key !== undefined) {\n      keys.push(key);\n      key = undefined;\n    }\n  };\n\n  actions[APPEND] = function () {\n    if (key === undefined) {\n      key = newChar;\n    } else {\n      key += newChar;\n    }\n  };\n\n  actions[INC_SUB_PATH_DEPTH] = function () {\n    actions[APPEND]();\n    subPathDepth++;\n  };\n\n  actions[PUSH_SUB_PATH] = function () {\n    if (subPathDepth > 0) {\n      subPathDepth--;\n      mode = IN_SUB_PATH;\n      actions[APPEND]();\n    } else {\n      subPathDepth = 0;\n      key = formatSubPath(key);\n      if (key === false) {\n        return false;\n      } else {\n        actions[PUSH]();\n      }\n    }\n  };\n\n  function maybeUnescapeQuote() {\n    var nextChar = path[index + 1];\n    if (mode === IN_SINGLE_QUOTE && nextChar === \"'\" || mode === IN_DOUBLE_QUOTE && nextChar === '\"') {\n      index++;\n      newChar = '\\\\' + nextChar;\n      actions[APPEND]();\n      return true;\n    }\n  }\n\n  while (mode != null) {\n    index++;\n    c = path[index];\n\n    if (c === '\\\\' && maybeUnescapeQuote()) {\n      continue;\n    }\n\n    type = getPathCharType(c);\n    typeMap = pathStateMachine[mode];\n    transition = typeMap[type] || typeMap['else'] || ERROR;\n\n    if (transition === ERROR) {\n      return; // parse error\n    }\n\n    mode = transition[0];\n    action = actions[transition[1]];\n    if (action) {\n      newChar = transition[2];\n      newChar = newChar === undefined ? c : newChar;\n      if (action() === false) {\n        return;\n      }\n    }\n\n    if (mode === AFTER_PATH) {\n      keys.raw = path;\n      return keys;\n    }\n  }\n}\n\n/**\n * External parse that check for a cache hit first\n *\n * @param {String} path\n * @return {Array|undefined}\n */\n\nfunction parsePath(path) {\n  var hit = pathCache.get(path);\n  if (!hit) {\n    hit = parse(path);\n    if (hit) {\n      pathCache.put(path, hit);\n    }\n  }\n  return hit;\n}\n\n/**\n * Get from an object from a path string\n *\n * @param {Object} obj\n * @param {String} path\n */\n\nfunction getPath(obj, path) {\n  return parseExpression$1(path).get(obj);\n}\n\n/**\n * Warn against setting non-existent root path on a vm.\n */\n\nvar warnNonExistent;\nif (process.env.NODE_ENV !== 'production') {\n  warnNonExistent = function (path, vm) {\n    warn('You are setting a non-existent path \"' + path.raw + '\" ' + 'on a vm instance. Consider pre-initializing the property ' + 'with the \"data\" option for more reliable reactivity ' + 'and better performance.', vm);\n  };\n}\n\n/**\n * Set on an object from a path\n *\n * @param {Object} obj\n * @param {String | Array} path\n * @param {*} val\n */\n\nfunction setPath(obj, path, val) {\n  var original = obj;\n  if (typeof path === 'string') {\n    path = parse(path);\n  }\n  if (!path || !isObject(obj)) {\n    return false;\n  }\n  var last, key;\n  for (var i = 0, l = path.length; i < l; i++) {\n    last = obj;\n    key = path[i];\n    if (key.charAt(0) === '*') {\n      key = parseExpression$1(key.slice(1)).get.call(original, original);\n    }\n    if (i < l - 1) {\n      obj = obj[key];\n      if (!isObject(obj)) {\n        obj = {};\n        if (process.env.NODE_ENV !== 'production' && last._isVue) {\n          warnNonExistent(path, last);\n        }\n        set(last, key, obj);\n      }\n    } else {\n      if (isArray(obj)) {\n        obj.$set(key, val);\n      } else if (key in obj) {\n        obj[key] = val;\n      } else {\n        if (process.env.NODE_ENV !== 'production' && obj._isVue) {\n          warnNonExistent(path, obj);\n        }\n        set(obj, key, val);\n      }\n    }\n  }\n  return true;\n}\n\nvar path = Object.freeze({\n  parsePath: parsePath,\n  getPath: getPath,\n  setPath: setPath\n});\n\nvar expressionCache = new Cache(1000);\n\nvar allowedKeywords = 'Math,Date,this,true,false,null,undefined,Infinity,NaN,' + 'isNaN,isFinite,decodeURI,decodeURIComponent,encodeURI,' + 'encodeURIComponent,parseInt,parseFloat';\nvar allowedKeywordsRE = new RegExp('^(' + allowedKeywords.replace(/,/g, '\\\\b|') + '\\\\b)');\n\n// keywords that don't make sense inside expressions\nvar improperKeywords = 'break,case,class,catch,const,continue,debugger,default,' + 'delete,do,else,export,extends,finally,for,function,if,' + 'import,in,instanceof,let,return,super,switch,throw,try,' + 'var,while,with,yield,enum,await,implements,package,' + 'protected,static,interface,private,public';\nvar improperKeywordsRE = new RegExp('^(' + improperKeywords.replace(/,/g, '\\\\b|') + '\\\\b)');\n\nvar wsRE = /\\s/g;\nvar newlineRE = /\\n/g;\nvar saveRE = /[\\{,]\\s*[\\w\\$_]+\\s*:|('(?:[^'\\\\]|\\\\.)*'|\"(?:[^\"\\\\]|\\\\.)*\"|`(?:[^`\\\\]|\\\\.)*\\$\\{|\\}(?:[^`\\\\\"']|\\\\.)*`|`(?:[^`\\\\]|\\\\.)*`)|new |typeof |void /g;\nvar restoreRE = /\"(\\d+)\"/g;\nvar pathTestRE = /^[A-Za-z_$][\\w$]*(?:\\.[A-Za-z_$][\\w$]*|\\['.*?'\\]|\\[\".*?\"\\]|\\[\\d+\\]|\\[[A-Za-z_$][\\w$]*\\])*$/;\nvar identRE = /[^\\w$\\.](?:[A-Za-z_$][\\w$]*)/g;\nvar literalValueRE$1 = /^(?:true|false|null|undefined|Infinity|NaN)$/;\n\nfunction noop() {}\n\n/**\n * Save / Rewrite / Restore\n *\n * When rewriting paths found in an expression, it is\n * possible for the same letter sequences to be found in\n * strings and Object literal property keys. Therefore we\n * remove and store these parts in a temporary array, and\n * restore them after the path rewrite.\n */\n\nvar saved = [];\n\n/**\n * Save replacer\n *\n * The save regex can match two possible cases:\n * 1. An opening object literal\n * 2. A string\n * If matched as a plain string, we need to escape its\n * newlines, since the string needs to be preserved when\n * generating the function body.\n *\n * @param {String} str\n * @param {String} isString - str if matched as a string\n * @return {String} - placeholder with index\n */\n\nfunction save(str, isString) {\n  var i = saved.length;\n  saved[i] = isString ? str.replace(newlineRE, '\\\\n') : str;\n  return '\"' + i + '\"';\n}\n\n/**\n * Path rewrite replacer\n *\n * @param {String} raw\n * @return {String}\n */\n\nfunction rewrite(raw) {\n  var c = raw.charAt(0);\n  var path = raw.slice(1);\n  if (allowedKeywordsRE.test(path)) {\n    return raw;\n  } else {\n    path = path.indexOf('\"') > -1 ? path.replace(restoreRE, restore) : path;\n    return c + 'scope.' + path;\n  }\n}\n\n/**\n * Restore replacer\n *\n * @param {String} str\n * @param {String} i - matched save index\n * @return {String}\n */\n\nfunction restore(str, i) {\n  return saved[i];\n}\n\n/**\n * Rewrite an expression, prefixing all path accessors with\n * `scope.` and generate getter/setter functions.\n *\n * @param {String} exp\n * @return {Function}\n */\n\nfunction compileGetter(exp) {\n  if (improperKeywordsRE.test(exp)) {\n    process.env.NODE_ENV !== 'production' && warn('Avoid using reserved keywords in expression: ' + exp);\n  }\n  // reset state\n  saved.length = 0;\n  // save strings and object literal keys\n  var body = exp.replace(saveRE, save).replace(wsRE, '');\n  // rewrite all paths\n  // pad 1 space here because the regex matches 1 extra char\n  body = (' ' + body).replace(identRE, rewrite).replace(restoreRE, restore);\n  return makeGetterFn(body);\n}\n\n/**\n * Build a getter function. Requires eval.\n *\n * We isolate the try/catch so it doesn't affect the\n * optimization of the parse function when it is not called.\n *\n * @param {String} body\n * @return {Function|undefined}\n */\n\nfunction makeGetterFn(body) {\n  try {\n    /* eslint-disable no-new-func */\n    return new Function('scope', 'return ' + body + ';');\n    /* eslint-enable no-new-func */\n  } catch (e) {\n    if (process.env.NODE_ENV !== 'production') {\n      /* istanbul ignore if */\n      if (e.toString().match(/unsafe-eval|CSP/)) {\n        warn('It seems you are using the default build of Vue.js in an environment ' + 'with Content Security Policy that prohibits unsafe-eval. ' + 'Use the CSP-compliant build instead: ' + 'http://vuejs.org/guide/installation.html#CSP-compliant-build');\n      } else {\n        warn('Invalid expression. ' + 'Generated function body: ' + body);\n      }\n    }\n    return noop;\n  }\n}\n\n/**\n * Compile a setter function for the expression.\n *\n * @param {String} exp\n * @return {Function|undefined}\n */\n\nfunction compileSetter(exp) {\n  var path = parsePath(exp);\n  if (path) {\n    return function (scope, val) {\n      setPath(scope, path, val);\n    };\n  } else {\n    process.env.NODE_ENV !== 'production' && warn('Invalid setter expression: ' + exp);\n  }\n}\n\n/**\n * Parse an expression into re-written getter/setters.\n *\n * @param {String} exp\n * @param {Boolean} needSet\n * @return {Function}\n */\n\nfunction parseExpression$1(exp, needSet) {\n  exp = exp.trim();\n  // try cache\n  var hit = expressionCache.get(exp);\n  if (hit) {\n    if (needSet && !hit.set) {\n      hit.set = compileSetter(hit.exp);\n    }\n    return hit;\n  }\n  var res = { exp: exp };\n  res.get = isSimplePath(exp) && exp.indexOf('[') < 0\n  // optimized super simple getter\n  ? makeGetterFn('scope.' + exp)\n  // dynamic getter\n  : compileGetter(exp);\n  if (needSet) {\n    res.set = compileSetter(exp);\n  }\n  expressionCache.put(exp, res);\n  return res;\n}\n\n/**\n * Check if an expression is a simple path.\n *\n * @param {String} exp\n * @return {Boolean}\n */\n\nfunction isSimplePath(exp) {\n  return pathTestRE.test(exp) &&\n  // don't treat literal values as paths\n  !literalValueRE$1.test(exp) &&\n  // Math constants e.g. Math.PI, Math.E etc.\n  exp.slice(0, 5) !== 'Math.';\n}\n\nvar expression = Object.freeze({\n  parseExpression: parseExpression$1,\n  isSimplePath: isSimplePath\n});\n\n// we have two separate queues: one for directive updates\n// and one for user watcher registered via $watch().\n// we want to guarantee directive updates to be called\n// before user watchers so that when user watchers are\n// triggered, the DOM would have already been in updated\n// state.\n\nvar queue = [];\nvar userQueue = [];\nvar has = {};\nvar circular = {};\nvar waiting = false;\n\n/**\n * Reset the batcher's state.\n */\n\nfunction resetBatcherState() {\n  queue.length = 0;\n  userQueue.length = 0;\n  has = {};\n  circular = {};\n  waiting = false;\n}\n\n/**\n * Flush both queues and run the watchers.\n */\n\nfunction flushBatcherQueue() {\n  var _again = true;\n\n  _function: while (_again) {\n    _again = false;\n\n    runBatcherQueue(queue);\n    runBatcherQueue(userQueue);\n    // user watchers triggered more watchers,\n    // keep flushing until it depletes\n    if (queue.length) {\n      _again = true;\n      continue _function;\n    }\n    // dev tool hook\n    /* istanbul ignore if */\n    if (devtools && config.devtools) {\n      devtools.emit('flush');\n    }\n    resetBatcherState();\n  }\n}\n\n/**\n * Run the watchers in a single queue.\n *\n * @param {Array} queue\n */\n\nfunction runBatcherQueue(queue) {\n  // do not cache length because more watchers might be pushed\n  // as we run existing watchers\n  for (var i = 0; i < queue.length; i++) {\n    var watcher = queue[i];\n    var id = watcher.id;\n    has[id] = null;\n    watcher.run();\n    // in dev build, check and stop circular updates.\n    if (process.env.NODE_ENV !== 'production' && has[id] != null) {\n      circular[id] = (circular[id] || 0) + 1;\n      if (circular[id] > config._maxUpdateCount) {\n        warn('You may have an infinite update loop for watcher ' + 'with expression \"' + watcher.expression + '\"', watcher.vm);\n        break;\n      }\n    }\n  }\n  queue.length = 0;\n}\n\n/**\n * Push a watcher into the watcher queue.\n * Jobs with duplicate IDs will be skipped unless it's\n * pushed when the queue is being flushed.\n *\n * @param {Watcher} watcher\n *   properties:\n *   - {Number} id\n *   - {Function} run\n */\n\nfunction pushWatcher(watcher) {\n  var id = watcher.id;\n  if (has[id] == null) {\n    // push watcher into appropriate queue\n    var q = watcher.user ? userQueue : queue;\n    has[id] = q.length;\n    q.push(watcher);\n    // queue the flush\n    if (!waiting) {\n      waiting = true;\n      nextTick(flushBatcherQueue);\n    }\n  }\n}\n\nvar uid$2 = 0;\n\n/**\n * A watcher parses an expression, collects dependencies,\n * and fires callback when the expression value changes.\n * This is used for both the $watch() api and directives.\n *\n * @param {Vue} vm\n * @param {String|Function} expOrFn\n * @param {Function} cb\n * @param {Object} options\n *                 - {Array} filters\n *                 - {Boolean} twoWay\n *                 - {Boolean} deep\n *                 - {Boolean} user\n *                 - {Boolean} sync\n *                 - {Boolean} lazy\n *                 - {Function} [preProcess]\n *                 - {Function} [postProcess]\n * @constructor\n */\nfunction Watcher(vm, expOrFn, cb, options) {\n  // mix in options\n  if (options) {\n    extend(this, options);\n  }\n  var isFn = typeof expOrFn === 'function';\n  this.vm = vm;\n  vm._watchers.push(this);\n  this.expression = expOrFn;\n  this.cb = cb;\n  this.id = ++uid$2; // uid for batching\n  this.active = true;\n  this.dirty = this.lazy; // for lazy watchers\n  this.deps = [];\n  this.newDeps = [];\n  this.depIds = new _Set();\n  this.newDepIds = new _Set();\n  this.prevError = null; // for async error stacks\n  // parse expression for getter/setter\n  if (isFn) {\n    this.getter = expOrFn;\n    this.setter = undefined;\n  } else {\n    var res = parseExpression$1(expOrFn, this.twoWay);\n    this.getter = res.get;\n    this.setter = res.set;\n  }\n  this.value = this.lazy ? undefined : this.get();\n  // state for avoiding false triggers for deep and Array\n  // watchers during vm._digest()\n  this.queued = this.shallow = false;\n}\n\n/**\n * Evaluate the getter, and re-collect dependencies.\n */\n\nWatcher.prototype.get = function () {\n  this.beforeGet();\n  var scope = this.scope || this.vm;\n  var value;\n  try {\n    value = this.getter.call(scope, scope);\n  } catch (e) {\n    if (process.env.NODE_ENV !== 'production' && config.warnExpressionErrors) {\n      warn('Error when evaluating expression ' + '\"' + this.expression + '\": ' + e.toString(), this.vm);\n    }\n  }\n  // \"touch\" every property so they are all tracked as\n  // dependencies for deep watching\n  if (this.deep) {\n    traverse(value);\n  }\n  if (this.preProcess) {\n    value = this.preProcess(value);\n  }\n  if (this.filters) {\n    value = scope._applyFilters(value, null, this.filters, false);\n  }\n  if (this.postProcess) {\n    value = this.postProcess(value);\n  }\n  this.afterGet();\n  return value;\n};\n\n/**\n * Set the corresponding value with the setter.\n *\n * @param {*} value\n */\n\nWatcher.prototype.set = function (value) {\n  var scope = this.scope || this.vm;\n  if (this.filters) {\n    value = scope._applyFilters(value, this.value, this.filters, true);\n  }\n  try {\n    this.setter.call(scope, scope, value);\n  } catch (e) {\n    if (process.env.NODE_ENV !== 'production' && config.warnExpressionErrors) {\n      warn('Error when evaluating setter ' + '\"' + this.expression + '\": ' + e.toString(), this.vm);\n    }\n  }\n  // two-way sync for v-for alias\n  var forContext = scope.$forContext;\n  if (forContext && forContext.alias === this.expression) {\n    if (forContext.filters) {\n      process.env.NODE_ENV !== 'production' && warn('It seems you are using two-way binding on ' + 'a v-for alias (' + this.expression + '), and the ' + 'v-for has filters. This will not work properly. ' + 'Either remove the filters or use an array of ' + 'objects and bind to object properties instead.', this.vm);\n      return;\n    }\n    forContext._withLock(function () {\n      if (scope.$key) {\n        // original is an object\n        forContext.rawValue[scope.$key] = value;\n      } else {\n        forContext.rawValue.$set(scope.$index, value);\n      }\n    });\n  }\n};\n\n/**\n * Prepare for dependency collection.\n */\n\nWatcher.prototype.beforeGet = function () {\n  Dep.target = this;\n};\n\n/**\n * Add a dependency to this directive.\n *\n * @param {Dep} dep\n */\n\nWatcher.prototype.addDep = function (dep) {\n  var id = dep.id;\n  if (!this.newDepIds.has(id)) {\n    this.newDepIds.add(id);\n    this.newDeps.push(dep);\n    if (!this.depIds.has(id)) {\n      dep.addSub(this);\n    }\n  }\n};\n\n/**\n * Clean up for dependency collection.\n */\n\nWatcher.prototype.afterGet = function () {\n  Dep.target = null;\n  var i = this.deps.length;\n  while (i--) {\n    var dep = this.deps[i];\n    if (!this.newDepIds.has(dep.id)) {\n      dep.removeSub(this);\n    }\n  }\n  var tmp = this.depIds;\n  this.depIds = this.newDepIds;\n  this.newDepIds = tmp;\n  this.newDepIds.clear();\n  tmp = this.deps;\n  this.deps = this.newDeps;\n  this.newDeps = tmp;\n  this.newDeps.length = 0;\n};\n\n/**\n * Subscriber interface.\n * Will be called when a dependency changes.\n *\n * @param {Boolean} shallow\n */\n\nWatcher.prototype.update = function (shallow) {\n  if (this.lazy) {\n    this.dirty = true;\n  } else if (this.sync || !config.async) {\n    this.run();\n  } else {\n    // if queued, only overwrite shallow with non-shallow,\n    // but not the other way around.\n    this.shallow = this.queued ? shallow ? this.shallow : false : !!shallow;\n    this.queued = true;\n    // record before-push error stack in debug mode\n    /* istanbul ignore if */\n    if (process.env.NODE_ENV !== 'production' && config.debug) {\n      this.prevError = new Error('[vue] async stack trace');\n    }\n    pushWatcher(this);\n  }\n};\n\n/**\n * Batcher job interface.\n * Will be called by the batcher.\n */\n\nWatcher.prototype.run = function () {\n  if (this.active) {\n    var value = this.get();\n    if (value !== this.value ||\n    // Deep watchers and watchers on Object/Arrays should fire even\n    // when the value is the same, because the value may\n    // have mutated; but only do so if this is a\n    // non-shallow update (caused by a vm digest).\n    (isObject(value) || this.deep) && !this.shallow) {\n      // set new value\n      var oldValue = this.value;\n      this.value = value;\n      // in debug + async mode, when a watcher callbacks\n      // throws, we also throw the saved before-push error\n      // so the full cross-tick stack trace is available.\n      var prevError = this.prevError;\n      /* istanbul ignore if */\n      if (process.env.NODE_ENV !== 'production' && config.debug && prevError) {\n        this.prevError = null;\n        try {\n          this.cb.call(this.vm, value, oldValue);\n        } catch (e) {\n          nextTick(function () {\n            throw prevError;\n          }, 0);\n          throw e;\n        }\n      } else {\n        this.cb.call(this.vm, value, oldValue);\n      }\n    }\n    this.queued = this.shallow = false;\n  }\n};\n\n/**\n * Evaluate the value of the watcher.\n * This only gets called for lazy watchers.\n */\n\nWatcher.prototype.evaluate = function () {\n  // avoid overwriting another watcher that is being\n  // collected.\n  var current = Dep.target;\n  this.value = this.get();\n  this.dirty = false;\n  Dep.target = current;\n};\n\n/**\n * Depend on all deps collected by this watcher.\n */\n\nWatcher.prototype.depend = function () {\n  var i = this.deps.length;\n  while (i--) {\n    this.deps[i].depend();\n  }\n};\n\n/**\n * Remove self from all dependencies' subcriber list.\n */\n\nWatcher.prototype.teardown = function () {\n  if (this.active) {\n    // remove self from vm's watcher list\n    // this is a somewhat expensive operation so we skip it\n    // if the vm is being destroyed or is performing a v-for\n    // re-render (the watcher list is then filtered by v-for).\n    if (!this.vm._isBeingDestroyed && !this.vm._vForRemoving) {\n      this.vm._watchers.$remove(this);\n    }\n    var i = this.deps.length;\n    while (i--) {\n      this.deps[i].removeSub(this);\n    }\n    this.active = false;\n    this.vm = this.cb = this.value = null;\n  }\n};\n\n/**\n * Recrusively traverse an object to evoke all converted\n * getters, so that every nested property inside the object\n * is collected as a \"deep\" dependency.\n *\n * @param {*} val\n */\n\nvar seenObjects = new _Set();\nfunction traverse(val, seen) {\n  var i = undefined,\n      keys = undefined;\n  if (!seen) {\n    seen = seenObjects;\n    seen.clear();\n  }\n  var isA = isArray(val);\n  var isO = isObject(val);\n  if ((isA || isO) && Object.isExtensible(val)) {\n    if (val.__ob__) {\n      var depId = val.__ob__.dep.id;\n      if (seen.has(depId)) {\n        return;\n      } else {\n        seen.add(depId);\n      }\n    }\n    if (isA) {\n      i = val.length;\n      while (i--) traverse(val[i], seen);\n    } else if (isO) {\n      keys = Object.keys(val);\n      i = keys.length;\n      while (i--) traverse(val[keys[i]], seen);\n    }\n  }\n}\n\nvar text$1 = {\n\n  bind: function bind() {\n    this.attr = this.el.nodeType === 3 ? 'data' : 'textContent';\n  },\n\n  update: function update(value) {\n    this.el[this.attr] = _toString(value);\n  }\n};\n\nvar templateCache = new Cache(1000);\nvar idSelectorCache = new Cache(1000);\n\nvar map = {\n  efault: [0, '', ''],\n  legend: [1, '<fieldset>', '</fieldset>'],\n  tr: [2, '<table><tbody>', '</tbody></table>'],\n  col: [2, '<table><tbody></tbody><colgroup>', '</colgroup></table>']\n};\n\nmap.td = map.th = [3, '<table><tbody><tr>', '</tr></tbody></table>'];\n\nmap.option = map.optgroup = [1, '<select multiple=\"multiple\">', '</select>'];\n\nmap.thead = map.tbody = map.colgroup = map.caption = map.tfoot = [1, '<table>', '</table>'];\n\nmap.g = map.defs = map.symbol = map.use = map.image = map.text = map.circle = map.ellipse = map.line = map.path = map.polygon = map.polyline = map.rect = [1, '<svg ' + 'xmlns=\"http://www.w3.org/2000/svg\" ' + 'xmlns:xlink=\"http://www.w3.org/1999/xlink\" ' + 'xmlns:ev=\"http://www.w3.org/2001/xml-events\"' + 'version=\"1.1\">', '</svg>'];\n\n/**\n * Check if a node is a supported template node with a\n * DocumentFragment content.\n *\n * @param {Node} node\n * @return {Boolean}\n */\n\nfunction isRealTemplate(node) {\n  return isTemplate(node) && isFragment(node.content);\n}\n\nvar tagRE$1 = /<([\\w:-]+)/;\nvar entityRE = /&#?\\w+?;/;\nvar commentRE = /<!--/;\n\n/**\n * Convert a string template to a DocumentFragment.\n * Determines correct wrapping by tag types. Wrapping\n * strategy found in jQuery & component/domify.\n *\n * @param {String} templateString\n * @param {Boolean} raw\n * @return {DocumentFragment}\n */\n\nfunction stringToFragment(templateString, raw) {\n  // try a cache hit first\n  var cacheKey = raw ? templateString : templateString.trim();\n  var hit = templateCache.get(cacheKey);\n  if (hit) {\n    return hit;\n  }\n\n  var frag = document.createDocumentFragment();\n  var tagMatch = templateString.match(tagRE$1);\n  var entityMatch = entityRE.test(templateString);\n  var commentMatch = commentRE.test(templateString);\n\n  if (!tagMatch && !entityMatch && !commentMatch) {\n    // text only, return a single text node.\n    frag.appendChild(document.createTextNode(templateString));\n  } else {\n    var tag = tagMatch && tagMatch[1];\n    var wrap = map[tag] || map.efault;\n    var depth = wrap[0];\n    var prefix = wrap[1];\n    var suffix = wrap[2];\n    var node = document.createElement('div');\n\n    node.innerHTML = prefix + templateString + suffix;\n    while (depth--) {\n      node = node.lastChild;\n    }\n\n    var child;\n    /* eslint-disable no-cond-assign */\n    while (child = node.firstChild) {\n      /* eslint-enable no-cond-assign */\n      frag.appendChild(child);\n    }\n  }\n  if (!raw) {\n    trimNode(frag);\n  }\n  templateCache.put(cacheKey, frag);\n  return frag;\n}\n\n/**\n * Convert a template node to a DocumentFragment.\n *\n * @param {Node} node\n * @return {DocumentFragment}\n */\n\nfunction nodeToFragment(node) {\n  // if its a template tag and the browser supports it,\n  // its content is already a document fragment. However, iOS Safari has\n  // bug when using directly cloned template content with touch\n  // events and can cause crashes when the nodes are removed from DOM, so we\n  // have to treat template elements as string templates. (#2805)\n  /* istanbul ignore if */\n  if (isRealTemplate(node)) {\n    return stringToFragment(node.innerHTML);\n  }\n  // script template\n  if (node.tagName === 'SCRIPT') {\n    return stringToFragment(node.textContent);\n  }\n  // normal node, clone it to avoid mutating the original\n  var clonedNode = cloneNode(node);\n  var frag = document.createDocumentFragment();\n  var child;\n  /* eslint-disable no-cond-assign */\n  while (child = clonedNode.firstChild) {\n    /* eslint-enable no-cond-assign */\n    frag.appendChild(child);\n  }\n  trimNode(frag);\n  return frag;\n}\n\n// Test for the presence of the Safari template cloning bug\n// https://bugs.webkit.org/showug.cgi?id=137755\nvar hasBrokenTemplate = (function () {\n  /* istanbul ignore else */\n  if (inBrowser) {\n    var a = document.createElement('div');\n    a.innerHTML = '<template>1</template>';\n    return !a.cloneNode(true).firstChild.innerHTML;\n  } else {\n    return false;\n  }\n})();\n\n// Test for IE10/11 textarea placeholder clone bug\nvar hasTextareaCloneBug = (function () {\n  /* istanbul ignore else */\n  if (inBrowser) {\n    var t = document.createElement('textarea');\n    t.placeholder = 't';\n    return t.cloneNode(true).value === 't';\n  } else {\n    return false;\n  }\n})();\n\n/**\n * 1. Deal with Safari cloning nested <template> bug by\n *    manually cloning all template instances.\n * 2. Deal with IE10/11 textarea placeholder bug by setting\n *    the correct value after cloning.\n *\n * @param {Element|DocumentFragment} node\n * @return {Element|DocumentFragment}\n */\n\nfunction cloneNode(node) {\n  /* istanbul ignore if */\n  if (!node.querySelectorAll) {\n    return node.cloneNode();\n  }\n  var res = node.cloneNode(true);\n  var i, original, cloned;\n  /* istanbul ignore if */\n  if (hasBrokenTemplate) {\n    var tempClone = res;\n    if (isRealTemplate(node)) {\n      node = node.content;\n      tempClone = res.content;\n    }\n    original = node.querySelectorAll('template');\n    if (original.length) {\n      cloned = tempClone.querySelectorAll('template');\n      i = cloned.length;\n      while (i--) {\n        cloned[i].parentNode.replaceChild(cloneNode(original[i]), cloned[i]);\n      }\n    }\n  }\n  /* istanbul ignore if */\n  if (hasTextareaCloneBug) {\n    if (node.tagName === 'TEXTAREA') {\n      res.value = node.value;\n    } else {\n      original = node.querySelectorAll('textarea');\n      if (original.length) {\n        cloned = res.querySelectorAll('textarea');\n        i = cloned.length;\n        while (i--) {\n          cloned[i].value = original[i].value;\n        }\n      }\n    }\n  }\n  return res;\n}\n\n/**\n * Process the template option and normalizes it into a\n * a DocumentFragment that can be used as a partial or a\n * instance template.\n *\n * @param {*} template\n *        Possible values include:\n *        - DocumentFragment object\n *        - Node object of type Template\n *        - id selector: '#some-template-id'\n *        - template string: '<div><span>{{msg}}</span></div>'\n * @param {Boolean} shouldClone\n * @param {Boolean} raw\n *        inline HTML interpolation. Do not check for id\n *        selector and keep whitespace in the string.\n * @return {DocumentFragment|undefined}\n */\n\nfunction parseTemplate(template, shouldClone, raw) {\n  var node, frag;\n\n  // if the template is already a document fragment,\n  // do nothing\n  if (isFragment(template)) {\n    trimNode(template);\n    return shouldClone ? cloneNode(template) : template;\n  }\n\n  if (typeof template === 'string') {\n    // id selector\n    if (!raw && template.charAt(0) === '#') {\n      // id selector can be cached too\n      frag = idSelectorCache.get(template);\n      if (!frag) {\n        node = document.getElementById(template.slice(1));\n        if (node) {\n          frag = nodeToFragment(node);\n          // save selector to cache\n          idSelectorCache.put(template, frag);\n        }\n      }\n    } else {\n      // normal string template\n      frag = stringToFragment(template, raw);\n    }\n  } else if (template.nodeType) {\n    // a direct node\n    frag = nodeToFragment(template);\n  }\n\n  return frag && shouldClone ? cloneNode(frag) : frag;\n}\n\nvar template = Object.freeze({\n  cloneNode: cloneNode,\n  parseTemplate: parseTemplate\n});\n\nvar html = {\n\n  bind: function bind() {\n    // a comment node means this is a binding for\n    // {{{ inline unescaped html }}}\n    if (this.el.nodeType === 8) {\n      // hold nodes\n      this.nodes = [];\n      // replace the placeholder with proper anchor\n      this.anchor = createAnchor('v-html');\n      replace(this.el, this.anchor);\n    }\n  },\n\n  update: function update(value) {\n    value = _toString(value);\n    if (this.nodes) {\n      this.swap(value);\n    } else {\n      this.el.innerHTML = value;\n    }\n  },\n\n  swap: function swap(value) {\n    // remove old nodes\n    var i = this.nodes.length;\n    while (i--) {\n      remove(this.nodes[i]);\n    }\n    // convert new value to a fragment\n    // do not attempt to retrieve from id selector\n    var frag = parseTemplate(value, true, true);\n    // save a reference to these nodes so we can remove later\n    this.nodes = toArray(frag.childNodes);\n    before(frag, this.anchor);\n  }\n};\n\n/**\n * Abstraction for a partially-compiled fragment.\n * Can optionally compile content with a child scope.\n *\n * @param {Function} linker\n * @param {Vue} vm\n * @param {DocumentFragment} frag\n * @param {Vue} [host]\n * @param {Object} [scope]\n * @param {Fragment} [parentFrag]\n */\nfunction Fragment(linker, vm, frag, host, scope, parentFrag) {\n  this.children = [];\n  this.childFrags = [];\n  this.vm = vm;\n  this.scope = scope;\n  this.inserted = false;\n  this.parentFrag = parentFrag;\n  if (parentFrag) {\n    parentFrag.childFrags.push(this);\n  }\n  this.unlink = linker(vm, frag, host, scope, this);\n  var single = this.single = frag.childNodes.length === 1 &&\n  // do not go single mode if the only node is an anchor\n  !frag.childNodes[0].__v_anchor;\n  if (single) {\n    this.node = frag.childNodes[0];\n    this.before = singleBefore;\n    this.remove = singleRemove;\n  } else {\n    this.node = createAnchor('fragment-start');\n    this.end = createAnchor('fragment-end');\n    this.frag = frag;\n    prepend(this.node, frag);\n    frag.appendChild(this.end);\n    this.before = multiBefore;\n    this.remove = multiRemove;\n  }\n  this.node.__v_frag = this;\n}\n\n/**\n * Call attach/detach for all components contained within\n * this fragment. Also do so recursively for all child\n * fragments.\n *\n * @param {Function} hook\n */\n\nFragment.prototype.callHook = function (hook) {\n  var i, l;\n  for (i = 0, l = this.childFrags.length; i < l; i++) {\n    this.childFrags[i].callHook(hook);\n  }\n  for (i = 0, l = this.children.length; i < l; i++) {\n    hook(this.children[i]);\n  }\n};\n\n/**\n * Insert fragment before target, single node version\n *\n * @param {Node} target\n * @param {Boolean} withTransition\n */\n\nfunction singleBefore(target, withTransition) {\n  this.inserted = true;\n  var method = withTransition !== false ? beforeWithTransition : before;\n  method(this.node, target, this.vm);\n  if (inDoc(this.node)) {\n    this.callHook(attach);\n  }\n}\n\n/**\n * Remove fragment, single node version\n */\n\nfunction singleRemove() {\n  this.inserted = false;\n  var shouldCallRemove = inDoc(this.node);\n  var self = this;\n  this.beforeRemove();\n  removeWithTransition(this.node, this.vm, function () {\n    if (shouldCallRemove) {\n      self.callHook(detach);\n    }\n    self.destroy();\n  });\n}\n\n/**\n * Insert fragment before target, multi-nodes version\n *\n * @param {Node} target\n * @param {Boolean} withTransition\n */\n\nfunction multiBefore(target, withTransition) {\n  this.inserted = true;\n  var vm = this.vm;\n  var method = withTransition !== false ? beforeWithTransition : before;\n  mapNodeRange(this.node, this.end, function (node) {\n    method(node, target, vm);\n  });\n  if (inDoc(this.node)) {\n    this.callHook(attach);\n  }\n}\n\n/**\n * Remove fragment, multi-nodes version\n */\n\nfunction multiRemove() {\n  this.inserted = false;\n  var self = this;\n  var shouldCallRemove = inDoc(this.node);\n  this.beforeRemove();\n  removeNodeRange(this.node, this.end, this.vm, this.frag, function () {\n    if (shouldCallRemove) {\n      self.callHook(detach);\n    }\n    self.destroy();\n  });\n}\n\n/**\n * Prepare the fragment for removal.\n */\n\nFragment.prototype.beforeRemove = function () {\n  var i, l;\n  for (i = 0, l = this.childFrags.length; i < l; i++) {\n    // call the same method recursively on child\n    // fragments, depth-first\n    this.childFrags[i].beforeRemove(false);\n  }\n  for (i = 0, l = this.children.length; i < l; i++) {\n    // Call destroy for all contained instances,\n    // with remove:false and defer:true.\n    // Defer is necessary because we need to\n    // keep the children to call detach hooks\n    // on them.\n    this.children[i].$destroy(false, true);\n  }\n  var dirs = this.unlink.dirs;\n  for (i = 0, l = dirs.length; i < l; i++) {\n    // disable the watchers on all the directives\n    // so that the rendered content stays the same\n    // during removal.\n    dirs[i]._watcher && dirs[i]._watcher.teardown();\n  }\n};\n\n/**\n * Destroy the fragment.\n */\n\nFragment.prototype.destroy = function () {\n  if (this.parentFrag) {\n    this.parentFrag.childFrags.$remove(this);\n  }\n  this.node.__v_frag = null;\n  this.unlink();\n};\n\n/**\n * Call attach hook for a Vue instance.\n *\n * @param {Vue} child\n */\n\nfunction attach(child) {\n  if (!child._isAttached && inDoc(child.$el)) {\n    child._callHook('attached');\n  }\n}\n\n/**\n * Call detach hook for a Vue instance.\n *\n * @param {Vue} child\n */\n\nfunction detach(child) {\n  if (child._isAttached && !inDoc(child.$el)) {\n    child._callHook('detached');\n  }\n}\n\nvar linkerCache = new Cache(5000);\n\n/**\n * A factory that can be used to create instances of a\n * fragment. Caches the compiled linker if possible.\n *\n * @param {Vue} vm\n * @param {Element|String} el\n */\nfunction FragmentFactory(vm, el) {\n  this.vm = vm;\n  var template;\n  var isString = typeof el === 'string';\n  if (isString || isTemplate(el) && !el.hasAttribute('v-if')) {\n    template = parseTemplate(el, true);\n  } else {\n    template = document.createDocumentFragment();\n    template.appendChild(el);\n  }\n  this.template = template;\n  // linker can be cached, but only for components\n  var linker;\n  var cid = vm.constructor.cid;\n  if (cid > 0) {\n    var cacheId = cid + (isString ? el : getOuterHTML(el));\n    linker = linkerCache.get(cacheId);\n    if (!linker) {\n      linker = compile(template, vm.$options, true);\n      linkerCache.put(cacheId, linker);\n    }\n  } else {\n    linker = compile(template, vm.$options, true);\n  }\n  this.linker = linker;\n}\n\n/**\n * Create a fragment instance with given host and scope.\n *\n * @param {Vue} host\n * @param {Object} scope\n * @param {Fragment} parentFrag\n */\n\nFragmentFactory.prototype.create = function (host, scope, parentFrag) {\n  var frag = cloneNode(this.template);\n  return new Fragment(this.linker, this.vm, frag, host, scope, parentFrag);\n};\n\nvar ON = 700;\nvar MODEL = 800;\nvar BIND = 850;\nvar TRANSITION = 1100;\nvar EL = 1500;\nvar COMPONENT = 1500;\nvar PARTIAL = 1750;\nvar IF = 2100;\nvar FOR = 2200;\nvar SLOT = 2300;\n\nvar uid$3 = 0;\n\nvar vFor = {\n\n  priority: FOR,\n  terminal: true,\n\n  params: ['track-by', 'stagger', 'enter-stagger', 'leave-stagger'],\n\n  bind: function bind() {\n    if (process.env.NODE_ENV !== 'production' && this.el.hasAttribute('v-if')) {\n      warn('<' + this.el.tagName.toLowerCase() + ' v-for=\"' + this.expression + '\" v-if=\"' + this.el.getAttribute('v-if') + '\">: ' + 'Using v-if and v-for on the same element is not recommended - ' + 'consider filtering the source Array instead.', this.vm);\n    }\n\n    // support \"item in/of items\" syntax\n    var inMatch = this.expression.match(/(.*) (?:in|of) (.*)/);\n    if (inMatch) {\n      var itMatch = inMatch[1].match(/\\((.*),(.*)\\)/);\n      if (itMatch) {\n        this.iterator = itMatch[1].trim();\n        this.alias = itMatch[2].trim();\n      } else {\n        this.alias = inMatch[1].trim();\n      }\n      this.expression = inMatch[2];\n    }\n\n    if (!this.alias) {\n      process.env.NODE_ENV !== 'production' && warn('Invalid v-for expression \"' + this.descriptor.raw + '\": ' + 'alias is required.', this.vm);\n      return;\n    }\n\n    // uid as a cache identifier\n    this.id = '__v-for__' + ++uid$3;\n\n    // check if this is an option list,\n    // so that we know if we need to update the <select>'s\n    // v-model when the option list has changed.\n    // because v-model has a lower priority than v-for,\n    // the v-model is not bound here yet, so we have to\n    // retrive it in the actual updateModel() function.\n    var tag = this.el.tagName;\n    this.isOption = (tag === 'OPTION' || tag === 'OPTGROUP') && this.el.parentNode.tagName === 'SELECT';\n\n    // setup anchor nodes\n    this.start = createAnchor('v-for-start');\n    this.end = createAnchor('v-for-end');\n    replace(this.el, this.end);\n    before(this.start, this.end);\n\n    // cache\n    this.cache = Object.create(null);\n\n    // fragment factory\n    this.factory = new FragmentFactory(this.vm, this.el);\n  },\n\n  update: function update(data) {\n    this.diff(data);\n    this.updateRef();\n    this.updateModel();\n  },\n\n  /**\n   * Diff, based on new data and old data, determine the\n   * minimum amount of DOM manipulations needed to make the\n   * DOM reflect the new data Array.\n   *\n   * The algorithm diffs the new data Array by storing a\n   * hidden reference to an owner vm instance on previously\n   * seen data. This allows us to achieve O(n) which is\n   * better than a levenshtein distance based algorithm,\n   * which is O(m * n).\n   *\n   * @param {Array} data\n   */\n\n  diff: function diff(data) {\n    // check if the Array was converted from an Object\n    var item = data[0];\n    var convertedFromObject = this.fromObject = isObject(item) && hasOwn(item, '$key') && hasOwn(item, '$value');\n\n    var trackByKey = this.params.trackBy;\n    var oldFrags = this.frags;\n    var frags = this.frags = new Array(data.length);\n    var alias = this.alias;\n    var iterator = this.iterator;\n    var start = this.start;\n    var end = this.end;\n    var inDocument = inDoc(start);\n    var init = !oldFrags;\n    var i, l, frag, key, value, primitive;\n\n    // First pass, go through the new Array and fill up\n    // the new frags array. If a piece of data has a cached\n    // instance for it, we reuse it. Otherwise build a new\n    // instance.\n    for (i = 0, l = data.length; i < l; i++) {\n      item = data[i];\n      key = convertedFromObject ? item.$key : null;\n      value = convertedFromObject ? item.$value : item;\n      primitive = !isObject(value);\n      frag = !init && this.getCachedFrag(value, i, key);\n      if (frag) {\n        // reusable fragment\n        frag.reused = true;\n        // update $index\n        frag.scope.$index = i;\n        // update $key\n        if (key) {\n          frag.scope.$key = key;\n        }\n        // update iterator\n        if (iterator) {\n          frag.scope[iterator] = key !== null ? key : i;\n        }\n        // update data for track-by, object repeat &\n        // primitive values.\n        if (trackByKey || convertedFromObject || primitive) {\n          withoutConversion(function () {\n            frag.scope[alias] = value;\n          });\n        }\n      } else {\n        // new instance\n        frag = this.create(value, alias, i, key);\n        frag.fresh = !init;\n      }\n      frags[i] = frag;\n      if (init) {\n        frag.before(end);\n      }\n    }\n\n    // we're done for the initial render.\n    if (init) {\n      return;\n    }\n\n    // Second pass, go through the old fragments and\n    // destroy those who are not reused (and remove them\n    // from cache)\n    var removalIndex = 0;\n    var totalRemoved = oldFrags.length - frags.length;\n    // when removing a large number of fragments, watcher removal\n    // turns out to be a perf bottleneck, so we batch the watcher\n    // removals into a single filter call!\n    this.vm._vForRemoving = true;\n    for (i = 0, l = oldFrags.length; i < l; i++) {\n      frag = oldFrags[i];\n      if (!frag.reused) {\n        this.deleteCachedFrag(frag);\n        this.remove(frag, removalIndex++, totalRemoved, inDocument);\n      }\n    }\n    this.vm._vForRemoving = false;\n    if (removalIndex) {\n      this.vm._watchers = this.vm._watchers.filter(function (w) {\n        return w.active;\n      });\n    }\n\n    // Final pass, move/insert new fragments into the\n    // right place.\n    var targetPrev, prevEl, currentPrev;\n    var insertionIndex = 0;\n    for (i = 0, l = frags.length; i < l; i++) {\n      frag = frags[i];\n      // this is the frag that we should be after\n      targetPrev = frags[i - 1];\n      prevEl = targetPrev ? targetPrev.staggerCb ? targetPrev.staggerAnchor : targetPrev.end || targetPrev.node : start;\n      if (frag.reused && !frag.staggerCb) {\n        currentPrev = findPrevFrag(frag, start, this.id);\n        if (currentPrev !== targetPrev && (!currentPrev ||\n        // optimization for moving a single item.\n        // thanks to suggestions by @livoras in #1807\n        findPrevFrag(currentPrev, start, this.id) !== targetPrev)) {\n          this.move(frag, prevEl);\n        }\n      } else {\n        // new instance, or still in stagger.\n        // insert with updated stagger index.\n        this.insert(frag, insertionIndex++, prevEl, inDocument);\n      }\n      frag.reused = frag.fresh = false;\n    }\n  },\n\n  /**\n   * Create a new fragment instance.\n   *\n   * @param {*} value\n   * @param {String} alias\n   * @param {Number} index\n   * @param {String} [key]\n   * @return {Fragment}\n   */\n\n  create: function create(value, alias, index, key) {\n    var host = this._host;\n    // create iteration scope\n    var parentScope = this._scope || this.vm;\n    var scope = Object.create(parentScope);\n    // ref holder for the scope\n    scope.$refs = Object.create(parentScope.$refs);\n    scope.$els = Object.create(parentScope.$els);\n    // make sure point $parent to parent scope\n    scope.$parent = parentScope;\n    // for two-way binding on alias\n    scope.$forContext = this;\n    // define scope properties\n    // important: define the scope alias without forced conversion\n    // so that frozen data structures remain non-reactive.\n    withoutConversion(function () {\n      defineReactive(scope, alias, value);\n    });\n    defineReactive(scope, '$index', index);\n    if (key) {\n      defineReactive(scope, '$key', key);\n    } else if (scope.$key) {\n      // avoid accidental fallback\n      def(scope, '$key', null);\n    }\n    if (this.iterator) {\n      defineReactive(scope, this.iterator, key !== null ? key : index);\n    }\n    var frag = this.factory.create(host, scope, this._frag);\n    frag.forId = this.id;\n    this.cacheFrag(value, frag, index, key);\n    return frag;\n  },\n\n  /**\n   * Update the v-ref on owner vm.\n   */\n\n  updateRef: function updateRef() {\n    var ref = this.descriptor.ref;\n    if (!ref) return;\n    var hash = (this._scope || this.vm).$refs;\n    var refs;\n    if (!this.fromObject) {\n      refs = this.frags.map(findVmFromFrag);\n    } else {\n      refs = {};\n      this.frags.forEach(function (frag) {\n        refs[frag.scope.$key] = findVmFromFrag(frag);\n      });\n    }\n    hash[ref] = refs;\n  },\n\n  /**\n   * For option lists, update the containing v-model on\n   * parent <select>.\n   */\n\n  updateModel: function updateModel() {\n    if (this.isOption) {\n      var parent = this.start.parentNode;\n      var model = parent && parent.__v_model;\n      if (model) {\n        model.forceUpdate();\n      }\n    }\n  },\n\n  /**\n   * Insert a fragment. Handles staggering.\n   *\n   * @param {Fragment} frag\n   * @param {Number} index\n   * @param {Node} prevEl\n   * @param {Boolean} inDocument\n   */\n\n  insert: function insert(frag, index, prevEl, inDocument) {\n    if (frag.staggerCb) {\n      frag.staggerCb.cancel();\n      frag.staggerCb = null;\n    }\n    var staggerAmount = this.getStagger(frag, index, null, 'enter');\n    if (inDocument && staggerAmount) {\n      // create an anchor and insert it synchronously,\n      // so that we can resolve the correct order without\n      // worrying about some elements not inserted yet\n      var anchor = frag.staggerAnchor;\n      if (!anchor) {\n        anchor = frag.staggerAnchor = createAnchor('stagger-anchor');\n        anchor.__v_frag = frag;\n      }\n      after(anchor, prevEl);\n      var op = frag.staggerCb = cancellable(function () {\n        frag.staggerCb = null;\n        frag.before(anchor);\n        remove(anchor);\n      });\n      setTimeout(op, staggerAmount);\n    } else {\n      var target = prevEl.nextSibling;\n      /* istanbul ignore if */\n      if (!target) {\n        // reset end anchor position in case the position was messed up\n        // by an external drag-n-drop library.\n        after(this.end, prevEl);\n        target = this.end;\n      }\n      frag.before(target);\n    }\n  },\n\n  /**\n   * Remove a fragment. Handles staggering.\n   *\n   * @param {Fragment} frag\n   * @param {Number} index\n   * @param {Number} total\n   * @param {Boolean} inDocument\n   */\n\n  remove: function remove(frag, index, total, inDocument) {\n    if (frag.staggerCb) {\n      frag.staggerCb.cancel();\n      frag.staggerCb = null;\n      // it's not possible for the same frag to be removed\n      // twice, so if we have a pending stagger callback,\n      // it means this frag is queued for enter but removed\n      // before its transition started. Since it is already\n      // destroyed, we can just leave it in detached state.\n      return;\n    }\n    var staggerAmount = this.getStagger(frag, index, total, 'leave');\n    if (inDocument && staggerAmount) {\n      var op = frag.staggerCb = cancellable(function () {\n        frag.staggerCb = null;\n        frag.remove();\n      });\n      setTimeout(op, staggerAmount);\n    } else {\n      frag.remove();\n    }\n  },\n\n  /**\n   * Move a fragment to a new position.\n   * Force no transition.\n   *\n   * @param {Fragment} frag\n   * @param {Node} prevEl\n   */\n\n  move: function move(frag, prevEl) {\n    // fix a common issue with Sortable:\n    // if prevEl doesn't have nextSibling, this means it's\n    // been dragged after the end anchor. Just re-position\n    // the end anchor to the end of the container.\n    /* istanbul ignore if */\n    if (!prevEl.nextSibling) {\n      this.end.parentNode.appendChild(this.end);\n    }\n    frag.before(prevEl.nextSibling, false);\n  },\n\n  /**\n   * Cache a fragment using track-by or the object key.\n   *\n   * @param {*} value\n   * @param {Fragment} frag\n   * @param {Number} index\n   * @param {String} [key]\n   */\n\n  cacheFrag: function cacheFrag(value, frag, index, key) {\n    var trackByKey = this.params.trackBy;\n    var cache = this.cache;\n    var primitive = !isObject(value);\n    var id;\n    if (key || trackByKey || primitive) {\n      id = getTrackByKey(index, key, value, trackByKey);\n      if (!cache[id]) {\n        cache[id] = frag;\n      } else if (trackByKey !== '$index') {\n        process.env.NODE_ENV !== 'production' && this.warnDuplicate(value);\n      }\n    } else {\n      id = this.id;\n      if (hasOwn(value, id)) {\n        if (value[id] === null) {\n          value[id] = frag;\n        } else {\n          process.env.NODE_ENV !== 'production' && this.warnDuplicate(value);\n        }\n      } else if (Object.isExtensible(value)) {\n        def(value, id, frag);\n      } else if (process.env.NODE_ENV !== 'production') {\n        warn('Frozen v-for objects cannot be automatically tracked, make sure to ' + 'provide a track-by key.');\n      }\n    }\n    frag.raw = value;\n  },\n\n  /**\n   * Get a cached fragment from the value/index/key\n   *\n   * @param {*} value\n   * @param {Number} index\n   * @param {String} key\n   * @return {Fragment}\n   */\n\n  getCachedFrag: function getCachedFrag(value, index, key) {\n    var trackByKey = this.params.trackBy;\n    var primitive = !isObject(value);\n    var frag;\n    if (key || trackByKey || primitive) {\n      var id = getTrackByKey(index, key, value, trackByKey);\n      frag = this.cache[id];\n    } else {\n      frag = value[this.id];\n    }\n    if (frag && (frag.reused || frag.fresh)) {\n      process.env.NODE_ENV !== 'production' && this.warnDuplicate(value);\n    }\n    return frag;\n  },\n\n  /**\n   * Delete a fragment from cache.\n   *\n   * @param {Fragment} frag\n   */\n\n  deleteCachedFrag: function deleteCachedFrag(frag) {\n    var value = frag.raw;\n    var trackByKey = this.params.trackBy;\n    var scope = frag.scope;\n    var index = scope.$index;\n    // fix #948: avoid accidentally fall through to\n    // a parent repeater which happens to have $key.\n    var key = hasOwn(scope, '$key') && scope.$key;\n    var primitive = !isObject(value);\n    if (trackByKey || key || primitive) {\n      var id = getTrackByKey(index, key, value, trackByKey);\n      this.cache[id] = null;\n    } else {\n      value[this.id] = null;\n      frag.raw = null;\n    }\n  },\n\n  /**\n   * Get the stagger amount for an insertion/removal.\n   *\n   * @param {Fragment} frag\n   * @param {Number} index\n   * @param {Number} total\n   * @param {String} type\n   */\n\n  getStagger: function getStagger(frag, index, total, type) {\n    type = type + 'Stagger';\n    var trans = frag.node.__v_trans;\n    var hooks = trans && trans.hooks;\n    var hook = hooks && (hooks[type] || hooks.stagger);\n    return hook ? hook.call(frag, index, total) : index * parseInt(this.params[type] || this.params.stagger, 10);\n  },\n\n  /**\n   * Pre-process the value before piping it through the\n   * filters. This is passed to and called by the watcher.\n   */\n\n  _preProcess: function _preProcess(value) {\n    // regardless of type, store the un-filtered raw value.\n    this.rawValue = value;\n    return value;\n  },\n\n  /**\n   * Post-process the value after it has been piped through\n   * the filters. This is passed to and called by the watcher.\n   *\n   * It is necessary for this to be called during the\n   * watcher's dependency collection phase because we want\n   * the v-for to update when the source Object is mutated.\n   */\n\n  _postProcess: function _postProcess(value) {\n    if (isArray(value)) {\n      return value;\n    } else if (isPlainObject(value)) {\n      // convert plain object to array.\n      var keys = Object.keys(value);\n      var i = keys.length;\n      var res = new Array(i);\n      var key;\n      while (i--) {\n        key = keys[i];\n        res[i] = {\n          $key: key,\n          $value: value[key]\n        };\n      }\n      return res;\n    } else {\n      if (typeof value === 'number' && !isNaN(value)) {\n        value = range(value);\n      }\n      return value || [];\n    }\n  },\n\n  unbind: function unbind() {\n    if (this.descriptor.ref) {\n      (this._scope || this.vm).$refs[this.descriptor.ref] = null;\n    }\n    if (this.frags) {\n      var i = this.frags.length;\n      var frag;\n      while (i--) {\n        frag = this.frags[i];\n        this.deleteCachedFrag(frag);\n        frag.destroy();\n      }\n    }\n  }\n};\n\n/**\n * Helper to find the previous element that is a fragment\n * anchor. This is necessary because a destroyed frag's\n * element could still be lingering in the DOM before its\n * leaving transition finishes, but its inserted flag\n * should have been set to false so we can skip them.\n *\n * If this is a block repeat, we want to make sure we only\n * return frag that is bound to this v-for. (see #929)\n *\n * @param {Fragment} frag\n * @param {Comment|Text} anchor\n * @param {String} id\n * @return {Fragment}\n */\n\nfunction findPrevFrag(frag, anchor, id) {\n  var el = frag.node.previousSibling;\n  /* istanbul ignore if */\n  if (!el) return;\n  frag = el.__v_frag;\n  while ((!frag || frag.forId !== id || !frag.inserted) && el !== anchor) {\n    el = el.previousSibling;\n    /* istanbul ignore if */\n    if (!el) return;\n    frag = el.__v_frag;\n  }\n  return frag;\n}\n\n/**\n * Create a range array from given number.\n *\n * @param {Number} n\n * @return {Array}\n */\n\nfunction range(n) {\n  var i = -1;\n  var ret = new Array(Math.floor(n));\n  while (++i < n) {\n    ret[i] = i;\n  }\n  return ret;\n}\n\n/**\n * Get the track by key for an item.\n *\n * @param {Number} index\n * @param {String} key\n * @param {*} value\n * @param {String} [trackByKey]\n */\n\nfunction getTrackByKey(index, key, value, trackByKey) {\n  return trackByKey ? trackByKey === '$index' ? index : trackByKey.charAt(0).match(/\\w/) ? getPath(value, trackByKey) : value[trackByKey] : key || value;\n}\n\nif (process.env.NODE_ENV !== 'production') {\n  vFor.warnDuplicate = function (value) {\n    warn('Duplicate value found in v-for=\"' + this.descriptor.raw + '\": ' + JSON.stringify(value) + '. Use track-by=\"$index\" if ' + 'you are expecting duplicate values.', this.vm);\n  };\n}\n\n/**\n * Find a vm from a fragment.\n *\n * @param {Fragment} frag\n * @return {Vue|undefined}\n */\n\nfunction findVmFromFrag(frag) {\n  var node = frag.node;\n  // handle multi-node frag\n  if (frag.end) {\n    while (!node.__vue__ && node !== frag.end && node.nextSibling) {\n      node = node.nextSibling;\n    }\n  }\n  return node.__vue__;\n}\n\nvar vIf = {\n\n  priority: IF,\n  terminal: true,\n\n  bind: function bind() {\n    var el = this.el;\n    if (!el.__vue__) {\n      // check else block\n      var next = el.nextElementSibling;\n      if (next && getAttr(next, 'v-else') !== null) {\n        remove(next);\n        this.elseEl = next;\n      }\n      // check main block\n      this.anchor = createAnchor('v-if');\n      replace(el, this.anchor);\n    } else {\n      process.env.NODE_ENV !== 'production' && warn('v-if=\"' + this.expression + '\" cannot be ' + 'used on an instance root element.', this.vm);\n      this.invalid = true;\n    }\n  },\n\n  update: function update(value) {\n    if (this.invalid) return;\n    if (value) {\n      if (!this.frag) {\n        this.insert();\n      }\n    } else {\n      this.remove();\n    }\n  },\n\n  insert: function insert() {\n    if (this.elseFrag) {\n      this.elseFrag.remove();\n      this.elseFrag = null;\n    }\n    // lazy init factory\n    if (!this.factory) {\n      this.factory = new FragmentFactory(this.vm, this.el);\n    }\n    this.frag = this.factory.create(this._host, this._scope, this._frag);\n    this.frag.before(this.anchor);\n  },\n\n  remove: function remove() {\n    if (this.frag) {\n      this.frag.remove();\n      this.frag = null;\n    }\n    if (this.elseEl && !this.elseFrag) {\n      if (!this.elseFactory) {\n        this.elseFactory = new FragmentFactory(this.elseEl._context || this.vm, this.elseEl);\n      }\n      this.elseFrag = this.elseFactory.create(this._host, this._scope, this._frag);\n      this.elseFrag.before(this.anchor);\n    }\n  },\n\n  unbind: function unbind() {\n    if (this.frag) {\n      this.frag.destroy();\n    }\n    if (this.elseFrag) {\n      this.elseFrag.destroy();\n    }\n  }\n};\n\nvar show = {\n\n  bind: function bind() {\n    // check else block\n    var next = this.el.nextElementSibling;\n    if (next && getAttr(next, 'v-else') !== null) {\n      this.elseEl = next;\n    }\n  },\n\n  update: function update(value) {\n    this.apply(this.el, value);\n    if (this.elseEl) {\n      this.apply(this.elseEl, !value);\n    }\n  },\n\n  apply: function apply(el, value) {\n    if (inDoc(el)) {\n      applyTransition(el, value ? 1 : -1, toggle, this.vm);\n    } else {\n      toggle();\n    }\n    function toggle() {\n      el.style.display = value ? '' : 'none';\n    }\n  }\n};\n\nvar text$2 = {\n\n  bind: function bind() {\n    var self = this;\n    var el = this.el;\n    var isRange = el.type === 'range';\n    var lazy = this.params.lazy;\n    var number = this.params.number;\n    var debounce = this.params.debounce;\n\n    // handle composition events.\n    //   http://blog.evanyou.me/2014/01/03/composition-event/\n    // skip this for Android because it handles composition\n    // events quite differently. Android doesn't trigger\n    // composition events for language input methods e.g.\n    // Chinese, but instead triggers them for spelling\n    // suggestions... (see Discussion/#162)\n    var composing = false;\n    if (!isAndroid && !isRange) {\n      this.on('compositionstart', function () {\n        composing = true;\n      });\n      this.on('compositionend', function () {\n        composing = false;\n        // in IE11 the \"compositionend\" event fires AFTER\n        // the \"input\" event, so the input handler is blocked\n        // at the end... have to call it here.\n        //\n        // #1327: in lazy mode this is unecessary.\n        if (!lazy) {\n          self.listener();\n        }\n      });\n    }\n\n    // prevent messing with the input when user is typing,\n    // and force update on blur.\n    this.focused = false;\n    if (!isRange && !lazy) {\n      this.on('focus', function () {\n        self.focused = true;\n      });\n      this.on('blur', function () {\n        self.focused = false;\n        // do not sync value after fragment removal (#2017)\n        if (!self._frag || self._frag.inserted) {\n          self.rawListener();\n        }\n      });\n    }\n\n    // Now attach the main listener\n    this.listener = this.rawListener = function () {\n      if (composing || !self._bound) {\n        return;\n      }\n      var val = number || isRange ? toNumber(el.value) : el.value;\n      self.set(val);\n      // force update on next tick to avoid lock & same value\n      // also only update when user is not typing\n      nextTick(function () {\n        if (self._bound && !self.focused) {\n          self.update(self._watcher.value);\n        }\n      });\n    };\n\n    // apply debounce\n    if (debounce) {\n      this.listener = _debounce(this.listener, debounce);\n    }\n\n    // Support jQuery events, since jQuery.trigger() doesn't\n    // trigger native events in some cases and some plugins\n    // rely on $.trigger()\n    //\n    // We want to make sure if a listener is attached using\n    // jQuery, it is also removed with jQuery, that's why\n    // we do the check for each directive instance and\n    // store that check result on itself. This also allows\n    // easier test coverage control by unsetting the global\n    // jQuery variable in tests.\n    this.hasjQuery = typeof jQuery === 'function';\n    if (this.hasjQuery) {\n      var method = jQuery.fn.on ? 'on' : 'bind';\n      jQuery(el)[method]('change', this.rawListener);\n      if (!lazy) {\n        jQuery(el)[method]('input', this.listener);\n      }\n    } else {\n      this.on('change', this.rawListener);\n      if (!lazy) {\n        this.on('input', this.listener);\n      }\n    }\n\n    // IE9 doesn't fire input event on backspace/del/cut\n    if (!lazy && isIE9) {\n      this.on('cut', function () {\n        nextTick(self.listener);\n      });\n      this.on('keyup', function (e) {\n        if (e.keyCode === 46 || e.keyCode === 8) {\n          self.listener();\n        }\n      });\n    }\n\n    // set initial value if present\n    if (el.hasAttribute('value') || el.tagName === 'TEXTAREA' && el.value.trim()) {\n      this.afterBind = this.listener;\n    }\n  },\n\n  update: function update(value) {\n    // #3029 only update when the value changes. This prevent\n    // browsers from overwriting values like selectionStart\n    value = _toString(value);\n    if (value !== this.el.value) this.el.value = value;\n  },\n\n  unbind: function unbind() {\n    var el = this.el;\n    if (this.hasjQuery) {\n      var method = jQuery.fn.off ? 'off' : 'unbind';\n      jQuery(el)[method]('change', this.listener);\n      jQuery(el)[method]('input', this.listener);\n    }\n  }\n};\n\nvar radio = {\n\n  bind: function bind() {\n    var self = this;\n    var el = this.el;\n\n    this.getValue = function () {\n      // value overwrite via v-bind:value\n      if (el.hasOwnProperty('_value')) {\n        return el._value;\n      }\n      var val = el.value;\n      if (self.params.number) {\n        val = toNumber(val);\n      }\n      return val;\n    };\n\n    this.listener = function () {\n      self.set(self.getValue());\n    };\n    this.on('change', this.listener);\n\n    if (el.hasAttribute('checked')) {\n      this.afterBind = this.listener;\n    }\n  },\n\n  update: function update(value) {\n    this.el.checked = looseEqual(value, this.getValue());\n  }\n};\n\nvar select = {\n\n  bind: function bind() {\n    var _this = this;\n\n    var self = this;\n    var el = this.el;\n\n    // method to force update DOM using latest value.\n    this.forceUpdate = function () {\n      if (self._watcher) {\n        self.update(self._watcher.get());\n      }\n    };\n\n    // check if this is a multiple select\n    var multiple = this.multiple = el.hasAttribute('multiple');\n\n    // attach listener\n    this.listener = function () {\n      var value = getValue(el, multiple);\n      value = self.params.number ? isArray(value) ? value.map(toNumber) : toNumber(value) : value;\n      self.set(value);\n    };\n    this.on('change', this.listener);\n\n    // if has initial value, set afterBind\n    var initValue = getValue(el, multiple, true);\n    if (multiple && initValue.length || !multiple && initValue !== null) {\n      this.afterBind = this.listener;\n    }\n\n    // All major browsers except Firefox resets\n    // selectedIndex with value -1 to 0 when the element\n    // is appended to a new parent, therefore we have to\n    // force a DOM update whenever that happens...\n    this.vm.$on('hook:attached', function () {\n      nextTick(_this.forceUpdate);\n    });\n    if (!inDoc(el)) {\n      nextTick(this.forceUpdate);\n    }\n  },\n\n  update: function update(value) {\n    var el = this.el;\n    el.selectedIndex = -1;\n    var multi = this.multiple && isArray(value);\n    var options = el.options;\n    var i = options.length;\n    var op, val;\n    while (i--) {\n      op = options[i];\n      val = op.hasOwnProperty('_value') ? op._value : op.value;\n      /* eslint-disable eqeqeq */\n      op.selected = multi ? indexOf$1(value, val) > -1 : looseEqual(value, val);\n      /* eslint-enable eqeqeq */\n    }\n  },\n\n  unbind: function unbind() {\n    /* istanbul ignore next */\n    this.vm.$off('hook:attached', this.forceUpdate);\n  }\n};\n\n/**\n * Get select value\n *\n * @param {SelectElement} el\n * @param {Boolean} multi\n * @param {Boolean} init\n * @return {Array|*}\n */\n\nfunction getValue(el, multi, init) {\n  var res = multi ? [] : null;\n  var op, val, selected;\n  for (var i = 0, l = el.options.length; i < l; i++) {\n    op = el.options[i];\n    selected = init ? op.hasAttribute('selected') : op.selected;\n    if (selected) {\n      val = op.hasOwnProperty('_value') ? op._value : op.value;\n      if (multi) {\n        res.push(val);\n      } else {\n        return val;\n      }\n    }\n  }\n  return res;\n}\n\n/**\n * Native Array.indexOf uses strict equal, but in this\n * case we need to match string/numbers with custom equal.\n *\n * @param {Array} arr\n * @param {*} val\n */\n\nfunction indexOf$1(arr, val) {\n  var i = arr.length;\n  while (i--) {\n    if (looseEqual(arr[i], val)) {\n      return i;\n    }\n  }\n  return -1;\n}\n\nvar checkbox = {\n\n  bind: function bind() {\n    var self = this;\n    var el = this.el;\n\n    this.getValue = function () {\n      return el.hasOwnProperty('_value') ? el._value : self.params.number ? toNumber(el.value) : el.value;\n    };\n\n    function getBooleanValue() {\n      var val = el.checked;\n      if (val && el.hasOwnProperty('_trueValue')) {\n        return el._trueValue;\n      }\n      if (!val && el.hasOwnProperty('_falseValue')) {\n        return el._falseValue;\n      }\n      return val;\n    }\n\n    this.listener = function () {\n      var model = self._watcher.get();\n      if (isArray(model)) {\n        var val = self.getValue();\n        var i = indexOf(model, val);\n        if (el.checked) {\n          if (i < 0) {\n            self.set(model.concat(val));\n          }\n        } else if (i > -1) {\n          self.set(model.slice(0, i).concat(model.slice(i + 1)));\n        }\n      } else {\n        self.set(getBooleanValue());\n      }\n    };\n\n    this.on('change', this.listener);\n    if (el.hasAttribute('checked')) {\n      this.afterBind = this.listener;\n    }\n  },\n\n  update: function update(value) {\n    var el = this.el;\n    if (isArray(value)) {\n      el.checked = indexOf(value, this.getValue()) > -1;\n    } else {\n      if (el.hasOwnProperty('_trueValue')) {\n        el.checked = looseEqual(value, el._trueValue);\n      } else {\n        el.checked = !!value;\n      }\n    }\n  }\n};\n\nvar handlers = {\n  text: text$2,\n  radio: radio,\n  select: select,\n  checkbox: checkbox\n};\n\nvar model = {\n\n  priority: MODEL,\n  twoWay: true,\n  handlers: handlers,\n  params: ['lazy', 'number', 'debounce'],\n\n  /**\n   * Possible elements:\n   *   <select>\n   *   <textarea>\n   *   <input type=\"*\">\n   *     - text\n   *     - checkbox\n   *     - radio\n   *     - number\n   */\n\n  bind: function bind() {\n    // friendly warning...\n    this.checkFilters();\n    if (this.hasRead && !this.hasWrite) {\n      process.env.NODE_ENV !== 'production' && warn('It seems you are using a read-only filter with ' + 'v-model=\"' + this.descriptor.raw + '\". ' + 'You might want to use a two-way filter to ensure correct behavior.', this.vm);\n    }\n    var el = this.el;\n    var tag = el.tagName;\n    var handler;\n    if (tag === 'INPUT') {\n      handler = handlers[el.type] || handlers.text;\n    } else if (tag === 'SELECT') {\n      handler = handlers.select;\n    } else if (tag === 'TEXTAREA') {\n      handler = handlers.text;\n    } else {\n      process.env.NODE_ENV !== 'production' && warn('v-model does not support element type: ' + tag, this.vm);\n      return;\n    }\n    el.__v_model = this;\n    handler.bind.call(this);\n    this.update = handler.update;\n    this._unbind = handler.unbind;\n  },\n\n  /**\n   * Check read/write filter stats.\n   */\n\n  checkFilters: function checkFilters() {\n    var filters = this.filters;\n    if (!filters) return;\n    var i = filters.length;\n    while (i--) {\n      var filter = resolveAsset(this.vm.$options, 'filters', filters[i].name);\n      if (typeof filter === 'function' || filter.read) {\n        this.hasRead = true;\n      }\n      if (filter.write) {\n        this.hasWrite = true;\n      }\n    }\n  },\n\n  unbind: function unbind() {\n    this.el.__v_model = null;\n    this._unbind && this._unbind();\n  }\n};\n\n// keyCode aliases\nvar keyCodes = {\n  esc: 27,\n  tab: 9,\n  enter: 13,\n  space: 32,\n  'delete': [8, 46],\n  up: 38,\n  left: 37,\n  right: 39,\n  down: 40\n};\n\nfunction keyFilter(handler, keys) {\n  var codes = keys.map(function (key) {\n    var charCode = key.charCodeAt(0);\n    if (charCode > 47 && charCode < 58) {\n      return parseInt(key, 10);\n    }\n    if (key.length === 1) {\n      charCode = key.toUpperCase().charCodeAt(0);\n      if (charCode > 64 && charCode < 91) {\n        return charCode;\n      }\n    }\n    return keyCodes[key];\n  });\n  codes = [].concat.apply([], codes);\n  return function keyHandler(e) {\n    if (codes.indexOf(e.keyCode) > -1) {\n      return handler.call(this, e);\n    }\n  };\n}\n\nfunction stopFilter(handler) {\n  return function stopHandler(e) {\n    e.stopPropagation();\n    return handler.call(this, e);\n  };\n}\n\nfunction preventFilter(handler) {\n  return function preventHandler(e) {\n    e.preventDefault();\n    return handler.call(this, e);\n  };\n}\n\nfunction selfFilter(handler) {\n  return function selfHandler(e) {\n    if (e.target === e.currentTarget) {\n      return handler.call(this, e);\n    }\n  };\n}\n\nvar on$1 = {\n\n  priority: ON,\n  acceptStatement: true,\n  keyCodes: keyCodes,\n\n  bind: function bind() {\n    // deal with iframes\n    if (this.el.tagName === 'IFRAME' && this.arg !== 'load') {\n      var self = this;\n      this.iframeBind = function () {\n        on(self.el.contentWindow, self.arg, self.handler, self.modifiers.capture);\n      };\n      this.on('load', this.iframeBind);\n    }\n  },\n\n  update: function update(handler) {\n    // stub a noop for v-on with no value,\n    // e.g. @mousedown.prevent\n    if (!this.descriptor.raw) {\n      handler = function () {};\n    }\n\n    if (typeof handler !== 'function') {\n      process.env.NODE_ENV !== 'production' && warn('v-on:' + this.arg + '=\"' + this.expression + '\" expects a function value, ' + 'got ' + handler, this.vm);\n      return;\n    }\n\n    // apply modifiers\n    if (this.modifiers.stop) {\n      handler = stopFilter(handler);\n    }\n    if (this.modifiers.prevent) {\n      handler = preventFilter(handler);\n    }\n    if (this.modifiers.self) {\n      handler = selfFilter(handler);\n    }\n    // key filter\n    var keys = Object.keys(this.modifiers).filter(function (key) {\n      return key !== 'stop' && key !== 'prevent' && key !== 'self' && key !== 'capture';\n    });\n    if (keys.length) {\n      handler = keyFilter(handler, keys);\n    }\n\n    this.reset();\n    this.handler = handler;\n\n    if (this.iframeBind) {\n      this.iframeBind();\n    } else {\n      on(this.el, this.arg, this.handler, this.modifiers.capture);\n    }\n  },\n\n  reset: function reset() {\n    var el = this.iframeBind ? this.el.contentWindow : this.el;\n    if (this.handler) {\n      off(el, this.arg, this.handler);\n    }\n  },\n\n  unbind: function unbind() {\n    this.reset();\n  }\n};\n\nvar prefixes = ['-webkit-', '-moz-', '-ms-'];\nvar camelPrefixes = ['Webkit', 'Moz', 'ms'];\nvar importantRE = /!important;?$/;\nvar propCache = Object.create(null);\n\nvar testEl = null;\n\nvar style = {\n\n  deep: true,\n\n  update: function update(value) {\n    if (typeof value === 'string') {\n      this.el.style.cssText = value;\n    } else if (isArray(value)) {\n      this.handleObject(value.reduce(extend, {}));\n    } else {\n      this.handleObject(value || {});\n    }\n  },\n\n  handleObject: function handleObject(value) {\n    // cache object styles so that only changed props\n    // are actually updated.\n    var cache = this.cache || (this.cache = {});\n    var name, val;\n    for (name in cache) {\n      if (!(name in value)) {\n        this.handleSingle(name, null);\n        delete cache[name];\n      }\n    }\n    for (name in value) {\n      val = value[name];\n      if (val !== cache[name]) {\n        cache[name] = val;\n        this.handleSingle(name, val);\n      }\n    }\n  },\n\n  handleSingle: function handleSingle(prop, value) {\n    prop = normalize(prop);\n    if (!prop) return; // unsupported prop\n    // cast possible numbers/booleans into strings\n    if (value != null) value += '';\n    if (value) {\n      var isImportant = importantRE.test(value) ? 'important' : '';\n      if (isImportant) {\n        /* istanbul ignore if */\n        if (process.env.NODE_ENV !== 'production') {\n          warn('It\\'s probably a bad idea to use !important with inline rules. ' + 'This feature will be deprecated in a future version of Vue.');\n        }\n        value = value.replace(importantRE, '').trim();\n        this.el.style.setProperty(prop.kebab, value, isImportant);\n      } else {\n        this.el.style[prop.camel] = value;\n      }\n    } else {\n      this.el.style[prop.camel] = '';\n    }\n  }\n\n};\n\n/**\n * Normalize a CSS property name.\n * - cache result\n * - auto prefix\n * - camelCase -> dash-case\n *\n * @param {String} prop\n * @return {String}\n */\n\nfunction normalize(prop) {\n  if (propCache[prop]) {\n    return propCache[prop];\n  }\n  var res = prefix(prop);\n  propCache[prop] = propCache[res] = res;\n  return res;\n}\n\n/**\n * Auto detect the appropriate prefix for a CSS property.\n * https://gist.github.com/paulirish/523692\n *\n * @param {String} prop\n * @return {String}\n */\n\nfunction prefix(prop) {\n  prop = hyphenate(prop);\n  var camel = camelize(prop);\n  var upper = camel.charAt(0).toUpperCase() + camel.slice(1);\n  if (!testEl) {\n    testEl = document.createElement('div');\n  }\n  var i = prefixes.length;\n  var prefixed;\n  if (camel !== 'filter' && camel in testEl.style) {\n    return {\n      kebab: prop,\n      camel: camel\n    };\n  }\n  while (i--) {\n    prefixed = camelPrefixes[i] + upper;\n    if (prefixed in testEl.style) {\n      return {\n        kebab: prefixes[i] + prop,\n        camel: prefixed\n      };\n    }\n  }\n}\n\n// xlink\nvar xlinkNS = 'http://www.w3.org/1999/xlink';\nvar xlinkRE = /^xlink:/;\n\n// check for attributes that prohibit interpolations\nvar disallowedInterpAttrRE = /^v-|^:|^@|^(?:is|transition|transition-mode|debounce|track-by|stagger|enter-stagger|leave-stagger)$/;\n// these attributes should also set their corresponding properties\n// because they only affect the initial state of the element\nvar attrWithPropsRE = /^(?:value|checked|selected|muted)$/;\n// these attributes expect enumrated values of \"true\" or \"false\"\n// but are not boolean attributes\nvar enumeratedAttrRE = /^(?:draggable|contenteditable|spellcheck)$/;\n\n// these attributes should set a hidden property for\n// binding v-model to object values\nvar modelProps = {\n  value: '_value',\n  'true-value': '_trueValue',\n  'false-value': '_falseValue'\n};\n\nvar bind$1 = {\n\n  priority: BIND,\n\n  bind: function bind() {\n    var attr = this.arg;\n    var tag = this.el.tagName;\n    // should be deep watch on object mode\n    if (!attr) {\n      this.deep = true;\n    }\n    // handle interpolation bindings\n    var descriptor = this.descriptor;\n    var tokens = descriptor.interp;\n    if (tokens) {\n      // handle interpolations with one-time tokens\n      if (descriptor.hasOneTime) {\n        this.expression = tokensToExp(tokens, this._scope || this.vm);\n      }\n\n      // only allow binding on native attributes\n      if (disallowedInterpAttrRE.test(attr) || attr === 'name' && (tag === 'PARTIAL' || tag === 'SLOT')) {\n        process.env.NODE_ENV !== 'production' && warn(attr + '=\"' + descriptor.raw + '\": ' + 'attribute interpolation is not allowed in Vue.js ' + 'directives and special attributes.', this.vm);\n        this.el.removeAttribute(attr);\n        this.invalid = true;\n      }\n\n      /* istanbul ignore if */\n      if (process.env.NODE_ENV !== 'production') {\n        var raw = attr + '=\"' + descriptor.raw + '\": ';\n        // warn src\n        if (attr === 'src') {\n          warn(raw + 'interpolation in \"src\" attribute will cause ' + 'a 404 request. Use v-bind:src instead.', this.vm);\n        }\n\n        // warn style\n        if (attr === 'style') {\n          warn(raw + 'interpolation in \"style\" attribute will cause ' + 'the attribute to be discarded in Internet Explorer. ' + 'Use v-bind:style instead.', this.vm);\n        }\n      }\n    }\n  },\n\n  update: function update(value) {\n    if (this.invalid) {\n      return;\n    }\n    var attr = this.arg;\n    if (this.arg) {\n      this.handleSingle(attr, value);\n    } else {\n      this.handleObject(value || {});\n    }\n  },\n\n  // share object handler with v-bind:class\n  handleObject: style.handleObject,\n\n  handleSingle: function handleSingle(attr, value) {\n    var el = this.el;\n    var interp = this.descriptor.interp;\n    if (this.modifiers.camel) {\n      attr = camelize(attr);\n    }\n    if (!interp && attrWithPropsRE.test(attr) && attr in el) {\n      var attrValue = attr === 'value' ? value == null // IE9 will set input.value to \"null\" for null...\n      ? '' : value : value;\n\n      if (el[attr] !== attrValue) {\n        el[attr] = attrValue;\n      }\n    }\n    // set model props\n    var modelProp = modelProps[attr];\n    if (!interp && modelProp) {\n      el[modelProp] = value;\n      // update v-model if present\n      var model = el.__v_model;\n      if (model) {\n        model.listener();\n      }\n    }\n    // do not set value attribute for textarea\n    if (attr === 'value' && el.tagName === 'TEXTAREA') {\n      el.removeAttribute(attr);\n      return;\n    }\n    // update attribute\n    if (enumeratedAttrRE.test(attr)) {\n      el.setAttribute(attr, value ? 'true' : 'false');\n    } else if (value != null && value !== false) {\n      if (attr === 'class') {\n        // handle edge case #1960:\n        // class interpolation should not overwrite Vue transition class\n        if (el.__v_trans) {\n          value += ' ' + el.__v_trans.id + '-transition';\n        }\n        setClass(el, value);\n      } else if (xlinkRE.test(attr)) {\n        el.setAttributeNS(xlinkNS, attr, value === true ? '' : value);\n      } else {\n        el.setAttribute(attr, value === true ? '' : value);\n      }\n    } else {\n      el.removeAttribute(attr);\n    }\n  }\n};\n\nvar el = {\n\n  priority: EL,\n\n  bind: function bind() {\n    /* istanbul ignore if */\n    if (!this.arg) {\n      return;\n    }\n    var id = this.id = camelize(this.arg);\n    var refs = (this._scope || this.vm).$els;\n    if (hasOwn(refs, id)) {\n      refs[id] = this.el;\n    } else {\n      defineReactive(refs, id, this.el);\n    }\n  },\n\n  unbind: function unbind() {\n    var refs = (this._scope || this.vm).$els;\n    if (refs[this.id] === this.el) {\n      refs[this.id] = null;\n    }\n  }\n};\n\nvar ref = {\n  bind: function bind() {\n    process.env.NODE_ENV !== 'production' && warn('v-ref:' + this.arg + ' must be used on a child ' + 'component. Found on <' + this.el.tagName.toLowerCase() + '>.', this.vm);\n  }\n};\n\nvar cloak = {\n  bind: function bind() {\n    var el = this.el;\n    this.vm.$once('pre-hook:compiled', function () {\n      el.removeAttribute('v-cloak');\n    });\n  }\n};\n\n// logic control\n// two-way binding\n// event handling\n// attributes\n// ref & el\n// cloak\n// must export plain object\nvar directives = {\n  text: text$1,\n  html: html,\n  'for': vFor,\n  'if': vIf,\n  show: show,\n  model: model,\n  on: on$1,\n  bind: bind$1,\n  el: el,\n  ref: ref,\n  cloak: cloak\n};\n\nvar vClass = {\n\n  deep: true,\n\n  update: function update(value) {\n    if (!value) {\n      this.cleanup();\n    } else if (typeof value === 'string') {\n      this.setClass(value.trim().split(/\\s+/));\n    } else {\n      this.setClass(normalize$1(value));\n    }\n  },\n\n  setClass: function setClass(value) {\n    this.cleanup(value);\n    for (var i = 0, l = value.length; i < l; i++) {\n      var val = value[i];\n      if (val) {\n        apply(this.el, val, addClass);\n      }\n    }\n    this.prevKeys = value;\n  },\n\n  cleanup: function cleanup(value) {\n    var prevKeys = this.prevKeys;\n    if (!prevKeys) return;\n    var i = prevKeys.length;\n    while (i--) {\n      var key = prevKeys[i];\n      if (!value || value.indexOf(key) < 0) {\n        apply(this.el, key, removeClass);\n      }\n    }\n  }\n};\n\n/**\n * Normalize objects and arrays (potentially containing objects)\n * into array of strings.\n *\n * @param {Object|Array<String|Object>} value\n * @return {Array<String>}\n */\n\nfunction normalize$1(value) {\n  var res = [];\n  if (isArray(value)) {\n    for (var i = 0, l = value.length; i < l; i++) {\n      var _key = value[i];\n      if (_key) {\n        if (typeof _key === 'string') {\n          res.push(_key);\n        } else {\n          for (var k in _key) {\n            if (_key[k]) res.push(k);\n          }\n        }\n      }\n    }\n  } else if (isObject(value)) {\n    for (var key in value) {\n      if (value[key]) res.push(key);\n    }\n  }\n  return res;\n}\n\n/**\n * Add or remove a class/classes on an element\n *\n * @param {Element} el\n * @param {String} key The class name. This may or may not\n *                     contain a space character, in such a\n *                     case we'll deal with multiple class\n *                     names at once.\n * @param {Function} fn\n */\n\nfunction apply(el, key, fn) {\n  key = key.trim();\n  if (key.indexOf(' ') === -1) {\n    fn(el, key);\n    return;\n  }\n  // The key contains one or more space characters.\n  // Since a class name doesn't accept such characters, we\n  // treat it as multiple classes.\n  var keys = key.split(/\\s+/);\n  for (var i = 0, l = keys.length; i < l; i++) {\n    fn(el, keys[i]);\n  }\n}\n\nvar component = {\n\n  priority: COMPONENT,\n\n  params: ['keep-alive', 'transition-mode', 'inline-template'],\n\n  /**\n   * Setup. Two possible usages:\n   *\n   * - static:\n   *   <comp> or <div v-component=\"comp\">\n   *\n   * - dynamic:\n   *   <component :is=\"view\">\n   */\n\n  bind: function bind() {\n    if (!this.el.__vue__) {\n      // keep-alive cache\n      this.keepAlive = this.params.keepAlive;\n      if (this.keepAlive) {\n        this.cache = {};\n      }\n      // check inline-template\n      if (this.params.inlineTemplate) {\n        // extract inline template as a DocumentFragment\n        this.inlineTemplate = extractContent(this.el, true);\n      }\n      // component resolution related state\n      this.pendingComponentCb = this.Component = null;\n      // transition related state\n      this.pendingRemovals = 0;\n      this.pendingRemovalCb = null;\n      // create a ref anchor\n      this.anchor = createAnchor('v-component');\n      replace(this.el, this.anchor);\n      // remove is attribute.\n      // this is removed during compilation, but because compilation is\n      // cached, when the component is used elsewhere this attribute\n      // will remain at link time.\n      this.el.removeAttribute('is');\n      this.el.removeAttribute(':is');\n      // remove ref, same as above\n      if (this.descriptor.ref) {\n        this.el.removeAttribute('v-ref:' + hyphenate(this.descriptor.ref));\n      }\n      // if static, build right now.\n      if (this.literal) {\n        this.setComponent(this.expression);\n      }\n    } else {\n      process.env.NODE_ENV !== 'production' && warn('cannot mount component \"' + this.expression + '\" ' + 'on already mounted element: ' + this.el);\n    }\n  },\n\n  /**\n   * Public update, called by the watcher in the dynamic\n   * literal scenario, e.g. <component :is=\"view\">\n   */\n\n  update: function update(value) {\n    if (!this.literal) {\n      this.setComponent(value);\n    }\n  },\n\n  /**\n   * Switch dynamic components. May resolve the component\n   * asynchronously, and perform transition based on\n   * specified transition mode. Accepts a few additional\n   * arguments specifically for vue-router.\n   *\n   * The callback is called when the full transition is\n   * finished.\n   *\n   * @param {String} value\n   * @param {Function} [cb]\n   */\n\n  setComponent: function setComponent(value, cb) {\n    this.invalidatePending();\n    if (!value) {\n      // just remove current\n      this.unbuild(true);\n      this.remove(this.childVM, cb);\n      this.childVM = null;\n    } else {\n      var self = this;\n      this.resolveComponent(value, function () {\n        self.mountComponent(cb);\n      });\n    }\n  },\n\n  /**\n   * Resolve the component constructor to use when creating\n   * the child vm.\n   *\n   * @param {String|Function} value\n   * @param {Function} cb\n   */\n\n  resolveComponent: function resolveComponent(value, cb) {\n    var self = this;\n    this.pendingComponentCb = cancellable(function (Component) {\n      self.ComponentName = Component.options.name || (typeof value === 'string' ? value : null);\n      self.Component = Component;\n      cb();\n    });\n    this.vm._resolveComponent(value, this.pendingComponentCb);\n  },\n\n  /**\n   * Create a new instance using the current constructor and\n   * replace the existing instance. This method doesn't care\n   * whether the new component and the old one are actually\n   * the same.\n   *\n   * @param {Function} [cb]\n   */\n\n  mountComponent: function mountComponent(cb) {\n    // actual mount\n    this.unbuild(true);\n    var self = this;\n    var activateHooks = this.Component.options.activate;\n    var cached = this.getCached();\n    var newComponent = this.build();\n    if (activateHooks && !cached) {\n      this.waitingFor = newComponent;\n      callActivateHooks(activateHooks, newComponent, function () {\n        if (self.waitingFor !== newComponent) {\n          return;\n        }\n        self.waitingFor = null;\n        self.transition(newComponent, cb);\n      });\n    } else {\n      // update ref for kept-alive component\n      if (cached) {\n        newComponent._updateRef();\n      }\n      this.transition(newComponent, cb);\n    }\n  },\n\n  /**\n   * When the component changes or unbinds before an async\n   * constructor is resolved, we need to invalidate its\n   * pending callback.\n   */\n\n  invalidatePending: function invalidatePending() {\n    if (this.pendingComponentCb) {\n      this.pendingComponentCb.cancel();\n      this.pendingComponentCb = null;\n    }\n  },\n\n  /**\n   * Instantiate/insert a new child vm.\n   * If keep alive and has cached instance, insert that\n   * instance; otherwise build a new one and cache it.\n   *\n   * @param {Object} [extraOptions]\n   * @return {Vue} - the created instance\n   */\n\n  build: function build(extraOptions) {\n    var cached = this.getCached();\n    if (cached) {\n      return cached;\n    }\n    if (this.Component) {\n      // default options\n      var options = {\n        name: this.ComponentName,\n        el: cloneNode(this.el),\n        template: this.inlineTemplate,\n        // make sure to add the child with correct parent\n        // if this is a transcluded component, its parent\n        // should be the transclusion host.\n        parent: this._host || this.vm,\n        // if no inline-template, then the compiled\n        // linker can be cached for better performance.\n        _linkerCachable: !this.inlineTemplate,\n        _ref: this.descriptor.ref,\n        _asComponent: true,\n        _isRouterView: this._isRouterView,\n        // if this is a transcluded component, context\n        // will be the common parent vm of this instance\n        // and its host.\n        _context: this.vm,\n        // if this is inside an inline v-for, the scope\n        // will be the intermediate scope created for this\n        // repeat fragment. this is used for linking props\n        // and container directives.\n        _scope: this._scope,\n        // pass in the owner fragment of this component.\n        // this is necessary so that the fragment can keep\n        // track of its contained components in order to\n        // call attach/detach hooks for them.\n        _frag: this._frag\n      };\n      // extra options\n      // in 1.0.0 this is used by vue-router only\n      /* istanbul ignore if */\n      if (extraOptions) {\n        extend(options, extraOptions);\n      }\n      var child = new this.Component(options);\n      if (this.keepAlive) {\n        this.cache[this.Component.cid] = child;\n      }\n      /* istanbul ignore if */\n      if (process.env.NODE_ENV !== 'production' && this.el.hasAttribute('transition') && child._isFragment) {\n        warn('Transitions will not work on a fragment instance. ' + 'Template: ' + child.$options.template, child);\n      }\n      return child;\n    }\n  },\n\n  /**\n   * Try to get a cached instance of the current component.\n   *\n   * @return {Vue|undefined}\n   */\n\n  getCached: function getCached() {\n    return this.keepAlive && this.cache[this.Component.cid];\n  },\n\n  /**\n   * Teardown the current child, but defers cleanup so\n   * that we can separate the destroy and removal steps.\n   *\n   * @param {Boolean} defer\n   */\n\n  unbuild: function unbuild(defer) {\n    if (this.waitingFor) {\n      if (!this.keepAlive) {\n        this.waitingFor.$destroy();\n      }\n      this.waitingFor = null;\n    }\n    var child = this.childVM;\n    if (!child || this.keepAlive) {\n      if (child) {\n        // remove ref\n        child._inactive = true;\n        child._updateRef(true);\n      }\n      return;\n    }\n    // the sole purpose of `deferCleanup` is so that we can\n    // \"deactivate\" the vm right now and perform DOM removal\n    // later.\n    child.$destroy(false, defer);\n  },\n\n  /**\n   * Remove current destroyed child and manually do\n   * the cleanup after removal.\n   *\n   * @param {Function} cb\n   */\n\n  remove: function remove(child, cb) {\n    var keepAlive = this.keepAlive;\n    if (child) {\n      // we may have a component switch when a previous\n      // component is still being transitioned out.\n      // we want to trigger only one lastest insertion cb\n      // when the existing transition finishes. (#1119)\n      this.pendingRemovals++;\n      this.pendingRemovalCb = cb;\n      var self = this;\n      child.$remove(function () {\n        self.pendingRemovals--;\n        if (!keepAlive) child._cleanup();\n        if (!self.pendingRemovals && self.pendingRemovalCb) {\n          self.pendingRemovalCb();\n          self.pendingRemovalCb = null;\n        }\n      });\n    } else if (cb) {\n      cb();\n    }\n  },\n\n  /**\n   * Actually swap the components, depending on the\n   * transition mode. Defaults to simultaneous.\n   *\n   * @param {Vue} target\n   * @param {Function} [cb]\n   */\n\n  transition: function transition(target, cb) {\n    var self = this;\n    var current = this.childVM;\n    // for devtool inspection\n    if (current) current._inactive = true;\n    target._inactive = false;\n    this.childVM = target;\n    switch (self.params.transitionMode) {\n      case 'in-out':\n        target.$before(self.anchor, function () {\n          self.remove(current, cb);\n        });\n        break;\n      case 'out-in':\n        self.remove(current, function () {\n          target.$before(self.anchor, cb);\n        });\n        break;\n      default:\n        self.remove(current);\n        target.$before(self.anchor, cb);\n    }\n  },\n\n  /**\n   * Unbind.\n   */\n\n  unbind: function unbind() {\n    this.invalidatePending();\n    // Do not defer cleanup when unbinding\n    this.unbuild();\n    // destroy all keep-alive cached instances\n    if (this.cache) {\n      for (var key in this.cache) {\n        this.cache[key].$destroy();\n      }\n      this.cache = null;\n    }\n  }\n};\n\n/**\n * Call activate hooks in order (asynchronous)\n *\n * @param {Array} hooks\n * @param {Vue} vm\n * @param {Function} cb\n */\n\nfunction callActivateHooks(hooks, vm, cb) {\n  var total = hooks.length;\n  var called = 0;\n  hooks[0].call(vm, next);\n  function next() {\n    if (++called >= total) {\n      cb();\n    } else {\n      hooks[called].call(vm, next);\n    }\n  }\n}\n\nvar propBindingModes = config._propBindingModes;\nvar empty = {};\n\n// regexes\nvar identRE$1 = /^[$_a-zA-Z]+[\\w$]*$/;\nvar settablePathRE = /^[A-Za-z_$][\\w$]*(\\.[A-Za-z_$][\\w$]*|\\[[^\\[\\]]+\\])*$/;\n\n/**\n * Compile props on a root element and return\n * a props link function.\n *\n * @param {Element|DocumentFragment} el\n * @param {Array} propOptions\n * @param {Vue} vm\n * @return {Function} propsLinkFn\n */\n\nfunction compileProps(el, propOptions, vm) {\n  var props = [];\n  var propsData = vm.$options.propsData;\n  var names = Object.keys(propOptions);\n  var i = names.length;\n  var options, name, attr, value, path, parsed, prop;\n  while (i--) {\n    name = names[i];\n    options = propOptions[name] || empty;\n\n    if (process.env.NODE_ENV !== 'production' && name === '$data') {\n      warn('Do not use $data as prop.', vm);\n      continue;\n    }\n\n    // props could contain dashes, which will be\n    // interpreted as minus calculations by the parser\n    // so we need to camelize the path here\n    path = camelize(name);\n    if (!identRE$1.test(path)) {\n      process.env.NODE_ENV !== 'production' && warn('Invalid prop key: \"' + name + '\". Prop keys ' + 'must be valid identifiers.', vm);\n      continue;\n    }\n\n    prop = {\n      name: name,\n      path: path,\n      options: options,\n      mode: propBindingModes.ONE_WAY,\n      raw: null\n    };\n\n    attr = hyphenate(name);\n    // first check dynamic version\n    if ((value = getBindAttr(el, attr)) === null) {\n      if ((value = getBindAttr(el, attr + '.sync')) !== null) {\n        prop.mode = propBindingModes.TWO_WAY;\n      } else if ((value = getBindAttr(el, attr + '.once')) !== null) {\n        prop.mode = propBindingModes.ONE_TIME;\n      }\n    }\n    if (value !== null) {\n      // has dynamic binding!\n      prop.raw = value;\n      parsed = parseDirective(value);\n      value = parsed.expression;\n      prop.filters = parsed.filters;\n      // check binding type\n      if (isLiteral(value) && !parsed.filters) {\n        // for expressions containing literal numbers and\n        // booleans, there's no need to setup a prop binding,\n        // so we can optimize them as a one-time set.\n        prop.optimizedLiteral = true;\n      } else {\n        prop.dynamic = true;\n        // check non-settable path for two-way bindings\n        if (process.env.NODE_ENV !== 'production' && prop.mode === propBindingModes.TWO_WAY && !settablePathRE.test(value)) {\n          prop.mode = propBindingModes.ONE_WAY;\n          warn('Cannot bind two-way prop with non-settable ' + 'parent path: ' + value, vm);\n        }\n      }\n      prop.parentPath = value;\n\n      // warn required two-way\n      if (process.env.NODE_ENV !== 'production' && options.twoWay && prop.mode !== propBindingModes.TWO_WAY) {\n        warn('Prop \"' + name + '\" expects a two-way binding type.', vm);\n      }\n    } else if ((value = getAttr(el, attr)) !== null) {\n      // has literal binding!\n      prop.raw = value;\n    } else if (propsData && (value = propsData[name] || propsData[path]) !== null) {\n      // has propsData\n      prop.raw = value;\n    } else if (process.env.NODE_ENV !== 'production') {\n      // check possible camelCase prop usage\n      var lowerCaseName = path.toLowerCase();\n      value = /[A-Z\\-]/.test(name) && (el.getAttribute(lowerCaseName) || el.getAttribute(':' + lowerCaseName) || el.getAttribute('v-bind:' + lowerCaseName) || el.getAttribute(':' + lowerCaseName + '.once') || el.getAttribute('v-bind:' + lowerCaseName + '.once') || el.getAttribute(':' + lowerCaseName + '.sync') || el.getAttribute('v-bind:' + lowerCaseName + '.sync'));\n      if (value) {\n        warn('Possible usage error for prop `' + lowerCaseName + '` - ' + 'did you mean `' + attr + '`? HTML is case-insensitive, remember to use ' + 'kebab-case for props in templates.', vm);\n      } else if (options.required && (!propsData || !(name in propsData) && !(path in propsData))) {\n        // warn missing required\n        warn('Missing required prop: ' + name, vm);\n      }\n    }\n    // push prop\n    props.push(prop);\n  }\n  return makePropsLinkFn(props);\n}\n\n/**\n * Build a function that applies props to a vm.\n *\n * @param {Array} props\n * @return {Function} propsLinkFn\n */\n\nfunction makePropsLinkFn(props) {\n  return function propsLinkFn(vm, scope) {\n    // store resolved props info\n    vm._props = {};\n    var inlineProps = vm.$options.propsData;\n    var i = props.length;\n    var prop, path, options, value, raw;\n    while (i--) {\n      prop = props[i];\n      raw = prop.raw;\n      path = prop.path;\n      options = prop.options;\n      vm._props[path] = prop;\n      if (inlineProps && hasOwn(inlineProps, path)) {\n        initProp(vm, prop, inlineProps[path]);\n      }if (raw === null) {\n        // initialize absent prop\n        initProp(vm, prop, undefined);\n      } else if (prop.dynamic) {\n        // dynamic prop\n        if (prop.mode === propBindingModes.ONE_TIME) {\n          // one time binding\n          value = (scope || vm._context || vm).$get(prop.parentPath);\n          initProp(vm, prop, value);\n        } else {\n          if (vm._context) {\n            // dynamic binding\n            vm._bindDir({\n              name: 'prop',\n              def: propDef,\n              prop: prop\n            }, null, null, scope); // el, host, scope\n          } else {\n              // root instance\n              initProp(vm, prop, vm.$get(prop.parentPath));\n            }\n        }\n      } else if (prop.optimizedLiteral) {\n        // optimized literal, cast it and just set once\n        var stripped = stripQuotes(raw);\n        value = stripped === raw ? toBoolean(toNumber(raw)) : stripped;\n        initProp(vm, prop, value);\n      } else {\n        // string literal, but we need to cater for\n        // Boolean props with no value, or with same\n        // literal value (e.g. disabled=\"disabled\")\n        // see https://github.com/vuejs/vue-loader/issues/182\n        value = options.type === Boolean && (raw === '' || raw === hyphenate(prop.name)) ? true : raw;\n        initProp(vm, prop, value);\n      }\n    }\n  };\n}\n\n/**\n * Process a prop with a rawValue, applying necessary coersions,\n * default values & assertions and call the given callback with\n * processed value.\n *\n * @param {Vue} vm\n * @param {Object} prop\n * @param {*} rawValue\n * @param {Function} fn\n */\n\nfunction processPropValue(vm, prop, rawValue, fn) {\n  var isSimple = prop.dynamic && isSimplePath(prop.parentPath);\n  var value = rawValue;\n  if (value === undefined) {\n    value = getPropDefaultValue(vm, prop);\n  }\n  value = coerceProp(prop, value, vm);\n  var coerced = value !== rawValue;\n  if (!assertProp(prop, value, vm)) {\n    value = undefined;\n  }\n  if (isSimple && !coerced) {\n    withoutConversion(function () {\n      fn(value);\n    });\n  } else {\n    fn(value);\n  }\n}\n\n/**\n * Set a prop's initial value on a vm and its data object.\n *\n * @param {Vue} vm\n * @param {Object} prop\n * @param {*} value\n */\n\nfunction initProp(vm, prop, value) {\n  processPropValue(vm, prop, value, function (value) {\n    defineReactive(vm, prop.path, value);\n  });\n}\n\n/**\n * Update a prop's value on a vm.\n *\n * @param {Vue} vm\n * @param {Object} prop\n * @param {*} value\n */\n\nfunction updateProp(vm, prop, value) {\n  processPropValue(vm, prop, value, function (value) {\n    vm[prop.path] = value;\n  });\n}\n\n/**\n * Get the default value of a prop.\n *\n * @param {Vue} vm\n * @param {Object} prop\n * @return {*}\n */\n\nfunction getPropDefaultValue(vm, prop) {\n  // no default, return undefined\n  var options = prop.options;\n  if (!hasOwn(options, 'default')) {\n    // absent boolean value defaults to false\n    return options.type === Boolean ? false : undefined;\n  }\n  var def = options['default'];\n  // warn against non-factory defaults for Object & Array\n  if (isObject(def)) {\n    process.env.NODE_ENV !== 'production' && warn('Invalid default value for prop \"' + prop.name + '\": ' + 'Props with type Object/Array must use a factory function ' + 'to return the default value.', vm);\n  }\n  // call factory function for non-Function types\n  return typeof def === 'function' && options.type !== Function ? def.call(vm) : def;\n}\n\n/**\n * Assert whether a prop is valid.\n *\n * @param {Object} prop\n * @param {*} value\n * @param {Vue} vm\n */\n\nfunction assertProp(prop, value, vm) {\n  if (!prop.options.required && ( // non-required\n  prop.raw === null || // abscent\n  value == null) // null or undefined\n  ) {\n      return true;\n    }\n  var options = prop.options;\n  var type = options.type;\n  var valid = !type;\n  var expectedTypes = [];\n  if (type) {\n    if (!isArray(type)) {\n      type = [type];\n    }\n    for (var i = 0; i < type.length && !valid; i++) {\n      var assertedType = assertType(value, type[i]);\n      expectedTypes.push(assertedType.expectedType);\n      valid = assertedType.valid;\n    }\n  }\n  if (!valid) {\n    if (process.env.NODE_ENV !== 'production') {\n      warn('Invalid prop: type check failed for prop \"' + prop.name + '\".' + ' Expected ' + expectedTypes.map(formatType).join(', ') + ', got ' + formatValue(value) + '.', vm);\n    }\n    return false;\n  }\n  var validator = options.validator;\n  if (validator) {\n    if (!validator(value)) {\n      process.env.NODE_ENV !== 'production' && warn('Invalid prop: custom validator check failed for prop \"' + prop.name + '\".', vm);\n      return false;\n    }\n  }\n  return true;\n}\n\n/**\n * Force parsing value with coerce option.\n *\n * @param {*} value\n * @param {Object} options\n * @return {*}\n */\n\nfunction coerceProp(prop, value, vm) {\n  var coerce = prop.options.coerce;\n  if (!coerce) {\n    return value;\n  }\n  if (typeof coerce === 'function') {\n    return coerce(value);\n  } else {\n    process.env.NODE_ENV !== 'production' && warn('Invalid coerce for prop \"' + prop.name + '\": expected function, got ' + typeof coerce + '.', vm);\n    return value;\n  }\n}\n\n/**\n * Assert the type of a value\n *\n * @param {*} value\n * @param {Function} type\n * @return {Object}\n */\n\nfunction assertType(value, type) {\n  var valid;\n  var expectedType;\n  if (type === String) {\n    expectedType = 'string';\n    valid = typeof value === expectedType;\n  } else if (type === Number) {\n    expectedType = 'number';\n    valid = typeof value === expectedType;\n  } else if (type === Boolean) {\n    expectedType = 'boolean';\n    valid = typeof value === expectedType;\n  } else if (type === Function) {\n    expectedType = 'function';\n    valid = typeof value === expectedType;\n  } else if (type === Object) {\n    expectedType = 'object';\n    valid = isPlainObject(value);\n  } else if (type === Array) {\n    expectedType = 'array';\n    valid = isArray(value);\n  } else {\n    valid = value instanceof type;\n  }\n  return {\n    valid: valid,\n    expectedType: expectedType\n  };\n}\n\n/**\n * Format type for output\n *\n * @param {String} type\n * @return {String}\n */\n\nfunction formatType(type) {\n  return type ? type.charAt(0).toUpperCase() + type.slice(1) : 'custom type';\n}\n\n/**\n * Format value\n *\n * @param {*} value\n * @return {String}\n */\n\nfunction formatValue(val) {\n  return Object.prototype.toString.call(val).slice(8, -1);\n}\n\nvar bindingModes = config._propBindingModes;\n\nvar propDef = {\n\n  bind: function bind() {\n    var child = this.vm;\n    var parent = child._context;\n    // passed in from compiler directly\n    var prop = this.descriptor.prop;\n    var childKey = prop.path;\n    var parentKey = prop.parentPath;\n    var twoWay = prop.mode === bindingModes.TWO_WAY;\n\n    var parentWatcher = this.parentWatcher = new Watcher(parent, parentKey, function (val) {\n      updateProp(child, prop, val);\n    }, {\n      twoWay: twoWay,\n      filters: prop.filters,\n      // important: props need to be observed on the\n      // v-for scope if present\n      scope: this._scope\n    });\n\n    // set the child initial value.\n    initProp(child, prop, parentWatcher.value);\n\n    // setup two-way binding\n    if (twoWay) {\n      // important: defer the child watcher creation until\n      // the created hook (after data observation)\n      var self = this;\n      child.$once('pre-hook:created', function () {\n        self.childWatcher = new Watcher(child, childKey, function (val) {\n          parentWatcher.set(val);\n        }, {\n          // ensure sync upward before parent sync down.\n          // this is necessary in cases e.g. the child\n          // mutates a prop array, then replaces it. (#1683)\n          sync: true\n        });\n      });\n    }\n  },\n\n  unbind: function unbind() {\n    this.parentWatcher.teardown();\n    if (this.childWatcher) {\n      this.childWatcher.teardown();\n    }\n  }\n};\n\nvar queue$1 = [];\nvar queued = false;\n\n/**\n * Push a job into the queue.\n *\n * @param {Function} job\n */\n\nfunction pushJob(job) {\n  queue$1.push(job);\n  if (!queued) {\n    queued = true;\n    nextTick(flush);\n  }\n}\n\n/**\n * Flush the queue, and do one forced reflow before\n * triggering transitions.\n */\n\nfunction flush() {\n  // Force layout\n  var f = document.documentElement.offsetHeight;\n  for (var i = 0; i < queue$1.length; i++) {\n    queue$1[i]();\n  }\n  queue$1 = [];\n  queued = false;\n  // dummy return, so js linters don't complain about\n  // unused variable f\n  return f;\n}\n\nvar TYPE_TRANSITION = 'transition';\nvar TYPE_ANIMATION = 'animation';\nvar transDurationProp = transitionProp + 'Duration';\nvar animDurationProp = animationProp + 'Duration';\n\n/**\n * If a just-entered element is applied the\n * leave class while its enter transition hasn't started yet,\n * and the transitioned property has the same value for both\n * enter/leave, then the leave transition will be skipped and\n * the transitionend event never fires. This function ensures\n * its callback to be called after a transition has started\n * by waiting for double raf.\n *\n * It falls back to setTimeout on devices that support CSS\n * transitions but not raf (e.g. Android 4.2 browser) - since\n * these environments are usually slow, we are giving it a\n * relatively large timeout.\n */\n\nvar raf = inBrowser && window.requestAnimationFrame;\nvar waitForTransitionStart = raf\n/* istanbul ignore next */\n? function (fn) {\n  raf(function () {\n    raf(fn);\n  });\n} : function (fn) {\n  setTimeout(fn, 50);\n};\n\n/**\n * A Transition object that encapsulates the state and logic\n * of the transition.\n *\n * @param {Element} el\n * @param {String} id\n * @param {Object} hooks\n * @param {Vue} vm\n */\nfunction Transition(el, id, hooks, vm) {\n  this.id = id;\n  this.el = el;\n  this.enterClass = hooks && hooks.enterClass || id + '-enter';\n  this.leaveClass = hooks && hooks.leaveClass || id + '-leave';\n  this.hooks = hooks;\n  this.vm = vm;\n  // async state\n  this.pendingCssEvent = this.pendingCssCb = this.cancel = this.pendingJsCb = this.op = this.cb = null;\n  this.justEntered = false;\n  this.entered = this.left = false;\n  this.typeCache = {};\n  // check css transition type\n  this.type = hooks && hooks.type;\n  /* istanbul ignore if */\n  if (process.env.NODE_ENV !== 'production') {\n    if (this.type && this.type !== TYPE_TRANSITION && this.type !== TYPE_ANIMATION) {\n      warn('invalid CSS transition type for transition=\"' + this.id + '\": ' + this.type, vm);\n    }\n  }\n  // bind\n  var self = this;['enterNextTick', 'enterDone', 'leaveNextTick', 'leaveDone'].forEach(function (m) {\n    self[m] = bind(self[m], self);\n  });\n}\n\nvar p$1 = Transition.prototype;\n\n/**\n * Start an entering transition.\n *\n * 1. enter transition triggered\n * 2. call beforeEnter hook\n * 3. add enter class\n * 4. insert/show element\n * 5. call enter hook (with possible explicit js callback)\n * 6. reflow\n * 7. based on transition type:\n *    - transition:\n *        remove class now, wait for transitionend,\n *        then done if there's no explicit js callback.\n *    - animation:\n *        wait for animationend, remove class,\n *        then done if there's no explicit js callback.\n *    - no css transition:\n *        done now if there's no explicit js callback.\n * 8. wait for either done or js callback, then call\n *    afterEnter hook.\n *\n * @param {Function} op - insert/show the element\n * @param {Function} [cb]\n */\n\np$1.enter = function (op, cb) {\n  this.cancelPending();\n  this.callHook('beforeEnter');\n  this.cb = cb;\n  addClass(this.el, this.enterClass);\n  op();\n  this.entered = false;\n  this.callHookWithCb('enter');\n  if (this.entered) {\n    return; // user called done synchronously.\n  }\n  this.cancel = this.hooks && this.hooks.enterCancelled;\n  pushJob(this.enterNextTick);\n};\n\n/**\n * The \"nextTick\" phase of an entering transition, which is\n * to be pushed into a queue and executed after a reflow so\n * that removing the class can trigger a CSS transition.\n */\n\np$1.enterNextTick = function () {\n  var _this = this;\n\n  // prevent transition skipping\n  this.justEntered = true;\n  waitForTransitionStart(function () {\n    _this.justEntered = false;\n  });\n  var enterDone = this.enterDone;\n  var type = this.getCssTransitionType(this.enterClass);\n  if (!this.pendingJsCb) {\n    if (type === TYPE_TRANSITION) {\n      // trigger transition by removing enter class now\n      removeClass(this.el, this.enterClass);\n      this.setupCssCb(transitionEndEvent, enterDone);\n    } else if (type === TYPE_ANIMATION) {\n      this.setupCssCb(animationEndEvent, enterDone);\n    } else {\n      enterDone();\n    }\n  } else if (type === TYPE_TRANSITION) {\n    removeClass(this.el, this.enterClass);\n  }\n};\n\n/**\n * The \"cleanup\" phase of an entering transition.\n */\n\np$1.enterDone = function () {\n  this.entered = true;\n  this.cancel = this.pendingJsCb = null;\n  removeClass(this.el, this.enterClass);\n  this.callHook('afterEnter');\n  if (this.cb) this.cb();\n};\n\n/**\n * Start a leaving transition.\n *\n * 1. leave transition triggered.\n * 2. call beforeLeave hook\n * 3. add leave class (trigger css transition)\n * 4. call leave hook (with possible explicit js callback)\n * 5. reflow if no explicit js callback is provided\n * 6. based on transition type:\n *    - transition or animation:\n *        wait for end event, remove class, then done if\n *        there's no explicit js callback.\n *    - no css transition:\n *        done if there's no explicit js callback.\n * 7. wait for either done or js callback, then call\n *    afterLeave hook.\n *\n * @param {Function} op - remove/hide the element\n * @param {Function} [cb]\n */\n\np$1.leave = function (op, cb) {\n  this.cancelPending();\n  this.callHook('beforeLeave');\n  this.op = op;\n  this.cb = cb;\n  addClass(this.el, this.leaveClass);\n  this.left = false;\n  this.callHookWithCb('leave');\n  if (this.left) {\n    return; // user called done synchronously.\n  }\n  this.cancel = this.hooks && this.hooks.leaveCancelled;\n  // only need to handle leaveDone if\n  // 1. the transition is already done (synchronously called\n  //    by the user, which causes this.op set to null)\n  // 2. there's no explicit js callback\n  if (this.op && !this.pendingJsCb) {\n    // if a CSS transition leaves immediately after enter,\n    // the transitionend event never fires. therefore we\n    // detect such cases and end the leave immediately.\n    if (this.justEntered) {\n      this.leaveDone();\n    } else {\n      pushJob(this.leaveNextTick);\n    }\n  }\n};\n\n/**\n * The \"nextTick\" phase of a leaving transition.\n */\n\np$1.leaveNextTick = function () {\n  var type = this.getCssTransitionType(this.leaveClass);\n  if (type) {\n    var event = type === TYPE_TRANSITION ? transitionEndEvent : animationEndEvent;\n    this.setupCssCb(event, this.leaveDone);\n  } else {\n    this.leaveDone();\n  }\n};\n\n/**\n * The \"cleanup\" phase of a leaving transition.\n */\n\np$1.leaveDone = function () {\n  this.left = true;\n  this.cancel = this.pendingJsCb = null;\n  this.op();\n  removeClass(this.el, this.leaveClass);\n  this.callHook('afterLeave');\n  if (this.cb) this.cb();\n  this.op = null;\n};\n\n/**\n * Cancel any pending callbacks from a previously running\n * but not finished transition.\n */\n\np$1.cancelPending = function () {\n  this.op = this.cb = null;\n  var hasPending = false;\n  if (this.pendingCssCb) {\n    hasPending = true;\n    off(this.el, this.pendingCssEvent, this.pendingCssCb);\n    this.pendingCssEvent = this.pendingCssCb = null;\n  }\n  if (this.pendingJsCb) {\n    hasPending = true;\n    this.pendingJsCb.cancel();\n    this.pendingJsCb = null;\n  }\n  if (hasPending) {\n    removeClass(this.el, this.enterClass);\n    removeClass(this.el, this.leaveClass);\n  }\n  if (this.cancel) {\n    this.cancel.call(this.vm, this.el);\n    this.cancel = null;\n  }\n};\n\n/**\n * Call a user-provided synchronous hook function.\n *\n * @param {String} type\n */\n\np$1.callHook = function (type) {\n  if (this.hooks && this.hooks[type]) {\n    this.hooks[type].call(this.vm, this.el);\n  }\n};\n\n/**\n * Call a user-provided, potentially-async hook function.\n * We check for the length of arguments to see if the hook\n * expects a `done` callback. If true, the transition's end\n * will be determined by when the user calls that callback;\n * otherwise, the end is determined by the CSS transition or\n * animation.\n *\n * @param {String} type\n */\n\np$1.callHookWithCb = function (type) {\n  var hook = this.hooks && this.hooks[type];\n  if (hook) {\n    if (hook.length > 1) {\n      this.pendingJsCb = cancellable(this[type + 'Done']);\n    }\n    hook.call(this.vm, this.el, this.pendingJsCb);\n  }\n};\n\n/**\n * Get an element's transition type based on the\n * calculated styles.\n *\n * @param {String} className\n * @return {Number}\n */\n\np$1.getCssTransitionType = function (className) {\n  /* istanbul ignore if */\n  if (!transitionEndEvent ||\n  // skip CSS transitions if page is not visible -\n  // this solves the issue of transitionend events not\n  // firing until the page is visible again.\n  // pageVisibility API is supported in IE10+, same as\n  // CSS transitions.\n  document.hidden ||\n  // explicit js-only transition\n  this.hooks && this.hooks.css === false ||\n  // element is hidden\n  isHidden(this.el)) {\n    return;\n  }\n  var type = this.type || this.typeCache[className];\n  if (type) return type;\n  var inlineStyles = this.el.style;\n  var computedStyles = window.getComputedStyle(this.el);\n  var transDuration = inlineStyles[transDurationProp] || computedStyles[transDurationProp];\n  if (transDuration && transDuration !== '0s') {\n    type = TYPE_TRANSITION;\n  } else {\n    var animDuration = inlineStyles[animDurationProp] || computedStyles[animDurationProp];\n    if (animDuration && animDuration !== '0s') {\n      type = TYPE_ANIMATION;\n    }\n  }\n  if (type) {\n    this.typeCache[className] = type;\n  }\n  return type;\n};\n\n/**\n * Setup a CSS transitionend/animationend callback.\n *\n * @param {String} event\n * @param {Function} cb\n */\n\np$1.setupCssCb = function (event, cb) {\n  this.pendingCssEvent = event;\n  var self = this;\n  var el = this.el;\n  var onEnd = this.pendingCssCb = function (e) {\n    if (e.target === el) {\n      off(el, event, onEnd);\n      self.pendingCssEvent = self.pendingCssCb = null;\n      if (!self.pendingJsCb && cb) {\n        cb();\n      }\n    }\n  };\n  on(el, event, onEnd);\n};\n\n/**\n * Check if an element is hidden - in that case we can just\n * skip the transition alltogether.\n *\n * @param {Element} el\n * @return {Boolean}\n */\n\nfunction isHidden(el) {\n  if (/svg$/.test(el.namespaceURI)) {\n    // SVG elements do not have offset(Width|Height)\n    // so we need to check the client rect\n    var rect = el.getBoundingClientRect();\n    return !(rect.width || rect.height);\n  } else {\n    return !(el.offsetWidth || el.offsetHeight || el.getClientRects().length);\n  }\n}\n\nvar transition$1 = {\n\n  priority: TRANSITION,\n\n  update: function update(id, oldId) {\n    var el = this.el;\n    // resolve on owner vm\n    var hooks = resolveAsset(this.vm.$options, 'transitions', id);\n    id = id || 'v';\n    oldId = oldId || 'v';\n    el.__v_trans = new Transition(el, id, hooks, this.vm);\n    removeClass(el, oldId + '-transition');\n    addClass(el, id + '-transition');\n  }\n};\n\nvar internalDirectives = {\n  style: style,\n  'class': vClass,\n  component: component,\n  prop: propDef,\n  transition: transition$1\n};\n\n// special binding prefixes\nvar bindRE = /^v-bind:|^:/;\nvar onRE = /^v-on:|^@/;\nvar dirAttrRE = /^v-([^:]+)(?:$|:(.*)$)/;\nvar modifierRE = /\\.[^\\.]+/g;\nvar transitionRE = /^(v-bind:|:)?transition$/;\n\n// default directive priority\nvar DEFAULT_PRIORITY = 1000;\nvar DEFAULT_TERMINAL_PRIORITY = 2000;\n\n/**\n * Compile a template and return a reusable composite link\n * function, which recursively contains more link functions\n * inside. This top level compile function would normally\n * be called on instance root nodes, but can also be used\n * for partial compilation if the partial argument is true.\n *\n * The returned composite link function, when called, will\n * return an unlink function that tearsdown all directives\n * created during the linking phase.\n *\n * @param {Element|DocumentFragment} el\n * @param {Object} options\n * @param {Boolean} partial\n * @return {Function}\n */\n\nfunction compile(el, options, partial) {\n  // link function for the node itself.\n  var nodeLinkFn = partial || !options._asComponent ? compileNode(el, options) : null;\n  // link function for the childNodes\n  var childLinkFn = !(nodeLinkFn && nodeLinkFn.terminal) && !isScript(el) && el.hasChildNodes() ? compileNodeList(el.childNodes, options) : null;\n\n  /**\n   * A composite linker function to be called on a already\n   * compiled piece of DOM, which instantiates all directive\n   * instances.\n   *\n   * @param {Vue} vm\n   * @param {Element|DocumentFragment} el\n   * @param {Vue} [host] - host vm of transcluded content\n   * @param {Object} [scope] - v-for scope\n   * @param {Fragment} [frag] - link context fragment\n   * @return {Function|undefined}\n   */\n\n  return function compositeLinkFn(vm, el, host, scope, frag) {\n    // cache childNodes before linking parent, fix #657\n    var childNodes = toArray(el.childNodes);\n    // link\n    var dirs = linkAndCapture(function compositeLinkCapturer() {\n      if (nodeLinkFn) nodeLinkFn(vm, el, host, scope, frag);\n      if (childLinkFn) childLinkFn(vm, childNodes, host, scope, frag);\n    }, vm);\n    return makeUnlinkFn(vm, dirs);\n  };\n}\n\n/**\n * Apply a linker to a vm/element pair and capture the\n * directives created during the process.\n *\n * @param {Function} linker\n * @param {Vue} vm\n */\n\nfunction linkAndCapture(linker, vm) {\n  /* istanbul ignore if */\n  if (process.env.NODE_ENV === 'production') {\n    // reset directives before every capture in production\n    // mode, so that when unlinking we don't need to splice\n    // them out (which turns out to be a perf hit).\n    // they are kept in development mode because they are\n    // useful for Vue's own tests.\n    vm._directives = [];\n  }\n  var originalDirCount = vm._directives.length;\n  linker();\n  var dirs = vm._directives.slice(originalDirCount);\n  sortDirectives(dirs);\n  for (var i = 0, l = dirs.length; i < l; i++) {\n    dirs[i]._bind();\n  }\n  return dirs;\n}\n\n/**\n * sort directives by priority (stable sort)\n *\n * @param {Array} dirs\n */\nfunction sortDirectives(dirs) {\n  if (dirs.length === 0) return;\n\n  var groupedMap = {};\n  var i, j, k, l;\n  var index = 0;\n  var priorities = [];\n  for (i = 0, j = dirs.length; i < j; i++) {\n    var dir = dirs[i];\n    var priority = dir.descriptor.def.priority || DEFAULT_PRIORITY;\n    var array = groupedMap[priority];\n    if (!array) {\n      array = groupedMap[priority] = [];\n      priorities.push(priority);\n    }\n    array.push(dir);\n  }\n\n  priorities.sort(function (a, b) {\n    return a > b ? -1 : a === b ? 0 : 1;\n  });\n  for (i = 0, j = priorities.length; i < j; i++) {\n    var group = groupedMap[priorities[i]];\n    for (k = 0, l = group.length; k < l; k++) {\n      dirs[index++] = group[k];\n    }\n  }\n}\n\n/**\n * Linker functions return an unlink function that\n * tearsdown all directives instances generated during\n * the process.\n *\n * We create unlink functions with only the necessary\n * information to avoid retaining additional closures.\n *\n * @param {Vue} vm\n * @param {Array} dirs\n * @param {Vue} [context]\n * @param {Array} [contextDirs]\n * @return {Function}\n */\n\nfunction makeUnlinkFn(vm, dirs, context, contextDirs) {\n  function unlink(destroying) {\n    teardownDirs(vm, dirs, destroying);\n    if (context && contextDirs) {\n      teardownDirs(context, contextDirs);\n    }\n  }\n  // expose linked directives\n  unlink.dirs = dirs;\n  return unlink;\n}\n\n/**\n * Teardown partial linked directives.\n *\n * @param {Vue} vm\n * @param {Array} dirs\n * @param {Boolean} destroying\n */\n\nfunction teardownDirs(vm, dirs, destroying) {\n  var i = dirs.length;\n  while (i--) {\n    dirs[i]._teardown();\n    if (process.env.NODE_ENV !== 'production' && !destroying) {\n      vm._directives.$remove(dirs[i]);\n    }\n  }\n}\n\n/**\n * Compile link props on an instance.\n *\n * @param {Vue} vm\n * @param {Element} el\n * @param {Object} props\n * @param {Object} [scope]\n * @return {Function}\n */\n\nfunction compileAndLinkProps(vm, el, props, scope) {\n  var propsLinkFn = compileProps(el, props, vm);\n  var propDirs = linkAndCapture(function () {\n    propsLinkFn(vm, scope);\n  }, vm);\n  return makeUnlinkFn(vm, propDirs);\n}\n\n/**\n * Compile the root element of an instance.\n *\n * 1. attrs on context container (context scope)\n * 2. attrs on the component template root node, if\n *    replace:true (child scope)\n *\n * If this is a fragment instance, we only need to compile 1.\n *\n * @param {Element} el\n * @param {Object} options\n * @param {Object} contextOptions\n * @return {Function}\n */\n\nfunction compileRoot(el, options, contextOptions) {\n  var containerAttrs = options._containerAttrs;\n  var replacerAttrs = options._replacerAttrs;\n  var contextLinkFn, replacerLinkFn;\n\n  // only need to compile other attributes for\n  // non-fragment instances\n  if (el.nodeType !== 11) {\n    // for components, container and replacer need to be\n    // compiled separately and linked in different scopes.\n    if (options._asComponent) {\n      // 2. container attributes\n      if (containerAttrs && contextOptions) {\n        contextLinkFn = compileDirectives(containerAttrs, contextOptions);\n      }\n      if (replacerAttrs) {\n        // 3. replacer attributes\n        replacerLinkFn = compileDirectives(replacerAttrs, options);\n      }\n    } else {\n      // non-component, just compile as a normal element.\n      replacerLinkFn = compileDirectives(el.attributes, options);\n    }\n  } else if (process.env.NODE_ENV !== 'production' && containerAttrs) {\n    // warn container directives for fragment instances\n    var names = containerAttrs.filter(function (attr) {\n      // allow vue-loader/vueify scoped css attributes\n      return attr.name.indexOf('_v-') < 0 &&\n      // allow event listeners\n      !onRE.test(attr.name) &&\n      // allow slots\n      attr.name !== 'slot';\n    }).map(function (attr) {\n      return '\"' + attr.name + '\"';\n    });\n    if (names.length) {\n      var plural = names.length > 1;\n\n      var componentName = options.el.tagName.toLowerCase();\n      if (componentName === 'component' && options.name) {\n        componentName += ':' + options.name;\n      }\n\n      warn('Attribute' + (plural ? 's ' : ' ') + names.join(', ') + (plural ? ' are' : ' is') + ' ignored on component ' + '<' + componentName + '> because ' + 'the component is a fragment instance: ' + 'http://vuejs.org/guide/components.html#Fragment-Instance');\n    }\n  }\n\n  options._containerAttrs = options._replacerAttrs = null;\n  return function rootLinkFn(vm, el, scope) {\n    // link context scope dirs\n    var context = vm._context;\n    var contextDirs;\n    if (context && contextLinkFn) {\n      contextDirs = linkAndCapture(function () {\n        contextLinkFn(context, el, null, scope);\n      }, context);\n    }\n\n    // link self\n    var selfDirs = linkAndCapture(function () {\n      if (replacerLinkFn) replacerLinkFn(vm, el);\n    }, vm);\n\n    // return the unlink function that tearsdown context\n    // container directives.\n    return makeUnlinkFn(vm, selfDirs, context, contextDirs);\n  };\n}\n\n/**\n * Compile a node and return a nodeLinkFn based on the\n * node type.\n *\n * @param {Node} node\n * @param {Object} options\n * @return {Function|null}\n */\n\nfunction compileNode(node, options) {\n  var type = node.nodeType;\n  if (type === 1 && !isScript(node)) {\n    return compileElement(node, options);\n  } else if (type === 3 && node.data.trim()) {\n    return compileTextNode(node, options);\n  } else {\n    return null;\n  }\n}\n\n/**\n * Compile an element and return a nodeLinkFn.\n *\n * @param {Element} el\n * @param {Object} options\n * @return {Function|null}\n */\n\nfunction compileElement(el, options) {\n  // preprocess textareas.\n  // textarea treats its text content as the initial value.\n  // just bind it as an attr directive for value.\n  if (el.tagName === 'TEXTAREA') {\n    // a textarea which has v-pre attr should skip complie.\n    if (getAttr(el, 'v-pre') !== null) {\n      return skip;\n    }\n    var tokens = parseText(el.value);\n    if (tokens) {\n      el.setAttribute(':value', tokensToExp(tokens));\n      el.value = '';\n    }\n  }\n  var linkFn;\n  var hasAttrs = el.hasAttributes();\n  var attrs = hasAttrs && toArray(el.attributes);\n  // check terminal directives (for & if)\n  if (hasAttrs) {\n    linkFn = checkTerminalDirectives(el, attrs, options);\n  }\n  // check element directives\n  if (!linkFn) {\n    linkFn = checkElementDirectives(el, options);\n  }\n  // check component\n  if (!linkFn) {\n    linkFn = checkComponent(el, options);\n  }\n  // normal directives\n  if (!linkFn && hasAttrs) {\n    linkFn = compileDirectives(attrs, options);\n  }\n  return linkFn;\n}\n\n/**\n * Compile a textNode and return a nodeLinkFn.\n *\n * @param {TextNode} node\n * @param {Object} options\n * @return {Function|null} textNodeLinkFn\n */\n\nfunction compileTextNode(node, options) {\n  // skip marked text nodes\n  if (node._skip) {\n    return removeText;\n  }\n\n  var tokens = parseText(node.wholeText);\n  if (!tokens) {\n    return null;\n  }\n\n  // mark adjacent text nodes as skipped,\n  // because we are using node.wholeText to compile\n  // all adjacent text nodes together. This fixes\n  // issues in IE where sometimes it splits up a single\n  // text node into multiple ones.\n  var next = node.nextSibling;\n  while (next && next.nodeType === 3) {\n    next._skip = true;\n    next = next.nextSibling;\n  }\n\n  var frag = document.createDocumentFragment();\n  var el, token;\n  for (var i = 0, l = tokens.length; i < l; i++) {\n    token = tokens[i];\n    el = token.tag ? processTextToken(token, options) : document.createTextNode(token.value);\n    frag.appendChild(el);\n  }\n  return makeTextNodeLinkFn(tokens, frag, options);\n}\n\n/**\n * Linker for an skipped text node.\n *\n * @param {Vue} vm\n * @param {Text} node\n */\n\nfunction removeText(vm, node) {\n  remove(node);\n}\n\n/**\n * Process a single text token.\n *\n * @param {Object} token\n * @param {Object} options\n * @return {Node}\n */\n\nfunction processTextToken(token, options) {\n  var el;\n  if (token.oneTime) {\n    el = document.createTextNode(token.value);\n  } else {\n    if (token.html) {\n      el = document.createComment('v-html');\n      setTokenType('html');\n    } else {\n      // IE will clean up empty textNodes during\n      // frag.cloneNode(true), so we have to give it\n      // something here...\n      el = document.createTextNode(' ');\n      setTokenType('text');\n    }\n  }\n  function setTokenType(type) {\n    if (token.descriptor) return;\n    var parsed = parseDirective(token.value);\n    token.descriptor = {\n      name: type,\n      def: directives[type],\n      expression: parsed.expression,\n      filters: parsed.filters\n    };\n  }\n  return el;\n}\n\n/**\n * Build a function that processes a textNode.\n *\n * @param {Array<Object>} tokens\n * @param {DocumentFragment} frag\n */\n\nfunction makeTextNodeLinkFn(tokens, frag) {\n  return function textNodeLinkFn(vm, el, host, scope) {\n    var fragClone = frag.cloneNode(true);\n    var childNodes = toArray(fragClone.childNodes);\n    var token, value, node;\n    for (var i = 0, l = tokens.length; i < l; i++) {\n      token = tokens[i];\n      value = token.value;\n      if (token.tag) {\n        node = childNodes[i];\n        if (token.oneTime) {\n          value = (scope || vm).$eval(value);\n          if (token.html) {\n            replace(node, parseTemplate(value, true));\n          } else {\n            node.data = _toString(value);\n          }\n        } else {\n          vm._bindDir(token.descriptor, node, host, scope);\n        }\n      }\n    }\n    replace(el, fragClone);\n  };\n}\n\n/**\n * Compile a node list and return a childLinkFn.\n *\n * @param {NodeList} nodeList\n * @param {Object} options\n * @return {Function|undefined}\n */\n\nfunction compileNodeList(nodeList, options) {\n  var linkFns = [];\n  var nodeLinkFn, childLinkFn, node;\n  for (var i = 0, l = nodeList.length; i < l; i++) {\n    node = nodeList[i];\n    nodeLinkFn = compileNode(node, options);\n    childLinkFn = !(nodeLinkFn && nodeLinkFn.terminal) && node.tagName !== 'SCRIPT' && node.hasChildNodes() ? compileNodeList(node.childNodes, options) : null;\n    linkFns.push(nodeLinkFn, childLinkFn);\n  }\n  return linkFns.length ? makeChildLinkFn(linkFns) : null;\n}\n\n/**\n * Make a child link function for a node's childNodes.\n *\n * @param {Array<Function>} linkFns\n * @return {Function} childLinkFn\n */\n\nfunction makeChildLinkFn(linkFns) {\n  return function childLinkFn(vm, nodes, host, scope, frag) {\n    var node, nodeLinkFn, childrenLinkFn;\n    for (var i = 0, n = 0, l = linkFns.length; i < l; n++) {\n      node = nodes[n];\n      nodeLinkFn = linkFns[i++];\n      childrenLinkFn = linkFns[i++];\n      // cache childNodes before linking parent, fix #657\n      var childNodes = toArray(node.childNodes);\n      if (nodeLinkFn) {\n        nodeLinkFn(vm, node, host, scope, frag);\n      }\n      if (childrenLinkFn) {\n        childrenLinkFn(vm, childNodes, host, scope, frag);\n      }\n    }\n  };\n}\n\n/**\n * Check for element directives (custom elements that should\n * be resovled as terminal directives).\n *\n * @param {Element} el\n * @param {Object} options\n */\n\nfunction checkElementDirectives(el, options) {\n  var tag = el.tagName.toLowerCase();\n  if (commonTagRE.test(tag)) {\n    return;\n  }\n  var def = resolveAsset(options, 'elementDirectives', tag);\n  if (def) {\n    return makeTerminalNodeLinkFn(el, tag, '', options, def);\n  }\n}\n\n/**\n * Check if an element is a component. If yes, return\n * a component link function.\n *\n * @param {Element} el\n * @param {Object} options\n * @return {Function|undefined}\n */\n\nfunction checkComponent(el, options) {\n  var component = checkComponentAttr(el, options);\n  if (component) {\n    var ref = findRef(el);\n    var descriptor = {\n      name: 'component',\n      ref: ref,\n      expression: component.id,\n      def: internalDirectives.component,\n      modifiers: {\n        literal: !component.dynamic\n      }\n    };\n    var componentLinkFn = function componentLinkFn(vm, el, host, scope, frag) {\n      if (ref) {\n        defineReactive((scope || vm).$refs, ref, null);\n      }\n      vm._bindDir(descriptor, el, host, scope, frag);\n    };\n    componentLinkFn.terminal = true;\n    return componentLinkFn;\n  }\n}\n\n/**\n * Check an element for terminal directives in fixed order.\n * If it finds one, return a terminal link function.\n *\n * @param {Element} el\n * @param {Array} attrs\n * @param {Object} options\n * @return {Function} terminalLinkFn\n */\n\nfunction checkTerminalDirectives(el, attrs, options) {\n  // skip v-pre\n  if (getAttr(el, 'v-pre') !== null) {\n    return skip;\n  }\n  // skip v-else block, but only if following v-if\n  if (el.hasAttribute('v-else')) {\n    var prev = el.previousElementSibling;\n    if (prev && prev.hasAttribute('v-if')) {\n      return skip;\n    }\n  }\n\n  var attr, name, value, modifiers, matched, dirName, rawName, arg, def, termDef;\n  for (var i = 0, j = attrs.length; i < j; i++) {\n    attr = attrs[i];\n    name = attr.name.replace(modifierRE, '');\n    if (matched = name.match(dirAttrRE)) {\n      def = resolveAsset(options, 'directives', matched[1]);\n      if (def && def.terminal) {\n        if (!termDef || (def.priority || DEFAULT_TERMINAL_PRIORITY) > termDef.priority) {\n          termDef = def;\n          rawName = attr.name;\n          modifiers = parseModifiers(attr.name);\n          value = attr.value;\n          dirName = matched[1];\n          arg = matched[2];\n        }\n      }\n    }\n  }\n\n  if (termDef) {\n    return makeTerminalNodeLinkFn(el, dirName, value, options, termDef, rawName, arg, modifiers);\n  }\n}\n\nfunction skip() {}\nskip.terminal = true;\n\n/**\n * Build a node link function for a terminal directive.\n * A terminal link function terminates the current\n * compilation recursion and handles compilation of the\n * subtree in the directive.\n *\n * @param {Element} el\n * @param {String} dirName\n * @param {String} value\n * @param {Object} options\n * @param {Object} def\n * @param {String} [rawName]\n * @param {String} [arg]\n * @param {Object} [modifiers]\n * @return {Function} terminalLinkFn\n */\n\nfunction makeTerminalNodeLinkFn(el, dirName, value, options, def, rawName, arg, modifiers) {\n  var parsed = parseDirective(value);\n  var descriptor = {\n    name: dirName,\n    arg: arg,\n    expression: parsed.expression,\n    filters: parsed.filters,\n    raw: value,\n    attr: rawName,\n    modifiers: modifiers,\n    def: def\n  };\n  // check ref for v-for, v-if and router-view\n  if (dirName === 'for' || dirName === 'router-view') {\n    descriptor.ref = findRef(el);\n  }\n  var fn = function terminalNodeLinkFn(vm, el, host, scope, frag) {\n    if (descriptor.ref) {\n      defineReactive((scope || vm).$refs, descriptor.ref, null);\n    }\n    vm._bindDir(descriptor, el, host, scope, frag);\n  };\n  fn.terminal = true;\n  return fn;\n}\n\n/**\n * Compile the directives on an element and return a linker.\n *\n * @param {Array|NamedNodeMap} attrs\n * @param {Object} options\n * @return {Function}\n */\n\nfunction compileDirectives(attrs, options) {\n  var i = attrs.length;\n  var dirs = [];\n  var attr, name, value, rawName, rawValue, dirName, arg, modifiers, dirDef, tokens, matched;\n  while (i--) {\n    attr = attrs[i];\n    name = rawName = attr.name;\n    value = rawValue = attr.value;\n    tokens = parseText(value);\n    // reset arg\n    arg = null;\n    // check modifiers\n    modifiers = parseModifiers(name);\n    name = name.replace(modifierRE, '');\n\n    // attribute interpolations\n    if (tokens) {\n      value = tokensToExp(tokens);\n      arg = name;\n      pushDir('bind', directives.bind, tokens);\n      // warn against mixing mustaches with v-bind\n      if (process.env.NODE_ENV !== 'production') {\n        if (name === 'class' && Array.prototype.some.call(attrs, function (attr) {\n          return attr.name === ':class' || attr.name === 'v-bind:class';\n        })) {\n          warn('class=\"' + rawValue + '\": Do not mix mustache interpolation ' + 'and v-bind for \"class\" on the same element. Use one or the other.', options);\n        }\n      }\n    } else\n\n      // special attribute: transition\n      if (transitionRE.test(name)) {\n        modifiers.literal = !bindRE.test(name);\n        pushDir('transition', internalDirectives.transition);\n      } else\n\n        // event handlers\n        if (onRE.test(name)) {\n          arg = name.replace(onRE, '');\n          pushDir('on', directives.on);\n        } else\n\n          // attribute bindings\n          if (bindRE.test(name)) {\n            dirName = name.replace(bindRE, '');\n            if (dirName === 'style' || dirName === 'class') {\n              pushDir(dirName, internalDirectives[dirName]);\n            } else {\n              arg = dirName;\n              pushDir('bind', directives.bind);\n            }\n          } else\n\n            // normal directives\n            if (matched = name.match(dirAttrRE)) {\n              dirName = matched[1];\n              arg = matched[2];\n\n              // skip v-else (when used with v-show)\n              if (dirName === 'else') {\n                continue;\n              }\n\n              dirDef = resolveAsset(options, 'directives', dirName, true);\n              if (dirDef) {\n                pushDir(dirName, dirDef);\n              }\n            }\n  }\n\n  /**\n   * Push a directive.\n   *\n   * @param {String} dirName\n   * @param {Object|Function} def\n   * @param {Array} [interpTokens]\n   */\n\n  function pushDir(dirName, def, interpTokens) {\n    var hasOneTimeToken = interpTokens && hasOneTime(interpTokens);\n    var parsed = !hasOneTimeToken && parseDirective(value);\n    dirs.push({\n      name: dirName,\n      attr: rawName,\n      raw: rawValue,\n      def: def,\n      arg: arg,\n      modifiers: modifiers,\n      // conversion from interpolation strings with one-time token\n      // to expression is differed until directive bind time so that we\n      // have access to the actual vm context for one-time bindings.\n      expression: parsed && parsed.expression,\n      filters: parsed && parsed.filters,\n      interp: interpTokens,\n      hasOneTime: hasOneTimeToken\n    });\n  }\n\n  if (dirs.length) {\n    return makeNodeLinkFn(dirs);\n  }\n}\n\n/**\n * Parse modifiers from directive attribute name.\n *\n * @param {String} name\n * @return {Object}\n */\n\nfunction parseModifiers(name) {\n  var res = Object.create(null);\n  var match = name.match(modifierRE);\n  if (match) {\n    var i = match.length;\n    while (i--) {\n      res[match[i].slice(1)] = true;\n    }\n  }\n  return res;\n}\n\n/**\n * Build a link function for all directives on a single node.\n *\n * @param {Array} directives\n * @return {Function} directivesLinkFn\n */\n\nfunction makeNodeLinkFn(directives) {\n  return function nodeLinkFn(vm, el, host, scope, frag) {\n    // reverse apply because it's sorted low to high\n    var i = directives.length;\n    while (i--) {\n      vm._bindDir(directives[i], el, host, scope, frag);\n    }\n  };\n}\n\n/**\n * Check if an interpolation string contains one-time tokens.\n *\n * @param {Array} tokens\n * @return {Boolean}\n */\n\nfunction hasOneTime(tokens) {\n  var i = tokens.length;\n  while (i--) {\n    if (tokens[i].oneTime) return true;\n  }\n}\n\nfunction isScript(el) {\n  return el.tagName === 'SCRIPT' && (!el.hasAttribute('type') || el.getAttribute('type') === 'text/javascript');\n}\n\nvar specialCharRE = /[^\\w\\-:\\.]/;\n\n/**\n * Process an element or a DocumentFragment based on a\n * instance option object. This allows us to transclude\n * a template node/fragment before the instance is created,\n * so the processed fragment can then be cloned and reused\n * in v-for.\n *\n * @param {Element} el\n * @param {Object} options\n * @return {Element|DocumentFragment}\n */\n\nfunction transclude(el, options) {\n  // extract container attributes to pass them down\n  // to compiler, because they need to be compiled in\n  // parent scope. we are mutating the options object here\n  // assuming the same object will be used for compile\n  // right after this.\n  if (options) {\n    options._containerAttrs = extractAttrs(el);\n  }\n  // for template tags, what we want is its content as\n  // a documentFragment (for fragment instances)\n  if (isTemplate(el)) {\n    el = parseTemplate(el);\n  }\n  if (options) {\n    if (options._asComponent && !options.template) {\n      options.template = '<slot></slot>';\n    }\n    if (options.template) {\n      options._content = extractContent(el);\n      el = transcludeTemplate(el, options);\n    }\n  }\n  if (isFragment(el)) {\n    // anchors for fragment instance\n    // passing in `persist: true` to avoid them being\n    // discarded by IE during template cloning\n    prepend(createAnchor('v-start', true), el);\n    el.appendChild(createAnchor('v-end', true));\n  }\n  return el;\n}\n\n/**\n * Process the template option.\n * If the replace option is true this will swap the $el.\n *\n * @param {Element} el\n * @param {Object} options\n * @return {Element|DocumentFragment}\n */\n\nfunction transcludeTemplate(el, options) {\n  var template = options.template;\n  var frag = parseTemplate(template, true);\n  if (frag) {\n    var replacer = frag.firstChild;\n    if (!replacer) {\n      return frag;\n    }\n    var tag = replacer.tagName && replacer.tagName.toLowerCase();\n    if (options.replace) {\n      /* istanbul ignore if */\n      if (el === document.body) {\n        process.env.NODE_ENV !== 'production' && warn('You are mounting an instance with a template to ' + '<body>. This will replace <body> entirely. You ' + 'should probably use `replace: false` here.');\n      }\n      // there are many cases where the instance must\n      // become a fragment instance: basically anything that\n      // can create more than 1 root nodes.\n      if (\n      // multi-children template\n      frag.childNodes.length > 1 ||\n      // non-element template\n      replacer.nodeType !== 1 ||\n      // single nested component\n      tag === 'component' || resolveAsset(options, 'components', tag) || hasBindAttr(replacer, 'is') ||\n      // element directive\n      resolveAsset(options, 'elementDirectives', tag) ||\n      // for block\n      replacer.hasAttribute('v-for') ||\n      // if block\n      replacer.hasAttribute('v-if')) {\n        return frag;\n      } else {\n        options._replacerAttrs = extractAttrs(replacer);\n        mergeAttrs(el, replacer);\n        return replacer;\n      }\n    } else {\n      el.appendChild(frag);\n      return el;\n    }\n  } else {\n    process.env.NODE_ENV !== 'production' && warn('Invalid template option: ' + template);\n  }\n}\n\n/**\n * Helper to extract a component container's attributes\n * into a plain object array.\n *\n * @param {Element} el\n * @return {Array}\n */\n\nfunction extractAttrs(el) {\n  if (el.nodeType === 1 && el.hasAttributes()) {\n    return toArray(el.attributes);\n  }\n}\n\n/**\n * Merge the attributes of two elements, and make sure\n * the class names are merged properly.\n *\n * @param {Element} from\n * @param {Element} to\n */\n\nfunction mergeAttrs(from, to) {\n  var attrs = from.attributes;\n  var i = attrs.length;\n  var name, value;\n  while (i--) {\n    name = attrs[i].name;\n    value = attrs[i].value;\n    if (!to.hasAttribute(name) && !specialCharRE.test(name)) {\n      to.setAttribute(name, value);\n    } else if (name === 'class' && !parseText(value) && (value = value.trim())) {\n      value.split(/\\s+/).forEach(function (cls) {\n        addClass(to, cls);\n      });\n    }\n  }\n}\n\n/**\n * Scan and determine slot content distribution.\n * We do this during transclusion instead at compile time so that\n * the distribution is decoupled from the compilation order of\n * the slots.\n *\n * @param {Element|DocumentFragment} template\n * @param {Element} content\n * @param {Vue} vm\n */\n\nfunction resolveSlots(vm, content) {\n  if (!content) {\n    return;\n  }\n  var contents = vm._slotContents = Object.create(null);\n  var el, name;\n  for (var i = 0, l = content.children.length; i < l; i++) {\n    el = content.children[i];\n    /* eslint-disable no-cond-assign */\n    if (name = el.getAttribute('slot')) {\n      (contents[name] || (contents[name] = [])).push(el);\n    }\n    /* eslint-enable no-cond-assign */\n    if (process.env.NODE_ENV !== 'production' && getBindAttr(el, 'slot')) {\n      warn('The \"slot\" attribute must be static.', vm.$parent);\n    }\n  }\n  for (name in contents) {\n    contents[name] = extractFragment(contents[name], content);\n  }\n  if (content.hasChildNodes()) {\n    var nodes = content.childNodes;\n    if (nodes.length === 1 && nodes[0].nodeType === 3 && !nodes[0].data.trim()) {\n      return;\n    }\n    contents['default'] = extractFragment(content.childNodes, content);\n  }\n}\n\n/**\n * Extract qualified content nodes from a node list.\n *\n * @param {NodeList} nodes\n * @return {DocumentFragment}\n */\n\nfunction extractFragment(nodes, parent) {\n  var frag = document.createDocumentFragment();\n  nodes = toArray(nodes);\n  for (var i = 0, l = nodes.length; i < l; i++) {\n    var node = nodes[i];\n    if (isTemplate(node) && !node.hasAttribute('v-if') && !node.hasAttribute('v-for')) {\n      parent.removeChild(node);\n      node = parseTemplate(node, true);\n    }\n    frag.appendChild(node);\n  }\n  return frag;\n}\n\n\n\nvar compiler = Object.freeze({\n\tcompile: compile,\n\tcompileAndLinkProps: compileAndLinkProps,\n\tcompileRoot: compileRoot,\n\ttransclude: transclude,\n\tresolveSlots: resolveSlots\n});\n\nfunction stateMixin (Vue) {\n  /**\n   * Accessor for `$data` property, since setting $data\n   * requires observing the new object and updating\n   * proxied properties.\n   */\n\n  Object.defineProperty(Vue.prototype, '$data', {\n    get: function get() {\n      return this._data;\n    },\n    set: function set(newData) {\n      if (newData !== this._data) {\n        this._setData(newData);\n      }\n    }\n  });\n\n  /**\n   * Setup the scope of an instance, which contains:\n   * - observed data\n   * - computed properties\n   * - user methods\n   * - meta properties\n   */\n\n  Vue.prototype._initState = function () {\n    this._initProps();\n    this._initMeta();\n    this._initMethods();\n    this._initData();\n    this._initComputed();\n  };\n\n  /**\n   * Initialize props.\n   */\n\n  Vue.prototype._initProps = function () {\n    var options = this.$options;\n    var el = options.el;\n    var props = options.props;\n    if (props && !el) {\n      process.env.NODE_ENV !== 'production' && warn('Props will not be compiled if no `el` option is ' + 'provided at instantiation.', this);\n    }\n    // make sure to convert string selectors into element now\n    el = options.el = query(el);\n    this._propsUnlinkFn = el && el.nodeType === 1 && props\n    // props must be linked in proper scope if inside v-for\n    ? compileAndLinkProps(this, el, props, this._scope) : null;\n  };\n\n  /**\n   * Initialize the data.\n   */\n\n  Vue.prototype._initData = function () {\n    var dataFn = this.$options.data;\n    var data = this._data = dataFn ? dataFn() : {};\n    if (!isPlainObject(data)) {\n      data = {};\n      process.env.NODE_ENV !== 'production' && warn('data functions should return an object.', this);\n    }\n    var props = this._props;\n    // proxy data on instance\n    var keys = Object.keys(data);\n    var i, key;\n    i = keys.length;\n    while (i--) {\n      key = keys[i];\n      // there are two scenarios where we can proxy a data key:\n      // 1. it's not already defined as a prop\n      // 2. it's provided via a instantiation option AND there are no\n      //    template prop present\n      if (!props || !hasOwn(props, key)) {\n        this._proxy(key);\n      } else if (process.env.NODE_ENV !== 'production') {\n        warn('Data field \"' + key + '\" is already defined ' + 'as a prop. To provide default value for a prop, use the \"default\" ' + 'prop option; if you want to pass prop values to an instantiation ' + 'call, use the \"propsData\" option.', this);\n      }\n    }\n    // observe data\n    observe(data, this);\n  };\n\n  /**\n   * Swap the instance's $data. Called in $data's setter.\n   *\n   * @param {Object} newData\n   */\n\n  Vue.prototype._setData = function (newData) {\n    newData = newData || {};\n    var oldData = this._data;\n    this._data = newData;\n    var keys, key, i;\n    // unproxy keys not present in new data\n    keys = Object.keys(oldData);\n    i = keys.length;\n    while (i--) {\n      key = keys[i];\n      if (!(key in newData)) {\n        this._unproxy(key);\n      }\n    }\n    // proxy keys not already proxied,\n    // and trigger change for changed values\n    keys = Object.keys(newData);\n    i = keys.length;\n    while (i--) {\n      key = keys[i];\n      if (!hasOwn(this, key)) {\n        // new property\n        this._proxy(key);\n      }\n    }\n    oldData.__ob__.removeVm(this);\n    observe(newData, this);\n    this._digest();\n  };\n\n  /**\n   * Proxy a property, so that\n   * vm.prop === vm._data.prop\n   *\n   * @param {String} key\n   */\n\n  Vue.prototype._proxy = function (key) {\n    if (!isReserved(key)) {\n      // need to store ref to self here\n      // because these getter/setters might\n      // be called by child scopes via\n      // prototype inheritance.\n      var self = this;\n      Object.defineProperty(self, key, {\n        configurable: true,\n        enumerable: true,\n        get: function proxyGetter() {\n          return self._data[key];\n        },\n        set: function proxySetter(val) {\n          self._data[key] = val;\n        }\n      });\n    }\n  };\n\n  /**\n   * Unproxy a property.\n   *\n   * @param {String} key\n   */\n\n  Vue.prototype._unproxy = function (key) {\n    if (!isReserved(key)) {\n      delete this[key];\n    }\n  };\n\n  /**\n   * Force update on every watcher in scope.\n   */\n\n  Vue.prototype._digest = function () {\n    for (var i = 0, l = this._watchers.length; i < l; i++) {\n      this._watchers[i].update(true); // shallow updates\n    }\n  };\n\n  /**\n   * Setup computed properties. They are essentially\n   * special getter/setters\n   */\n\n  function noop() {}\n  Vue.prototype._initComputed = function () {\n    var computed = this.$options.computed;\n    if (computed) {\n      for (var key in computed) {\n        var userDef = computed[key];\n        var def = {\n          enumerable: true,\n          configurable: true\n        };\n        if (typeof userDef === 'function') {\n          def.get = makeComputedGetter(userDef, this);\n          def.set = noop;\n        } else {\n          def.get = userDef.get ? userDef.cache !== false ? makeComputedGetter(userDef.get, this) : bind(userDef.get, this) : noop;\n          def.set = userDef.set ? bind(userDef.set, this) : noop;\n        }\n        Object.defineProperty(this, key, def);\n      }\n    }\n  };\n\n  function makeComputedGetter(getter, owner) {\n    var watcher = new Watcher(owner, getter, null, {\n      lazy: true\n    });\n    return function computedGetter() {\n      if (watcher.dirty) {\n        watcher.evaluate();\n      }\n      if (Dep.target) {\n        watcher.depend();\n      }\n      return watcher.value;\n    };\n  }\n\n  /**\n   * Setup instance methods. Methods must be bound to the\n   * instance since they might be passed down as a prop to\n   * child components.\n   */\n\n  Vue.prototype._initMethods = function () {\n    var methods = this.$options.methods;\n    if (methods) {\n      for (var key in methods) {\n        this[key] = bind(methods[key], this);\n      }\n    }\n  };\n\n  /**\n   * Initialize meta information like $index, $key & $value.\n   */\n\n  Vue.prototype._initMeta = function () {\n    var metas = this.$options._meta;\n    if (metas) {\n      for (var key in metas) {\n        defineReactive(this, key, metas[key]);\n      }\n    }\n  };\n}\n\nvar eventRE = /^v-on:|^@/;\n\nfunction eventsMixin (Vue) {\n  /**\n   * Setup the instance's option events & watchers.\n   * If the value is a string, we pull it from the\n   * instance's methods by name.\n   */\n\n  Vue.prototype._initEvents = function () {\n    var options = this.$options;\n    if (options._asComponent) {\n      registerComponentEvents(this, options.el);\n    }\n    registerCallbacks(this, '$on', options.events);\n    registerCallbacks(this, '$watch', options.watch);\n  };\n\n  /**\n   * Register v-on events on a child component\n   *\n   * @param {Vue} vm\n   * @param {Element} el\n   */\n\n  function registerComponentEvents(vm, el) {\n    var attrs = el.attributes;\n    var name, value, handler;\n    for (var i = 0, l = attrs.length; i < l; i++) {\n      name = attrs[i].name;\n      if (eventRE.test(name)) {\n        name = name.replace(eventRE, '');\n        // force the expression into a statement so that\n        // it always dynamically resolves the method to call (#2670)\n        // kinda ugly hack, but does the job.\n        value = attrs[i].value;\n        if (isSimplePath(value)) {\n          value += '.apply(this, $arguments)';\n        }\n        handler = (vm._scope || vm._context).$eval(value, true);\n        handler._fromParent = true;\n        vm.$on(name.replace(eventRE), handler);\n      }\n    }\n  }\n\n  /**\n   * Register callbacks for option events and watchers.\n   *\n   * @param {Vue} vm\n   * @param {String} action\n   * @param {Object} hash\n   */\n\n  function registerCallbacks(vm, action, hash) {\n    if (!hash) return;\n    var handlers, key, i, j;\n    for (key in hash) {\n      handlers = hash[key];\n      if (isArray(handlers)) {\n        for (i = 0, j = handlers.length; i < j; i++) {\n          register(vm, action, key, handlers[i]);\n        }\n      } else {\n        register(vm, action, key, handlers);\n      }\n    }\n  }\n\n  /**\n   * Helper to register an event/watch callback.\n   *\n   * @param {Vue} vm\n   * @param {String} action\n   * @param {String} key\n   * @param {Function|String|Object} handler\n   * @param {Object} [options]\n   */\n\n  function register(vm, action, key, handler, options) {\n    var type = typeof handler;\n    if (type === 'function') {\n      vm[action](key, handler, options);\n    } else if (type === 'string') {\n      var methods = vm.$options.methods;\n      var method = methods && methods[handler];\n      if (method) {\n        vm[action](key, method, options);\n      } else {\n        process.env.NODE_ENV !== 'production' && warn('Unknown method: \"' + handler + '\" when ' + 'registering callback for ' + action + ': \"' + key + '\".', vm);\n      }\n    } else if (handler && type === 'object') {\n      register(vm, action, key, handler.handler, handler);\n    }\n  }\n\n  /**\n   * Setup recursive attached/detached calls\n   */\n\n  Vue.prototype._initDOMHooks = function () {\n    this.$on('hook:attached', onAttached);\n    this.$on('hook:detached', onDetached);\n  };\n\n  /**\n   * Callback to recursively call attached hook on children\n   */\n\n  function onAttached() {\n    if (!this._isAttached) {\n      this._isAttached = true;\n      this.$children.forEach(callAttach);\n    }\n  }\n\n  /**\n   * Iterator to call attached hook\n   *\n   * @param {Vue} child\n   */\n\n  function callAttach(child) {\n    if (!child._isAttached && inDoc(child.$el)) {\n      child._callHook('attached');\n    }\n  }\n\n  /**\n   * Callback to recursively call detached hook on children\n   */\n\n  function onDetached() {\n    if (this._isAttached) {\n      this._isAttached = false;\n      this.$children.forEach(callDetach);\n    }\n  }\n\n  /**\n   * Iterator to call detached hook\n   *\n   * @param {Vue} child\n   */\n\n  function callDetach(child) {\n    if (child._isAttached && !inDoc(child.$el)) {\n      child._callHook('detached');\n    }\n  }\n\n  /**\n   * Trigger all handlers for a hook\n   *\n   * @param {String} hook\n   */\n\n  Vue.prototype._callHook = function (hook) {\n    this.$emit('pre-hook:' + hook);\n    var handlers = this.$options[hook];\n    if (handlers) {\n      for (var i = 0, j = handlers.length; i < j; i++) {\n        handlers[i].call(this);\n      }\n    }\n    this.$emit('hook:' + hook);\n  };\n}\n\nfunction noop$1() {}\n\n/**\n * A directive links a DOM element with a piece of data,\n * which is the result of evaluating an expression.\n * It registers a watcher with the expression and calls\n * the DOM update function when a change is triggered.\n *\n * @param {Object} descriptor\n *                 - {String} name\n *                 - {Object} def\n *                 - {String} expression\n *                 - {Array<Object>} [filters]\n *                 - {Object} [modifiers]\n *                 - {Boolean} literal\n *                 - {String} attr\n *                 - {String} arg\n *                 - {String} raw\n *                 - {String} [ref]\n *                 - {Array<Object>} [interp]\n *                 - {Boolean} [hasOneTime]\n * @param {Vue} vm\n * @param {Node} el\n * @param {Vue} [host] - transclusion host component\n * @param {Object} [scope] - v-for scope\n * @param {Fragment} [frag] - owner fragment\n * @constructor\n */\nfunction Directive(descriptor, vm, el, host, scope, frag) {\n  this.vm = vm;\n  this.el = el;\n  // copy descriptor properties\n  this.descriptor = descriptor;\n  this.name = descriptor.name;\n  this.expression = descriptor.expression;\n  this.arg = descriptor.arg;\n  this.modifiers = descriptor.modifiers;\n  this.filters = descriptor.filters;\n  this.literal = this.modifiers && this.modifiers.literal;\n  // private\n  this._locked = false;\n  this._bound = false;\n  this._listeners = null;\n  // link context\n  this._host = host;\n  this._scope = scope;\n  this._frag = frag;\n  // store directives on node in dev mode\n  if (process.env.NODE_ENV !== 'production' && this.el) {\n    this.el._vue_directives = this.el._vue_directives || [];\n    this.el._vue_directives.push(this);\n  }\n}\n\n/**\n * Initialize the directive, mixin definition properties,\n * setup the watcher, call definition bind() and update()\n * if present.\n */\n\nDirective.prototype._bind = function () {\n  var name = this.name;\n  var descriptor = this.descriptor;\n\n  // remove attribute\n  if ((name !== 'cloak' || this.vm._isCompiled) && this.el && this.el.removeAttribute) {\n    var attr = descriptor.attr || 'v-' + name;\n    this.el.removeAttribute(attr);\n  }\n\n  // copy def properties\n  var def = descriptor.def;\n  if (typeof def === 'function') {\n    this.update = def;\n  } else {\n    extend(this, def);\n  }\n\n  // setup directive params\n  this._setupParams();\n\n  // initial bind\n  if (this.bind) {\n    this.bind();\n  }\n  this._bound = true;\n\n  if (this.literal) {\n    this.update && this.update(descriptor.raw);\n  } else if ((this.expression || this.modifiers) && (this.update || this.twoWay) && !this._checkStatement()) {\n    // wrapped updater for context\n    var dir = this;\n    if (this.update) {\n      this._update = function (val, oldVal) {\n        if (!dir._locked) {\n          dir.update(val, oldVal);\n        }\n      };\n    } else {\n      this._update = noop$1;\n    }\n    var preProcess = this._preProcess ? bind(this._preProcess, this) : null;\n    var postProcess = this._postProcess ? bind(this._postProcess, this) : null;\n    var watcher = this._watcher = new Watcher(this.vm, this.expression, this._update, // callback\n    {\n      filters: this.filters,\n      twoWay: this.twoWay,\n      deep: this.deep,\n      preProcess: preProcess,\n      postProcess: postProcess,\n      scope: this._scope\n    });\n    // v-model with inital inline value need to sync back to\n    // model instead of update to DOM on init. They would\n    // set the afterBind hook to indicate that.\n    if (this.afterBind) {\n      this.afterBind();\n    } else if (this.update) {\n      this.update(watcher.value);\n    }\n  }\n};\n\n/**\n * Setup all param attributes, e.g. track-by,\n * transition-mode, etc...\n */\n\nDirective.prototype._setupParams = function () {\n  if (!this.params) {\n    return;\n  }\n  var params = this.params;\n  // swap the params array with a fresh object.\n  this.params = Object.create(null);\n  var i = params.length;\n  var key, val, mappedKey;\n  while (i--) {\n    key = hyphenate(params[i]);\n    mappedKey = camelize(key);\n    val = getBindAttr(this.el, key);\n    if (val != null) {\n      // dynamic\n      this._setupParamWatcher(mappedKey, val);\n    } else {\n      // static\n      val = getAttr(this.el, key);\n      if (val != null) {\n        this.params[mappedKey] = val === '' ? true : val;\n      }\n    }\n  }\n};\n\n/**\n * Setup a watcher for a dynamic param.\n *\n * @param {String} key\n * @param {String} expression\n */\n\nDirective.prototype._setupParamWatcher = function (key, expression) {\n  var self = this;\n  var called = false;\n  var unwatch = (this._scope || this.vm).$watch(expression, function (val, oldVal) {\n    self.params[key] = val;\n    // since we are in immediate mode,\n    // only call the param change callbacks if this is not the first update.\n    if (called) {\n      var cb = self.paramWatchers && self.paramWatchers[key];\n      if (cb) {\n        cb.call(self, val, oldVal);\n      }\n    } else {\n      called = true;\n    }\n  }, {\n    immediate: true,\n    user: false\n  });(this._paramUnwatchFns || (this._paramUnwatchFns = [])).push(unwatch);\n};\n\n/**\n * Check if the directive is a function caller\n * and if the expression is a callable one. If both true,\n * we wrap up the expression and use it as the event\n * handler.\n *\n * e.g. on-click=\"a++\"\n *\n * @return {Boolean}\n */\n\nDirective.prototype._checkStatement = function () {\n  var expression = this.expression;\n  if (expression && this.acceptStatement && !isSimplePath(expression)) {\n    var fn = parseExpression$1(expression).get;\n    var scope = this._scope || this.vm;\n    var handler = function handler(e) {\n      scope.$event = e;\n      fn.call(scope, scope);\n      scope.$event = null;\n    };\n    if (this.filters) {\n      handler = scope._applyFilters(handler, null, this.filters);\n    }\n    this.update(handler);\n    return true;\n  }\n};\n\n/**\n * Set the corresponding value with the setter.\n * This should only be used in two-way directives\n * e.g. v-model.\n *\n * @param {*} value\n * @public\n */\n\nDirective.prototype.set = function (value) {\n  /* istanbul ignore else */\n  if (this.twoWay) {\n    this._withLock(function () {\n      this._watcher.set(value);\n    });\n  } else if (process.env.NODE_ENV !== 'production') {\n    warn('Directive.set() can only be used inside twoWay' + 'directives.');\n  }\n};\n\n/**\n * Execute a function while preventing that function from\n * triggering updates on this directive instance.\n *\n * @param {Function} fn\n */\n\nDirective.prototype._withLock = function (fn) {\n  var self = this;\n  self._locked = true;\n  fn.call(self);\n  nextTick(function () {\n    self._locked = false;\n  });\n};\n\n/**\n * Convenience method that attaches a DOM event listener\n * to the directive element and autometically tears it down\n * during unbind.\n *\n * @param {String} event\n * @param {Function} handler\n * @param {Boolean} [useCapture]\n */\n\nDirective.prototype.on = function (event, handler, useCapture) {\n  on(this.el, event, handler, useCapture);(this._listeners || (this._listeners = [])).push([event, handler]);\n};\n\n/**\n * Teardown the watcher and call unbind.\n */\n\nDirective.prototype._teardown = function () {\n  if (this._bound) {\n    this._bound = false;\n    if (this.unbind) {\n      this.unbind();\n    }\n    if (this._watcher) {\n      this._watcher.teardown();\n    }\n    var listeners = this._listeners;\n    var i;\n    if (listeners) {\n      i = listeners.length;\n      while (i--) {\n        off(this.el, listeners[i][0], listeners[i][1]);\n      }\n    }\n    var unwatchFns = this._paramUnwatchFns;\n    if (unwatchFns) {\n      i = unwatchFns.length;\n      while (i--) {\n        unwatchFns[i]();\n      }\n    }\n    if (process.env.NODE_ENV !== 'production' && this.el) {\n      this.el._vue_directives.$remove(this);\n    }\n    this.vm = this.el = this._watcher = this._listeners = null;\n  }\n};\n\nfunction lifecycleMixin (Vue) {\n  /**\n   * Update v-ref for component.\n   *\n   * @param {Boolean} remove\n   */\n\n  Vue.prototype._updateRef = function (remove) {\n    var ref = this.$options._ref;\n    if (ref) {\n      var refs = (this._scope || this._context).$refs;\n      if (remove) {\n        if (refs[ref] === this) {\n          refs[ref] = null;\n        }\n      } else {\n        refs[ref] = this;\n      }\n    }\n  };\n\n  /**\n   * Transclude, compile and link element.\n   *\n   * If a pre-compiled linker is available, that means the\n   * passed in element will be pre-transcluded and compiled\n   * as well - all we need to do is to call the linker.\n   *\n   * Otherwise we need to call transclude/compile/link here.\n   *\n   * @param {Element} el\n   */\n\n  Vue.prototype._compile = function (el) {\n    var options = this.$options;\n\n    // transclude and init element\n    // transclude can potentially replace original\n    // so we need to keep reference; this step also injects\n    // the template and caches the original attributes\n    // on the container node and replacer node.\n    var original = el;\n    el = transclude(el, options);\n    this._initElement(el);\n\n    // handle v-pre on root node (#2026)\n    if (el.nodeType === 1 && getAttr(el, 'v-pre') !== null) {\n      return;\n    }\n\n    // root is always compiled per-instance, because\n    // container attrs and props can be different every time.\n    var contextOptions = this._context && this._context.$options;\n    var rootLinker = compileRoot(el, options, contextOptions);\n\n    // resolve slot distribution\n    resolveSlots(this, options._content);\n\n    // compile and link the rest\n    var contentLinkFn;\n    var ctor = this.constructor;\n    // component compilation can be cached\n    // as long as it's not using inline-template\n    if (options._linkerCachable) {\n      contentLinkFn = ctor.linker;\n      if (!contentLinkFn) {\n        contentLinkFn = ctor.linker = compile(el, options);\n      }\n    }\n\n    // link phase\n    // make sure to link root with prop scope!\n    var rootUnlinkFn = rootLinker(this, el, this._scope);\n    var contentUnlinkFn = contentLinkFn ? contentLinkFn(this, el) : compile(el, options)(this, el);\n\n    // register composite unlink function\n    // to be called during instance destruction\n    this._unlinkFn = function () {\n      rootUnlinkFn();\n      // passing destroying: true to avoid searching and\n      // splicing the directives\n      contentUnlinkFn(true);\n    };\n\n    // finally replace original\n    if (options.replace) {\n      replace(original, el);\n    }\n\n    this._isCompiled = true;\n    this._callHook('compiled');\n  };\n\n  /**\n   * Initialize instance element. Called in the public\n   * $mount() method.\n   *\n   * @param {Element} el\n   */\n\n  Vue.prototype._initElement = function (el) {\n    if (isFragment(el)) {\n      this._isFragment = true;\n      this.$el = this._fragmentStart = el.firstChild;\n      this._fragmentEnd = el.lastChild;\n      // set persisted text anchors to empty\n      if (this._fragmentStart.nodeType === 3) {\n        this._fragmentStart.data = this._fragmentEnd.data = '';\n      }\n      this._fragment = el;\n    } else {\n      this.$el = el;\n    }\n    this.$el.__vue__ = this;\n    this._callHook('beforeCompile');\n  };\n\n  /**\n   * Create and bind a directive to an element.\n   *\n   * @param {Object} descriptor - parsed directive descriptor\n   * @param {Node} node   - target node\n   * @param {Vue} [host] - transclusion host component\n   * @param {Object} [scope] - v-for scope\n   * @param {Fragment} [frag] - owner fragment\n   */\n\n  Vue.prototype._bindDir = function (descriptor, node, host, scope, frag) {\n    this._directives.push(new Directive(descriptor, this, node, host, scope, frag));\n  };\n\n  /**\n   * Teardown an instance, unobserves the data, unbind all the\n   * directives, turn off all the event listeners, etc.\n   *\n   * @param {Boolean} remove - whether to remove the DOM node.\n   * @param {Boolean} deferCleanup - if true, defer cleanup to\n   *                                 be called later\n   */\n\n  Vue.prototype._destroy = function (remove, deferCleanup) {\n    if (this._isBeingDestroyed) {\n      if (!deferCleanup) {\n        this._cleanup();\n      }\n      return;\n    }\n\n    var destroyReady;\n    var pendingRemoval;\n\n    var self = this;\n    // Cleanup should be called either synchronously or asynchronoysly as\n    // callback of this.$remove(), or if remove and deferCleanup are false.\n    // In any case it should be called after all other removing, unbinding and\n    // turning of is done\n    var cleanupIfPossible = function cleanupIfPossible() {\n      if (destroyReady && !pendingRemoval && !deferCleanup) {\n        self._cleanup();\n      }\n    };\n\n    // remove DOM element\n    if (remove && this.$el) {\n      pendingRemoval = true;\n      this.$remove(function () {\n        pendingRemoval = false;\n        cleanupIfPossible();\n      });\n    }\n\n    this._callHook('beforeDestroy');\n    this._isBeingDestroyed = true;\n    var i;\n    // remove self from parent. only necessary\n    // if parent is not being destroyed as well.\n    var parent = this.$parent;\n    if (parent && !parent._isBeingDestroyed) {\n      parent.$children.$remove(this);\n      // unregister ref (remove: true)\n      this._updateRef(true);\n    }\n    // destroy all children.\n    i = this.$children.length;\n    while (i--) {\n      this.$children[i].$destroy();\n    }\n    // teardown props\n    if (this._propsUnlinkFn) {\n      this._propsUnlinkFn();\n    }\n    // teardown all directives. this also tearsdown all\n    // directive-owned watchers.\n    if (this._unlinkFn) {\n      this._unlinkFn();\n    }\n    i = this._watchers.length;\n    while (i--) {\n      this._watchers[i].teardown();\n    }\n    // remove reference to self on $el\n    if (this.$el) {\n      this.$el.__vue__ = null;\n    }\n\n    destroyReady = true;\n    cleanupIfPossible();\n  };\n\n  /**\n   * Clean up to ensure garbage collection.\n   * This is called after the leave transition if there\n   * is any.\n   */\n\n  Vue.prototype._cleanup = function () {\n    if (this._isDestroyed) {\n      return;\n    }\n    // remove self from owner fragment\n    // do it in cleanup so that we can call $destroy with\n    // defer right when a fragment is about to be removed.\n    if (this._frag) {\n      this._frag.children.$remove(this);\n    }\n    // remove reference from data ob\n    // frozen object may not have observer.\n    if (this._data && this._data.__ob__) {\n      this._data.__ob__.removeVm(this);\n    }\n    // Clean up references to private properties and other\n    // instances. preserve reference to _data so that proxy\n    // accessors still work. The only potential side effect\n    // here is that mutating the instance after it's destroyed\n    // may affect the state of other components that are still\n    // observing the same object, but that seems to be a\n    // reasonable responsibility for the user rather than\n    // always throwing an error on them.\n    this.$el = this.$parent = this.$root = this.$children = this._watchers = this._context = this._scope = this._directives = null;\n    // call the last hook...\n    this._isDestroyed = true;\n    this._callHook('destroyed');\n    // turn off all instance listeners.\n    this.$off();\n  };\n}\n\nfunction miscMixin (Vue) {\n  /**\n   * Apply a list of filter (descriptors) to a value.\n   * Using plain for loops here because this will be called in\n   * the getter of any watcher with filters so it is very\n   * performance sensitive.\n   *\n   * @param {*} value\n   * @param {*} [oldValue]\n   * @param {Array} filters\n   * @param {Boolean} write\n   * @return {*}\n   */\n\n  Vue.prototype._applyFilters = function (value, oldValue, filters, write) {\n    var filter, fn, args, arg, offset, i, l, j, k;\n    for (i = 0, l = filters.length; i < l; i++) {\n      filter = filters[write ? l - i - 1 : i];\n      fn = resolveAsset(this.$options, 'filters', filter.name, true);\n      if (!fn) continue;\n      fn = write ? fn.write : fn.read || fn;\n      if (typeof fn !== 'function') continue;\n      args = write ? [value, oldValue] : [value];\n      offset = write ? 2 : 1;\n      if (filter.args) {\n        for (j = 0, k = filter.args.length; j < k; j++) {\n          arg = filter.args[j];\n          args[j + offset] = arg.dynamic ? this.$get(arg.value) : arg.value;\n        }\n      }\n      value = fn.apply(this, args);\n    }\n    return value;\n  };\n\n  /**\n   * Resolve a component, depending on whether the component\n   * is defined normally or using an async factory function.\n   * Resolves synchronously if already resolved, otherwise\n   * resolves asynchronously and caches the resolved\n   * constructor on the factory.\n   *\n   * @param {String|Function} value\n   * @param {Function} cb\n   */\n\n  Vue.prototype._resolveComponent = function (value, cb) {\n    var factory;\n    if (typeof value === 'function') {\n      factory = value;\n    } else {\n      factory = resolveAsset(this.$options, 'components', value, true);\n    }\n    /* istanbul ignore if */\n    if (!factory) {\n      return;\n    }\n    // async component factory\n    if (!factory.options) {\n      if (factory.resolved) {\n        // cached\n        cb(factory.resolved);\n      } else if (factory.requested) {\n        // pool callbacks\n        factory.pendingCallbacks.push(cb);\n      } else {\n        factory.requested = true;\n        var cbs = factory.pendingCallbacks = [cb];\n        factory.call(this, function resolve(res) {\n          if (isPlainObject(res)) {\n            res = Vue.extend(res);\n          }\n          // cache resolved\n          factory.resolved = res;\n          // invoke callbacks\n          for (var i = 0, l = cbs.length; i < l; i++) {\n            cbs[i](res);\n          }\n        }, function reject(reason) {\n          process.env.NODE_ENV !== 'production' && warn('Failed to resolve async component' + (typeof value === 'string' ? ': ' + value : '') + '. ' + (reason ? '\\nReason: ' + reason : ''));\n        });\n      }\n    } else {\n      // normal component\n      cb(factory);\n    }\n  };\n}\n\nvar filterRE$1 = /[^|]\\|[^|]/;\n\nfunction dataAPI (Vue) {\n  /**\n   * Get the value from an expression on this vm.\n   *\n   * @param {String} exp\n   * @param {Boolean} [asStatement]\n   * @return {*}\n   */\n\n  Vue.prototype.$get = function (exp, asStatement) {\n    var res = parseExpression$1(exp);\n    if (res) {\n      if (asStatement) {\n        var self = this;\n        return function statementHandler() {\n          self.$arguments = toArray(arguments);\n          var result = res.get.call(self, self);\n          self.$arguments = null;\n          return result;\n        };\n      } else {\n        try {\n          return res.get.call(this, this);\n        } catch (e) {}\n      }\n    }\n  };\n\n  /**\n   * Set the value from an expression on this vm.\n   * The expression must be a valid left-hand\n   * expression in an assignment.\n   *\n   * @param {String} exp\n   * @param {*} val\n   */\n\n  Vue.prototype.$set = function (exp, val) {\n    var res = parseExpression$1(exp, true);\n    if (res && res.set) {\n      res.set.call(this, this, val);\n    }\n  };\n\n  /**\n   * Delete a property on the VM\n   *\n   * @param {String} key\n   */\n\n  Vue.prototype.$delete = function (key) {\n    del(this._data, key);\n  };\n\n  /**\n   * Watch an expression, trigger callback when its\n   * value changes.\n   *\n   * @param {String|Function} expOrFn\n   * @param {Function} cb\n   * @param {Object} [options]\n   *                 - {Boolean} deep\n   *                 - {Boolean} immediate\n   * @return {Function} - unwatchFn\n   */\n\n  Vue.prototype.$watch = function (expOrFn, cb, options) {\n    var vm = this;\n    var parsed;\n    if (typeof expOrFn === 'string') {\n      parsed = parseDirective(expOrFn);\n      expOrFn = parsed.expression;\n    }\n    var watcher = new Watcher(vm, expOrFn, cb, {\n      deep: options && options.deep,\n      sync: options && options.sync,\n      filters: parsed && parsed.filters,\n      user: !options || options.user !== false\n    });\n    if (options && options.immediate) {\n      cb.call(vm, watcher.value);\n    }\n    return function unwatchFn() {\n      watcher.teardown();\n    };\n  };\n\n  /**\n   * Evaluate a text directive, including filters.\n   *\n   * @param {String} text\n   * @param {Boolean} [asStatement]\n   * @return {String}\n   */\n\n  Vue.prototype.$eval = function (text, asStatement) {\n    // check for filters.\n    if (filterRE$1.test(text)) {\n      var dir = parseDirective(text);\n      // the filter regex check might give false positive\n      // for pipes inside strings, so it's possible that\n      // we don't get any filters here\n      var val = this.$get(dir.expression, asStatement);\n      return dir.filters ? this._applyFilters(val, null, dir.filters) : val;\n    } else {\n      // no filter\n      return this.$get(text, asStatement);\n    }\n  };\n\n  /**\n   * Interpolate a piece of template text.\n   *\n   * @param {String} text\n   * @return {String}\n   */\n\n  Vue.prototype.$interpolate = function (text) {\n    var tokens = parseText(text);\n    var vm = this;\n    if (tokens) {\n      if (tokens.length === 1) {\n        return vm.$eval(tokens[0].value) + '';\n      } else {\n        return tokens.map(function (token) {\n          return token.tag ? vm.$eval(token.value) : token.value;\n        }).join('');\n      }\n    } else {\n      return text;\n    }\n  };\n\n  /**\n   * Log instance data as a plain JS object\n   * so that it is easier to inspect in console.\n   * This method assumes console is available.\n   *\n   * @param {String} [path]\n   */\n\n  Vue.prototype.$log = function (path) {\n    var data = path ? getPath(this._data, path) : this._data;\n    if (data) {\n      data = clean(data);\n    }\n    // include computed fields\n    if (!path) {\n      var key;\n      for (key in this.$options.computed) {\n        data[key] = clean(this[key]);\n      }\n      if (this._props) {\n        for (key in this._props) {\n          data[key] = clean(this[key]);\n        }\n      }\n    }\n    console.log(data);\n  };\n\n  /**\n   * \"clean\" a getter/setter converted object into a plain\n   * object copy.\n   *\n   * @param {Object} - obj\n   * @return {Object}\n   */\n\n  function clean(obj) {\n    return JSON.parse(JSON.stringify(obj));\n  }\n}\n\nfunction domAPI (Vue) {\n  /**\n   * Convenience on-instance nextTick. The callback is\n   * auto-bound to the instance, and this avoids component\n   * modules having to rely on the global Vue.\n   *\n   * @param {Function} fn\n   */\n\n  Vue.prototype.$nextTick = function (fn) {\n    nextTick(fn, this);\n  };\n\n  /**\n   * Append instance to target\n   *\n   * @param {Node} target\n   * @param {Function} [cb]\n   * @param {Boolean} [withTransition] - defaults to true\n   */\n\n  Vue.prototype.$appendTo = function (target, cb, withTransition) {\n    return insert(this, target, cb, withTransition, append, appendWithTransition);\n  };\n\n  /**\n   * Prepend instance to target\n   *\n   * @param {Node} target\n   * @param {Function} [cb]\n   * @param {Boolean} [withTransition] - defaults to true\n   */\n\n  Vue.prototype.$prependTo = function (target, cb, withTransition) {\n    target = query(target);\n    if (target.hasChildNodes()) {\n      this.$before(target.firstChild, cb, withTransition);\n    } else {\n      this.$appendTo(target, cb, withTransition);\n    }\n    return this;\n  };\n\n  /**\n   * Insert instance before target\n   *\n   * @param {Node} target\n   * @param {Function} [cb]\n   * @param {Boolean} [withTransition] - defaults to true\n   */\n\n  Vue.prototype.$before = function (target, cb, withTransition) {\n    return insert(this, target, cb, withTransition, beforeWithCb, beforeWithTransition);\n  };\n\n  /**\n   * Insert instance after target\n   *\n   * @param {Node} target\n   * @param {Function} [cb]\n   * @param {Boolean} [withTransition] - defaults to true\n   */\n\n  Vue.prototype.$after = function (target, cb, withTransition) {\n    target = query(target);\n    if (target.nextSibling) {\n      this.$before(target.nextSibling, cb, withTransition);\n    } else {\n      this.$appendTo(target.parentNode, cb, withTransition);\n    }\n    return this;\n  };\n\n  /**\n   * Remove instance from DOM\n   *\n   * @param {Function} [cb]\n   * @param {Boolean} [withTransition] - defaults to true\n   */\n\n  Vue.prototype.$remove = function (cb, withTransition) {\n    if (!this.$el.parentNode) {\n      return cb && cb();\n    }\n    var inDocument = this._isAttached && inDoc(this.$el);\n    // if we are not in document, no need to check\n    // for transitions\n    if (!inDocument) withTransition = false;\n    var self = this;\n    var realCb = function realCb() {\n      if (inDocument) self._callHook('detached');\n      if (cb) cb();\n    };\n    if (this._isFragment) {\n      removeNodeRange(this._fragmentStart, this._fragmentEnd, this, this._fragment, realCb);\n    } else {\n      var op = withTransition === false ? removeWithCb : removeWithTransition;\n      op(this.$el, this, realCb);\n    }\n    return this;\n  };\n\n  /**\n   * Shared DOM insertion function.\n   *\n   * @param {Vue} vm\n   * @param {Element} target\n   * @param {Function} [cb]\n   * @param {Boolean} [withTransition]\n   * @param {Function} op1 - op for non-transition insert\n   * @param {Function} op2 - op for transition insert\n   * @return vm\n   */\n\n  function insert(vm, target, cb, withTransition, op1, op2) {\n    target = query(target);\n    var targetIsDetached = !inDoc(target);\n    var op = withTransition === false || targetIsDetached ? op1 : op2;\n    var shouldCallHook = !targetIsDetached && !vm._isAttached && !inDoc(vm.$el);\n    if (vm._isFragment) {\n      mapNodeRange(vm._fragmentStart, vm._fragmentEnd, function (node) {\n        op(node, target, vm);\n      });\n      cb && cb();\n    } else {\n      op(vm.$el, target, vm, cb);\n    }\n    if (shouldCallHook) {\n      vm._callHook('attached');\n    }\n    return vm;\n  }\n\n  /**\n   * Check for selectors\n   *\n   * @param {String|Element} el\n   */\n\n  function query(el) {\n    return typeof el === 'string' ? document.querySelector(el) : el;\n  }\n\n  /**\n   * Append operation that takes a callback.\n   *\n   * @param {Node} el\n   * @param {Node} target\n   * @param {Vue} vm - unused\n   * @param {Function} [cb]\n   */\n\n  function append(el, target, vm, cb) {\n    target.appendChild(el);\n    if (cb) cb();\n  }\n\n  /**\n   * InsertBefore operation that takes a callback.\n   *\n   * @param {Node} el\n   * @param {Node} target\n   * @param {Vue} vm - unused\n   * @param {Function} [cb]\n   */\n\n  function beforeWithCb(el, target, vm, cb) {\n    before(el, target);\n    if (cb) cb();\n  }\n\n  /**\n   * Remove operation that takes a callback.\n   *\n   * @param {Node} el\n   * @param {Vue} vm - unused\n   * @param {Function} [cb]\n   */\n\n  function removeWithCb(el, vm, cb) {\n    remove(el);\n    if (cb) cb();\n  }\n}\n\nfunction eventsAPI (Vue) {\n  /**\n   * Listen on the given `event` with `fn`.\n   *\n   * @param {String} event\n   * @param {Function} fn\n   */\n\n  Vue.prototype.$on = function (event, fn) {\n    (this._events[event] || (this._events[event] = [])).push(fn);\n    modifyListenerCount(this, event, 1);\n    return this;\n  };\n\n  /**\n   * Adds an `event` listener that will be invoked a single\n   * time then automatically removed.\n   *\n   * @param {String} event\n   * @param {Function} fn\n   */\n\n  Vue.prototype.$once = function (event, fn) {\n    var self = this;\n    function on() {\n      self.$off(event, on);\n      fn.apply(this, arguments);\n    }\n    on.fn = fn;\n    this.$on(event, on);\n    return this;\n  };\n\n  /**\n   * Remove the given callback for `event` or all\n   * registered callbacks.\n   *\n   * @param {String} event\n   * @param {Function} fn\n   */\n\n  Vue.prototype.$off = function (event, fn) {\n    var cbs;\n    // all\n    if (!arguments.length) {\n      if (this.$parent) {\n        for (event in this._events) {\n          cbs = this._events[event];\n          if (cbs) {\n            modifyListenerCount(this, event, -cbs.length);\n          }\n        }\n      }\n      this._events = {};\n      return this;\n    }\n    // specific event\n    cbs = this._events[event];\n    if (!cbs) {\n      return this;\n    }\n    if (arguments.length === 1) {\n      modifyListenerCount(this, event, -cbs.length);\n      this._events[event] = null;\n      return this;\n    }\n    // specific handler\n    var cb;\n    var i = cbs.length;\n    while (i--) {\n      cb = cbs[i];\n      if (cb === fn || cb.fn === fn) {\n        modifyListenerCount(this, event, -1);\n        cbs.splice(i, 1);\n        break;\n      }\n    }\n    return this;\n  };\n\n  /**\n   * Trigger an event on self.\n   *\n   * @param {String|Object} event\n   * @return {Boolean} shouldPropagate\n   */\n\n  Vue.prototype.$emit = function (event) {\n    var isSource = typeof event === 'string';\n    event = isSource ? event : event.name;\n    var cbs = this._events[event];\n    var shouldPropagate = isSource || !cbs;\n    if (cbs) {\n      cbs = cbs.length > 1 ? toArray(cbs) : cbs;\n      // this is a somewhat hacky solution to the question raised\n      // in #2102: for an inline component listener like <comp @test=\"doThis\">,\n      // the propagation handling is somewhat broken. Therefore we\n      // need to treat these inline callbacks differently.\n      var hasParentCbs = isSource && cbs.some(function (cb) {\n        return cb._fromParent;\n      });\n      if (hasParentCbs) {\n        shouldPropagate = false;\n      }\n      var args = toArray(arguments, 1);\n      for (var i = 0, l = cbs.length; i < l; i++) {\n        var cb = cbs[i];\n        var res = cb.apply(this, args);\n        if (res === true && (!hasParentCbs || cb._fromParent)) {\n          shouldPropagate = true;\n        }\n      }\n    }\n    return shouldPropagate;\n  };\n\n  /**\n   * Recursively broadcast an event to all children instances.\n   *\n   * @param {String|Object} event\n   * @param {...*} additional arguments\n   */\n\n  Vue.prototype.$broadcast = function (event) {\n    var isSource = typeof event === 'string';\n    event = isSource ? event : event.name;\n    // if no child has registered for this event,\n    // then there's no need to broadcast.\n    if (!this._eventsCount[event]) return;\n    var children = this.$children;\n    var args = toArray(arguments);\n    if (isSource) {\n      // use object event to indicate non-source emit\n      // on children\n      args[0] = { name: event, source: this };\n    }\n    for (var i = 0, l = children.length; i < l; i++) {\n      var child = children[i];\n      var shouldPropagate = child.$emit.apply(child, args);\n      if (shouldPropagate) {\n        child.$broadcast.apply(child, args);\n      }\n    }\n    return this;\n  };\n\n  /**\n   * Recursively propagate an event up the parent chain.\n   *\n   * @param {String} event\n   * @param {...*} additional arguments\n   */\n\n  Vue.prototype.$dispatch = function (event) {\n    var shouldPropagate = this.$emit.apply(this, arguments);\n    if (!shouldPropagate) return;\n    var parent = this.$parent;\n    var args = toArray(arguments);\n    // use object event to indicate non-source emit\n    // on parents\n    args[0] = { name: event, source: this };\n    while (parent) {\n      shouldPropagate = parent.$emit.apply(parent, args);\n      parent = shouldPropagate ? parent.$parent : null;\n    }\n    return this;\n  };\n\n  /**\n   * Modify the listener counts on all parents.\n   * This bookkeeping allows $broadcast to return early when\n   * no child has listened to a certain event.\n   *\n   * @param {Vue} vm\n   * @param {String} event\n   * @param {Number} count\n   */\n\n  var hookRE = /^hook:/;\n  function modifyListenerCount(vm, event, count) {\n    var parent = vm.$parent;\n    // hooks do not get broadcasted so no need\n    // to do bookkeeping for them\n    if (!parent || !count || hookRE.test(event)) return;\n    while (parent) {\n      parent._eventsCount[event] = (parent._eventsCount[event] || 0) + count;\n      parent = parent.$parent;\n    }\n  }\n}\n\nfunction lifecycleAPI (Vue) {\n  /**\n   * Set instance target element and kick off the compilation\n   * process. The passed in `el` can be a selector string, an\n   * existing Element, or a DocumentFragment (for block\n   * instances).\n   *\n   * @param {Element|DocumentFragment|string} el\n   * @public\n   */\n\n  Vue.prototype.$mount = function (el) {\n    if (this._isCompiled) {\n      process.env.NODE_ENV !== 'production' && warn('$mount() should be called only once.', this);\n      return;\n    }\n    el = query(el);\n    if (!el) {\n      el = document.createElement('div');\n    }\n    this._compile(el);\n    this._initDOMHooks();\n    if (inDoc(this.$el)) {\n      this._callHook('attached');\n      ready.call(this);\n    } else {\n      this.$once('hook:attached', ready);\n    }\n    return this;\n  };\n\n  /**\n   * Mark an instance as ready.\n   */\n\n  function ready() {\n    this._isAttached = true;\n    this._isReady = true;\n    this._callHook('ready');\n  }\n\n  /**\n   * Teardown the instance, simply delegate to the internal\n   * _destroy.\n   *\n   * @param {Boolean} remove\n   * @param {Boolean} deferCleanup\n   */\n\n  Vue.prototype.$destroy = function (remove, deferCleanup) {\n    this._destroy(remove, deferCleanup);\n  };\n\n  /**\n   * Partially compile a piece of DOM and return a\n   * decompile function.\n   *\n   * @param {Element|DocumentFragment} el\n   * @param {Vue} [host]\n   * @param {Object} [scope]\n   * @param {Fragment} [frag]\n   * @return {Function}\n   */\n\n  Vue.prototype.$compile = function (el, host, scope, frag) {\n    return compile(el, this.$options, true)(this, el, host, scope, frag);\n  };\n}\n\n/**\n * The exposed Vue constructor.\n *\n * API conventions:\n * - public API methods/properties are prefixed with `$`\n * - internal methods/properties are prefixed with `_`\n * - non-prefixed properties are assumed to be proxied user\n *   data.\n *\n * @constructor\n * @param {Object} [options]\n * @public\n */\n\nfunction Vue(options) {\n  this._init(options);\n}\n\n// install internals\ninitMixin(Vue);\nstateMixin(Vue);\neventsMixin(Vue);\nlifecycleMixin(Vue);\nmiscMixin(Vue);\n\n// install instance APIs\ndataAPI(Vue);\ndomAPI(Vue);\neventsAPI(Vue);\nlifecycleAPI(Vue);\n\nvar slot = {\n\n  priority: SLOT,\n  params: ['name'],\n\n  bind: function bind() {\n    // this was resolved during component transclusion\n    var name = this.params.name || 'default';\n    var content = this.vm._slotContents && this.vm._slotContents[name];\n    if (!content || !content.hasChildNodes()) {\n      this.fallback();\n    } else {\n      this.compile(content.cloneNode(true), this.vm._context, this.vm);\n    }\n  },\n\n  compile: function compile(content, context, host) {\n    if (content && context) {\n      if (this.el.hasChildNodes() && content.childNodes.length === 1 && content.childNodes[0].nodeType === 1 && content.childNodes[0].hasAttribute('v-if')) {\n        // if the inserted slot has v-if\n        // inject fallback content as the v-else\n        var elseBlock = document.createElement('template');\n        elseBlock.setAttribute('v-else', '');\n        elseBlock.innerHTML = this.el.innerHTML;\n        // the else block should be compiled in child scope\n        elseBlock._context = this.vm;\n        content.appendChild(elseBlock);\n      }\n      var scope = host ? host._scope : this._scope;\n      this.unlink = context.$compile(content, host, scope, this._frag);\n    }\n    if (content) {\n      replace(this.el, content);\n    } else {\n      remove(this.el);\n    }\n  },\n\n  fallback: function fallback() {\n    this.compile(extractContent(this.el, true), this.vm);\n  },\n\n  unbind: function unbind() {\n    if (this.unlink) {\n      this.unlink();\n    }\n  }\n};\n\nvar partial = {\n\n  priority: PARTIAL,\n\n  params: ['name'],\n\n  // watch changes to name for dynamic partials\n  paramWatchers: {\n    name: function name(value) {\n      vIf.remove.call(this);\n      if (value) {\n        this.insert(value);\n      }\n    }\n  },\n\n  bind: function bind() {\n    this.anchor = createAnchor('v-partial');\n    replace(this.el, this.anchor);\n    this.insert(this.params.name);\n  },\n\n  insert: function insert(id) {\n    var partial = resolveAsset(this.vm.$options, 'partials', id, true);\n    if (partial) {\n      this.factory = new FragmentFactory(this.vm, partial);\n      vIf.insert.call(this);\n    }\n  },\n\n  unbind: function unbind() {\n    if (this.frag) {\n      this.frag.destroy();\n    }\n  }\n};\n\nvar elementDirectives = {\n  slot: slot,\n  partial: partial\n};\n\nvar convertArray = vFor._postProcess;\n\n/**\n * Limit filter for arrays\n *\n * @param {Number} n\n * @param {Number} offset (Decimal expected)\n */\n\nfunction limitBy(arr, n, offset) {\n  offset = offset ? parseInt(offset, 10) : 0;\n  n = toNumber(n);\n  return typeof n === 'number' ? arr.slice(offset, offset + n) : arr;\n}\n\n/**\n * Filter filter for arrays\n *\n * @param {String} search\n * @param {String} [delimiter]\n * @param {String} ...dataKeys\n */\n\nfunction filterBy(arr, search, delimiter) {\n  arr = convertArray(arr);\n  if (search == null) {\n    return arr;\n  }\n  if (typeof search === 'function') {\n    return arr.filter(search);\n  }\n  // cast to lowercase string\n  search = ('' + search).toLowerCase();\n  // allow optional `in` delimiter\n  // because why not\n  var n = delimiter === 'in' ? 3 : 2;\n  // extract and flatten keys\n  var keys = Array.prototype.concat.apply([], toArray(arguments, n));\n  var res = [];\n  var item, key, val, j;\n  for (var i = 0, l = arr.length; i < l; i++) {\n    item = arr[i];\n    val = item && item.$value || item;\n    j = keys.length;\n    if (j) {\n      while (j--) {\n        key = keys[j];\n        if (key === '$key' && contains(item.$key, search) || contains(getPath(val, key), search)) {\n          res.push(item);\n          break;\n        }\n      }\n    } else if (contains(item, search)) {\n      res.push(item);\n    }\n  }\n  return res;\n}\n\n/**\n * Order filter for arrays\n *\n * @param {String|Array<String>|Function} ...sortKeys\n * @param {Number} [order]\n */\n\nfunction orderBy(arr) {\n  var comparator = null;\n  var sortKeys = undefined;\n  arr = convertArray(arr);\n\n  // determine order (last argument)\n  var args = toArray(arguments, 1);\n  var order = args[args.length - 1];\n  if (typeof order === 'number') {\n    order = order < 0 ? -1 : 1;\n    args = args.length > 1 ? args.slice(0, -1) : args;\n  } else {\n    order = 1;\n  }\n\n  // determine sortKeys & comparator\n  var firstArg = args[0];\n  if (!firstArg) {\n    return arr;\n  } else if (typeof firstArg === 'function') {\n    // custom comparator\n    comparator = function (a, b) {\n      return firstArg(a, b) * order;\n    };\n  } else {\n    // string keys. flatten first\n    sortKeys = Array.prototype.concat.apply([], args);\n    comparator = function (a, b, i) {\n      i = i || 0;\n      return i >= sortKeys.length - 1 ? baseCompare(a, b, i) : baseCompare(a, b, i) || comparator(a, b, i + 1);\n    };\n  }\n\n  function baseCompare(a, b, sortKeyIndex) {\n    var sortKey = sortKeys[sortKeyIndex];\n    if (sortKey) {\n      if (sortKey !== '$key') {\n        if (isObject(a) && '$value' in a) a = a.$value;\n        if (isObject(b) && '$value' in b) b = b.$value;\n      }\n      a = isObject(a) ? getPath(a, sortKey) : a;\n      b = isObject(b) ? getPath(b, sortKey) : b;\n    }\n    return a === b ? 0 : a > b ? order : -order;\n  }\n\n  // sort on a copy to avoid mutating original array\n  return arr.slice().sort(comparator);\n}\n\n/**\n * String contain helper\n *\n * @param {*} val\n * @param {String} search\n */\n\nfunction contains(val, search) {\n  var i;\n  if (isPlainObject(val)) {\n    var keys = Object.keys(val);\n    i = keys.length;\n    while (i--) {\n      if (contains(val[keys[i]], search)) {\n        return true;\n      }\n    }\n  } else if (isArray(val)) {\n    i = val.length;\n    while (i--) {\n      if (contains(val[i], search)) {\n        return true;\n      }\n    }\n  } else if (val != null) {\n    return val.toString().toLowerCase().indexOf(search) > -1;\n  }\n}\n\nvar digitsRE = /(\\d{3})(?=\\d)/g;\n\n// asset collections must be a plain object.\nvar filters = {\n\n  orderBy: orderBy,\n  filterBy: filterBy,\n  limitBy: limitBy,\n\n  /**\n   * Stringify value.\n   *\n   * @param {Number} indent\n   */\n\n  json: {\n    read: function read(value, indent) {\n      return typeof value === 'string' ? value : JSON.stringify(value, null, arguments.length > 1 ? indent : 2);\n    },\n    write: function write(value) {\n      try {\n        return JSON.parse(value);\n      } catch (e) {\n        return value;\n      }\n    }\n  },\n\n  /**\n   * 'abc' => 'Abc'\n   */\n\n  capitalize: function capitalize(value) {\n    if (!value && value !== 0) return '';\n    value = value.toString();\n    return value.charAt(0).toUpperCase() + value.slice(1);\n  },\n\n  /**\n   * 'abc' => 'ABC'\n   */\n\n  uppercase: function uppercase(value) {\n    return value || value === 0 ? value.toString().toUpperCase() : '';\n  },\n\n  /**\n   * 'AbC' => 'abc'\n   */\n\n  lowercase: function lowercase(value) {\n    return value || value === 0 ? value.toString().toLowerCase() : '';\n  },\n\n  /**\n   * 12345 => $12,345.00\n   *\n   * @param {String} sign\n   * @param {Number} decimals Decimal places\n   */\n\n  currency: function currency(value, _currency, decimals) {\n    value = parseFloat(value);\n    if (!isFinite(value) || !value && value !== 0) return '';\n    _currency = _currency != null ? _currency : '$';\n    decimals = decimals != null ? decimals : 2;\n    var stringified = Math.abs(value).toFixed(decimals);\n    var _int = decimals ? stringified.slice(0, -1 - decimals) : stringified;\n    var i = _int.length % 3;\n    var head = i > 0 ? _int.slice(0, i) + (_int.length > 3 ? ',' : '') : '';\n    var _float = decimals ? stringified.slice(-1 - decimals) : '';\n    var sign = value < 0 ? '-' : '';\n    return sign + _currency + head + _int.slice(i).replace(digitsRE, '$1,') + _float;\n  },\n\n  /**\n   * 'item' => 'items'\n   *\n   * @params\n   *  an array of strings corresponding to\n   *  the single, double, triple ... forms of the word to\n   *  be pluralized. When the number to be pluralized\n   *  exceeds the length of the args, it will use the last\n   *  entry in the array.\n   *\n   *  e.g. ['single', 'double', 'triple', 'multiple']\n   */\n\n  pluralize: function pluralize(value) {\n    var args = toArray(arguments, 1);\n    var length = args.length;\n    if (length > 1) {\n      var index = value % 10 - 1;\n      return index in args ? args[index] : args[length - 1];\n    } else {\n      return args[0] + (value === 1 ? '' : 's');\n    }\n  },\n\n  /**\n   * Debounce a handler function.\n   *\n   * @param {Function} handler\n   * @param {Number} delay = 300\n   * @return {Function}\n   */\n\n  debounce: function debounce(handler, delay) {\n    if (!handler) return;\n    if (!delay) {\n      delay = 300;\n    }\n    return _debounce(handler, delay);\n  }\n};\n\nfunction installGlobalAPI (Vue) {\n  /**\n   * Vue and every constructor that extends Vue has an\n   * associated options object, which can be accessed during\n   * compilation steps as `this.constructor.options`.\n   *\n   * These can be seen as the default options of every\n   * Vue instance.\n   */\n\n  Vue.options = {\n    directives: directives,\n    elementDirectives: elementDirectives,\n    filters: filters,\n    transitions: {},\n    components: {},\n    partials: {},\n    replace: true\n  };\n\n  /**\n   * Expose useful internals\n   */\n\n  Vue.util = util;\n  Vue.config = config;\n  Vue.set = set;\n  Vue['delete'] = del;\n  Vue.nextTick = nextTick;\n\n  /**\n   * The following are exposed for advanced usage / plugins\n   */\n\n  Vue.compiler = compiler;\n  Vue.FragmentFactory = FragmentFactory;\n  Vue.internalDirectives = internalDirectives;\n  Vue.parsers = {\n    path: path,\n    text: text,\n    template: template,\n    directive: directive,\n    expression: expression\n  };\n\n  /**\n   * Each instance constructor, including Vue, has a unique\n   * cid. This enables us to create wrapped \"child\n   * constructors\" for prototypal inheritance and cache them.\n   */\n\n  Vue.cid = 0;\n  var cid = 1;\n\n  /**\n   * Class inheritance\n   *\n   * @param {Object} extendOptions\n   */\n\n  Vue.extend = function (extendOptions) {\n    extendOptions = extendOptions || {};\n    var Super = this;\n    var isFirstExtend = Super.cid === 0;\n    if (isFirstExtend && extendOptions._Ctor) {\n      return extendOptions._Ctor;\n    }\n    var name = extendOptions.name || Super.options.name;\n    if (process.env.NODE_ENV !== 'production') {\n      if (!/^[a-zA-Z][\\w-]*$/.test(name)) {\n        warn('Invalid component name: \"' + name + '\". Component names ' + 'can only contain alphanumeric characaters and the hyphen.');\n        name = null;\n      }\n    }\n    var Sub = createClass(name || 'VueComponent');\n    Sub.prototype = Object.create(Super.prototype);\n    Sub.prototype.constructor = Sub;\n    Sub.cid = cid++;\n    Sub.options = mergeOptions(Super.options, extendOptions);\n    Sub['super'] = Super;\n    // allow further extension\n    Sub.extend = Super.extend;\n    // create asset registers, so extended classes\n    // can have their private assets too.\n    config._assetTypes.forEach(function (type) {\n      Sub[type] = Super[type];\n    });\n    // enable recursive self-lookup\n    if (name) {\n      Sub.options.components[name] = Sub;\n    }\n    // cache constructor\n    if (isFirstExtend) {\n      extendOptions._Ctor = Sub;\n    }\n    return Sub;\n  };\n\n  /**\n   * A function that returns a sub-class constructor with the\n   * given name. This gives us much nicer output when\n   * logging instances in the console.\n   *\n   * @param {String} name\n   * @return {Function}\n   */\n\n  function createClass(name) {\n    /* eslint-disable no-new-func */\n    return new Function('return function ' + classify(name) + ' (options) { this._init(options) }')();\n    /* eslint-enable no-new-func */\n  }\n\n  /**\n   * Plugin system\n   *\n   * @param {Object} plugin\n   */\n\n  Vue.use = function (plugin) {\n    /* istanbul ignore if */\n    if (plugin.installed) {\n      return;\n    }\n    // additional parameters\n    var args = toArray(arguments, 1);\n    args.unshift(this);\n    if (typeof plugin.install === 'function') {\n      plugin.install.apply(plugin, args);\n    } else {\n      plugin.apply(null, args);\n    }\n    plugin.installed = true;\n    return this;\n  };\n\n  /**\n   * Apply a global mixin by merging it into the default\n   * options.\n   */\n\n  Vue.mixin = function (mixin) {\n    Vue.options = mergeOptions(Vue.options, mixin);\n  };\n\n  /**\n   * Create asset registration methods with the following\n   * signature:\n   *\n   * @param {String} id\n   * @param {*} definition\n   */\n\n  config._assetTypes.forEach(function (type) {\n    Vue[type] = function (id, definition) {\n      if (!definition) {\n        return this.options[type + 's'][id];\n      } else {\n        /* istanbul ignore if */\n        if (process.env.NODE_ENV !== 'production') {\n          if (type === 'component' && (commonTagRE.test(id) || reservedTagRE.test(id))) {\n            warn('Do not use built-in or reserved HTML elements as component ' + 'id: ' + id);\n          }\n        }\n        if (type === 'component' && isPlainObject(definition)) {\n          if (!definition.name) {\n            definition.name = id;\n          }\n          definition = Vue.extend(definition);\n        }\n        this.options[type + 's'][id] = definition;\n        return definition;\n      }\n    };\n  });\n\n  // expose internal transition API\n  extend(Vue.transition, transition);\n}\n\ninstallGlobalAPI(Vue);\n\nVue.version = '1.0.28';\n\n// devtools global hook\n/* istanbul ignore next */\nsetTimeout(function () {\n  if (config.devtools) {\n    if (devtools) {\n      devtools.emit('init', Vue);\n    } else if (process.env.NODE_ENV !== 'production' && inBrowser && /Chrome\\/\\d+/.test(window.navigator.userAgent)) {\n      console.log('Download the Vue Devtools for a better development experience:\\n' + 'https://github.com/vuejs/vue-devtools');\n    }\n  }\n}, 0);\n\nmodule.exports = Vue;\n}).call(this,require('_process'))\n\n},{\"_process\":1}],4:[function(require,module,exports){\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = {};\nif (module.exports.__esModule) module.exports = module.exports.default\n;(typeof module.exports === \"function\"? module.exports.options: module.exports).template = \"\\n<form action=\\\"posts/1\\\" v-ajax=\\\"\\\">\\n    <button type=\\\"submit\\\">\\n        List\\n    </button>\\n</form>\\n\"\nif (module.hot) {(function () {  module.hot.accept()\n  var hotAPI = require(\"vue-hot-reload-api\")\n  hotAPI.install(require(\"vue\"), true)\n  if (!hotAPI.compatible) return\n  if (!module.hot.data) {\n    hotAPI.createRecord(\"_v-3f0c8eec\", module.exports)\n  } else {\n    hotAPI.update(\"_v-3f0c8eec\", module.exports, (typeof module.exports === \"function\" ? module.exports.options : module.exports).template)\n  }\n})()}\n},{\"vue\":3,\"vue-hot-reload-api\":2}],5:[function(require,module,exports){\n'use strict';\n\nvar _App = require('./App.vue');\n\nvar _App2 = _interopRequireDefault(_App);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar Vue = require('vue');\n\nVue.http.headers.common['X-CSRF-TOKEN'] = document.querySelector('input[name=\"_token\"]').value;\n\nVue.directive('ajax', {\n    bind: function bind() {\n        this.el.addEventListener('submit', this.onSubmit.bind(this));\n    },\n    update: function update() {\n        console.log('updated');\n    },\n    unbind: function unbind() {},\n    onSubmitn: function onSubmitn(e) {\n        var self = this;\n\n        e.preventDefault();\n\n        self.vm.$http[this.getRequestType()](this.el.action).then(this.onComplete.bind(this));\n    },\n    onComplete: function onComplete() {\n        console.log('Complete');\n    },\n    getRequestType: function getRequestType() {\n        var method = this.el.querySelector('input[name=\"_method\"]');\n\n        return (method ? method.value : this.el.method).toLowerCase();\n    }\n});\n\nnew Vue({\n    el: '#app',\n\n    components: {\n        App: _App2.default\n    }\n});\n\n},{\"./App.vue\":4,\"vue\":3}]},{},[5])\n\n","var Vue // late bind\nvar map = window.__VUE_HOT_MAP__ = Object.create(null)\nvar installed = false\nvar isBrowserify = false\nvar initHookName = 'beforeCreate'\n\nexports.install = function (vue, browserify) {\n  if (installed) return\n  installed = true\n\n  Vue = vue\n  isBrowserify = browserify\n\n  // compat with < 2.0.0-alpha.7\n  if (Vue.config._lifecycleHooks.indexOf('init') > -1) {\n    initHookName = 'init'\n  }\n\n  exports.compatible = Number(Vue.version.split('.')[0]) >= 2\n  if (!exports.compatible) {\n    console.warn(\n      '[HMR] You are using a version of vue-hot-reload-api that is ' +\n      'only compatible with Vue.js core ^2.0.0.'\n    )\n    return\n  }\n}\n\n/**\n * Create a record for a hot module, which keeps track of its constructor\n * and instances\n *\n * @param {String} id\n * @param {Object} options\n */\n\nexports.createRecord = function (id, options) {\n  var Ctor = null\n  if (typeof options === 'function') {\n    Ctor = options\n    options = Ctor.options\n  }\n  makeOptionsHot(id, options)\n  map[id] = {\n    Ctor: Vue.extend(options),\n    instances: []\n  }\n}\n\n/**\n * Make a Component options object hot.\n *\n * @param {String} id\n * @param {Object} options\n */\n\nfunction makeOptionsHot (id, options) {\n  injectHook(options, initHookName, function () {\n    map[id].instances.push(this)\n  })\n  injectHook(options, 'beforeDestroy', function () {\n    var instances = map[id].instances\n    instances.splice(instances.indexOf(this), 1)\n  })\n}\n\n/**\n * Inject a hook to a hot reloadable component so that\n * we can keep track of it.\n *\n * @param {Object} options\n * @param {String} name\n * @param {Function} hook\n */\n\nfunction injectHook (options, name, hook) {\n  var existing = options[name]\n  options[name] = existing\n    ? Array.isArray(existing)\n      ? existing.concat(hook)\n      : [existing, hook]\n    : [hook]\n}\n\nfunction tryWrap (fn) {\n  return function (id, arg) {\n    try { fn(id, arg) } catch (e) {\n      console.error(e)\n      console.warn('Something went wrong during Vue component hot-reload. Full reload required.')\n    }\n  }\n}\n\nexports.rerender = tryWrap(function (id, fns) {\n  var record = map[id]\n  record.Ctor.options.render = fns.render\n  record.Ctor.options.staticRenderFns = fns.staticRenderFns\n  record.instances.slice().forEach(function (instance) {\n    instance.$options.render = fns.render\n    instance.$options.staticRenderFns = fns.staticRenderFns\n    instance._staticTrees = [] // reset static trees\n    instance.$forceUpdate()\n  })\n})\n\nexports.reload = tryWrap(function (id, options) {\n  makeOptionsHot(id, options)\n  var record = map[id]\n  record.Ctor.extendOptions = options\n  var newCtor = Vue.extend(options)\n  record.Ctor.options = newCtor.options\n  record.Ctor.cid = newCtor.cid\n  if (newCtor.release) {\n    // temporary global mixin strategy used in < 2.0.0-alpha.6\n    newCtor.release()\n  }\n  record.instances.slice().forEach(function (instance) {\n    if (instance.$parent) {\n      instance.$parent.$forceUpdate()\n    } else {\n      console.warn('Root or manually mounted instance modified. Full reload required.')\n    }\n  })\n})\n","/*!\n * Vue.js v1.0.28\n * (c) 2016 Evan You\n * Released under the MIT License.\n */\n'use strict';\n\nfunction set(obj, key, val) {\n  if (hasOwn(obj, key)) {\n    obj[key] = val;\n    return;\n  }\n  if (obj._isVue) {\n    set(obj._data, key, val);\n    return;\n  }\n  var ob = obj.__ob__;\n  if (!ob) {\n    obj[key] = val;\n    return;\n  }\n  ob.convert(key, val);\n  ob.dep.notify();\n  if (ob.vms) {\n    var i = ob.vms.length;\n    while (i--) {\n      var vm = ob.vms[i];\n      vm._proxy(key);\n      vm._digest();\n    }\n  }\n  return val;\n}\n\n/**\n * Delete a property and trigger change if necessary.\n *\n * @param {Object} obj\n * @param {String} key\n */\n\nfunction del(obj, key) {\n  if (!hasOwn(obj, key)) {\n    return;\n  }\n  delete obj[key];\n  var ob = obj.__ob__;\n  if (!ob) {\n    if (obj._isVue) {\n      delete obj._data[key];\n      obj._digest();\n    }\n    return;\n  }\n  ob.dep.notify();\n  if (ob.vms) {\n    var i = ob.vms.length;\n    while (i--) {\n      var vm = ob.vms[i];\n      vm._unproxy(key);\n      vm._digest();\n    }\n  }\n}\n\nvar hasOwnProperty = Object.prototype.hasOwnProperty;\n/**\n * Check whether the object has the property.\n *\n * @param {Object} obj\n * @param {String} key\n * @return {Boolean}\n */\n\nfunction hasOwn(obj, key) {\n  return hasOwnProperty.call(obj, key);\n}\n\n/**\n * Check if an expression is a literal value.\n *\n * @param {String} exp\n * @return {Boolean}\n */\n\nvar literalValueRE = /^\\s?(true|false|-?[\\d\\.]+|'[^']*'|\"[^\"]*\")\\s?$/;\n\nfunction isLiteral(exp) {\n  return literalValueRE.test(exp);\n}\n\n/**\n * Check if a string starts with $ or _\n *\n * @param {String} str\n * @return {Boolean}\n */\n\nfunction isReserved(str) {\n  var c = (str + '').charCodeAt(0);\n  return c === 0x24 || c === 0x5F;\n}\n\n/**\n * Guard text output, make sure undefined outputs\n * empty string\n *\n * @param {*} value\n * @return {String}\n */\n\nfunction _toString(value) {\n  return value == null ? '' : value.toString();\n}\n\n/**\n * Check and convert possible numeric strings to numbers\n * before setting back to data\n *\n * @param {*} value\n * @return {*|Number}\n */\n\nfunction toNumber(value) {\n  if (typeof value !== 'string') {\n    return value;\n  } else {\n    var parsed = Number(value);\n    return isNaN(parsed) ? value : parsed;\n  }\n}\n\n/**\n * Convert string boolean literals into real booleans.\n *\n * @param {*} value\n * @return {*|Boolean}\n */\n\nfunction toBoolean(value) {\n  return value === 'true' ? true : value === 'false' ? false : value;\n}\n\n/**\n * Strip quotes from a string\n *\n * @param {String} str\n * @return {String | false}\n */\n\nfunction stripQuotes(str) {\n  var a = str.charCodeAt(0);\n  var b = str.charCodeAt(str.length - 1);\n  return a === b && (a === 0x22 || a === 0x27) ? str.slice(1, -1) : str;\n}\n\n/**\n * Camelize a hyphen-delimited string.\n *\n * @param {String} str\n * @return {String}\n */\n\nvar camelizeRE = /-(\\w)/g;\n\nfunction camelize(str) {\n  return str.replace(camelizeRE, toUpper);\n}\n\nfunction toUpper(_, c) {\n  return c ? c.toUpperCase() : '';\n}\n\n/**\n * Hyphenate a camelCase string.\n *\n * @param {String} str\n * @return {String}\n */\n\nvar hyphenateRE = /([^-])([A-Z])/g;\n\nfunction hyphenate(str) {\n  return str.replace(hyphenateRE, '$1-$2').replace(hyphenateRE, '$1-$2').toLowerCase();\n}\n\n/**\n * Converts hyphen/underscore/slash delimitered names into\n * camelized classNames.\n *\n * e.g. my-component => MyComponent\n *      some_else    => SomeElse\n *      some/comp    => SomeComp\n *\n * @param {String} str\n * @return {String}\n */\n\nvar classifyRE = /(?:^|[-_\\/])(\\w)/g;\n\nfunction classify(str) {\n  return str.replace(classifyRE, toUpper);\n}\n\n/**\n * Simple bind, faster than native\n *\n * @param {Function} fn\n * @param {Object} ctx\n * @return {Function}\n */\n\nfunction bind(fn, ctx) {\n  return function (a) {\n    var l = arguments.length;\n    return l ? l > 1 ? fn.apply(ctx, arguments) : fn.call(ctx, a) : fn.call(ctx);\n  };\n}\n\n/**\n * Convert an Array-like object to a real Array.\n *\n * @param {Array-like} list\n * @param {Number} [start] - start index\n * @return {Array}\n */\n\nfunction toArray(list, start) {\n  start = start || 0;\n  var i = list.length - start;\n  var ret = new Array(i);\n  while (i--) {\n    ret[i] = list[i + start];\n  }\n  return ret;\n}\n\n/**\n * Mix properties into target object.\n *\n * @param {Object} to\n * @param {Object} from\n */\n\nfunction extend(to, from) {\n  var keys = Object.keys(from);\n  var i = keys.length;\n  while (i--) {\n    to[keys[i]] = from[keys[i]];\n  }\n  return to;\n}\n\n/**\n * Quick object check - this is primarily used to tell\n * Objects from primitive values when we know the value\n * is a JSON-compliant type.\n *\n * @param {*} obj\n * @return {Boolean}\n */\n\nfunction isObject(obj) {\n  return obj !== null && typeof obj === 'object';\n}\n\n/**\n * Strict object type check. Only returns true\n * for plain JavaScript objects.\n *\n * @param {*} obj\n * @return {Boolean}\n */\n\nvar toString = Object.prototype.toString;\nvar OBJECT_STRING = '[object Object]';\n\nfunction isPlainObject(obj) {\n  return toString.call(obj) === OBJECT_STRING;\n}\n\n/**\n * Array type check.\n *\n * @param {*} obj\n * @return {Boolean}\n */\n\nvar isArray = Array.isArray;\n\n/**\n * Define a property.\n *\n * @param {Object} obj\n * @param {String} key\n * @param {*} val\n * @param {Boolean} [enumerable]\n */\n\nfunction def(obj, key, val, enumerable) {\n  Object.defineProperty(obj, key, {\n    value: val,\n    enumerable: !!enumerable,\n    writable: true,\n    configurable: true\n  });\n}\n\n/**\n * Debounce a function so it only gets called after the\n * input stops arriving after the given wait period.\n *\n * @param {Function} func\n * @param {Number} wait\n * @return {Function} - the debounced function\n */\n\nfunction _debounce(func, wait) {\n  var timeout, args, context, timestamp, result;\n  var later = function later() {\n    var last = Date.now() - timestamp;\n    if (last < wait && last >= 0) {\n      timeout = setTimeout(later, wait - last);\n    } else {\n      timeout = null;\n      result = func.apply(context, args);\n      if (!timeout) context = args = null;\n    }\n  };\n  return function () {\n    context = this;\n    args = arguments;\n    timestamp = Date.now();\n    if (!timeout) {\n      timeout = setTimeout(later, wait);\n    }\n    return result;\n  };\n}\n\n/**\n * Manual indexOf because it's slightly faster than\n * native.\n *\n * @param {Array} arr\n * @param {*} obj\n */\n\nfunction indexOf(arr, obj) {\n  var i = arr.length;\n  while (i--) {\n    if (arr[i] === obj) return i;\n  }\n  return -1;\n}\n\n/**\n * Make a cancellable version of an async callback.\n *\n * @param {Function} fn\n * @return {Function}\n */\n\nfunction cancellable(fn) {\n  var cb = function cb() {\n    if (!cb.cancelled) {\n      return fn.apply(this, arguments);\n    }\n  };\n  cb.cancel = function () {\n    cb.cancelled = true;\n  };\n  return cb;\n}\n\n/**\n * Check if two values are loosely equal - that is,\n * if they are plain objects, do they have the same shape?\n *\n * @param {*} a\n * @param {*} b\n * @return {Boolean}\n */\n\nfunction looseEqual(a, b) {\n  /* eslint-disable eqeqeq */\n  return a == b || (isObject(a) && isObject(b) ? JSON.stringify(a) === JSON.stringify(b) : false);\n  /* eslint-enable eqeqeq */\n}\n\nvar hasProto = ('__proto__' in {});\n\n// Browser environment sniffing\nvar inBrowser = typeof window !== 'undefined' && Object.prototype.toString.call(window) !== '[object Object]';\n\n// detect devtools\nvar devtools = inBrowser && window.__VUE_DEVTOOLS_GLOBAL_HOOK__;\n\n// UA sniffing for working around browser-specific quirks\nvar UA = inBrowser && window.navigator.userAgent.toLowerCase();\nvar isIE = UA && UA.indexOf('trident') > 0;\nvar isIE9 = UA && UA.indexOf('msie 9.0') > 0;\nvar isAndroid = UA && UA.indexOf('android') > 0;\nvar isIOS = UA && /iphone|ipad|ipod|ios/.test(UA);\n\nvar transitionProp = undefined;\nvar transitionEndEvent = undefined;\nvar animationProp = undefined;\nvar animationEndEvent = undefined;\n\n// Transition property/event sniffing\nif (inBrowser && !isIE9) {\n  var isWebkitTrans = window.ontransitionend === undefined && window.onwebkittransitionend !== undefined;\n  var isWebkitAnim = window.onanimationend === undefined && window.onwebkitanimationend !== undefined;\n  transitionProp = isWebkitTrans ? 'WebkitTransition' : 'transition';\n  transitionEndEvent = isWebkitTrans ? 'webkitTransitionEnd' : 'transitionend';\n  animationProp = isWebkitAnim ? 'WebkitAnimation' : 'animation';\n  animationEndEvent = isWebkitAnim ? 'webkitAnimationEnd' : 'animationend';\n}\n\n/* istanbul ignore next */\nfunction isNative(Ctor) {\n  return (/native code/.test(Ctor.toString())\n  );\n}\n\n/**\n * Defer a task to execute it asynchronously. Ideally this\n * should be executed as a microtask, so we leverage\n * MutationObserver if it's available, and fallback to\n * setTimeout(0).\n *\n * @param {Function} cb\n * @param {Object} ctx\n */\n\nvar nextTick = (function () {\n  var callbacks = [];\n  var pending = false;\n  var timerFunc = undefined;\n\n  function nextTickHandler() {\n    pending = false;\n    var copies = callbacks.slice(0);\n    callbacks.length = 0;\n    for (var i = 0; i < copies.length; i++) {\n      copies[i]();\n    }\n  }\n\n  // the nextTick behavior leverages the microtask queue, which can be accessed\n  // via either native Promise.then or MutationObserver.\n  // MutationObserver has wider support, however it is seriously bugged in\n  // UIWebView in iOS >= 9.3.3 when triggered in touch event handlers. It\n  // completely stops working after triggering a few times... so, if native\n  // Promise is available, we will use it:\n  /* istanbul ignore if */\n  if (typeof Promise !== 'undefined' && isNative(Promise)) {\n    var p = Promise.resolve();\n    var noop = function noop() {};\n    timerFunc = function () {\n      p.then(nextTickHandler);\n      // in problematic UIWebViews, Promise.then doesn't completely break, but\n      // it can get stuck in a weird state where callbacks are pushed into the\n      // microtask queue but the queue isn't being flushed, until the browser\n      // needs to do some other work, e.g. handle a timer. Therefore we can\n      // \"force\" the microtask queue to be flushed by adding an empty timer.\n      if (isIOS) setTimeout(noop);\n    };\n  } else if (typeof MutationObserver !== 'undefined') {\n    // use MutationObserver where native Promise is not available,\n    // e.g. IE11, iOS7, Android 4.4\n    var counter = 1;\n    var observer = new MutationObserver(nextTickHandler);\n    var textNode = document.createTextNode(String(counter));\n    observer.observe(textNode, {\n      characterData: true\n    });\n    timerFunc = function () {\n      counter = (counter + 1) % 2;\n      textNode.data = String(counter);\n    };\n  } else {\n    // fallback to setTimeout\n    /* istanbul ignore next */\n    timerFunc = setTimeout;\n  }\n\n  return function (cb, ctx) {\n    var func = ctx ? function () {\n      cb.call(ctx);\n    } : cb;\n    callbacks.push(func);\n    if (pending) return;\n    pending = true;\n    timerFunc(nextTickHandler, 0);\n  };\n})();\n\nvar _Set = undefined;\n/* istanbul ignore if */\nif (typeof Set !== 'undefined' && isNative(Set)) {\n  // use native Set when available.\n  _Set = Set;\n} else {\n  // a non-standard Set polyfill that only works with primitive keys.\n  _Set = function () {\n    this.set = Object.create(null);\n  };\n  _Set.prototype.has = function (key) {\n    return this.set[key] !== undefined;\n  };\n  _Set.prototype.add = function (key) {\n    this.set[key] = 1;\n  };\n  _Set.prototype.clear = function () {\n    this.set = Object.create(null);\n  };\n}\n\nfunction Cache(limit) {\n  this.size = 0;\n  this.limit = limit;\n  this.head = this.tail = undefined;\n  this._keymap = Object.create(null);\n}\n\nvar p = Cache.prototype;\n\n/**\n * Put <value> into the cache associated with <key>.\n * Returns the entry which was removed to make room for\n * the new entry. Otherwise undefined is returned.\n * (i.e. if there was enough room already).\n *\n * @param {String} key\n * @param {*} value\n * @return {Entry|undefined}\n */\n\np.put = function (key, value) {\n  var removed;\n\n  var entry = this.get(key, true);\n  if (!entry) {\n    if (this.size === this.limit) {\n      removed = this.shift();\n    }\n    entry = {\n      key: key\n    };\n    this._keymap[key] = entry;\n    if (this.tail) {\n      this.tail.newer = entry;\n      entry.older = this.tail;\n    } else {\n      this.head = entry;\n    }\n    this.tail = entry;\n    this.size++;\n  }\n  entry.value = value;\n\n  return removed;\n};\n\n/**\n * Purge the least recently used (oldest) entry from the\n * cache. Returns the removed entry or undefined if the\n * cache was empty.\n */\n\np.shift = function () {\n  var entry = this.head;\n  if (entry) {\n    this.head = this.head.newer;\n    this.head.older = undefined;\n    entry.newer = entry.older = undefined;\n    this._keymap[entry.key] = undefined;\n    this.size--;\n  }\n  return entry;\n};\n\n/**\n * Get and register recent use of <key>. Returns the value\n * associated with <key> or undefined if not in cache.\n *\n * @param {String} key\n * @param {Boolean} returnEntry\n * @return {Entry|*}\n */\n\np.get = function (key, returnEntry) {\n  var entry = this._keymap[key];\n  if (entry === undefined) return;\n  if (entry === this.tail) {\n    return returnEntry ? entry : entry.value;\n  }\n  // HEAD--------------TAIL\n  //   <.older   .newer>\n  //  <--- add direction --\n  //   A  B  C  <D>  E\n  if (entry.newer) {\n    if (entry === this.head) {\n      this.head = entry.newer;\n    }\n    entry.newer.older = entry.older; // C <-- E.\n  }\n  if (entry.older) {\n    entry.older.newer = entry.newer; // C. --> E\n  }\n  entry.newer = undefined; // D --x\n  entry.older = this.tail; // D. --> E\n  if (this.tail) {\n    this.tail.newer = entry; // E. <-- D\n  }\n  this.tail = entry;\n  return returnEntry ? entry : entry.value;\n};\n\nvar cache$1 = new Cache(1000);\nvar reservedArgRE = /^in$|^-?\\d+/;\n\n/**\n * Parser state\n */\n\nvar str;\nvar dir;\nvar len;\nvar index;\nvar chr;\nvar state;\nvar startState = 0;\nvar filterState = 1;\nvar filterNameState = 2;\nvar filterArgState = 3;\n\nvar doubleChr = 0x22;\nvar singleChr = 0x27;\nvar pipeChr = 0x7C;\nvar escapeChr = 0x5C;\nvar spaceChr = 0x20;\n\nvar expStartChr = { 0x5B: 1, 0x7B: 1, 0x28: 1 };\nvar expChrPair = { 0x5B: 0x5D, 0x7B: 0x7D, 0x28: 0x29 };\n\nfunction peek() {\n  return str.charCodeAt(index + 1);\n}\n\nfunction next() {\n  return str.charCodeAt(++index);\n}\n\nfunction eof() {\n  return index >= len;\n}\n\nfunction eatSpace() {\n  while (peek() === spaceChr) {\n    next();\n  }\n}\n\nfunction isStringStart(chr) {\n  return chr === doubleChr || chr === singleChr;\n}\n\nfunction isExpStart(chr) {\n  return expStartChr[chr];\n}\n\nfunction isExpEnd(start, chr) {\n  return expChrPair[start] === chr;\n}\n\nfunction parseString() {\n  var stringQuote = next();\n  var chr;\n  while (!eof()) {\n    chr = next();\n    // escape char\n    if (chr === escapeChr) {\n      next();\n    } else if (chr === stringQuote) {\n      break;\n    }\n  }\n}\n\nfunction parseSpecialExp(chr) {\n  var inExp = 0;\n  var startChr = chr;\n\n  while (!eof()) {\n    chr = peek();\n    if (isStringStart(chr)) {\n      parseString();\n      continue;\n    }\n\n    if (startChr === chr) {\n      inExp++;\n    }\n    if (isExpEnd(startChr, chr)) {\n      inExp--;\n    }\n\n    next();\n\n    if (inExp === 0) {\n      break;\n    }\n  }\n}\n\n/**\n * syntax:\n * expression | filterName  [arg  arg [| filterName arg arg]]\n */\n\nfunction parseExpression() {\n  var start = index;\n  while (!eof()) {\n    chr = peek();\n    if (isStringStart(chr)) {\n      parseString();\n    } else if (isExpStart(chr)) {\n      parseSpecialExp(chr);\n    } else if (chr === pipeChr) {\n      next();\n      chr = peek();\n      if (chr === pipeChr) {\n        next();\n      } else {\n        if (state === startState || state === filterArgState) {\n          state = filterState;\n        }\n        break;\n      }\n    } else if (chr === spaceChr && (state === filterNameState || state === filterArgState)) {\n      eatSpace();\n      break;\n    } else {\n      if (state === filterState) {\n        state = filterNameState;\n      }\n      next();\n    }\n  }\n\n  return str.slice(start + 1, index) || null;\n}\n\nfunction parseFilterList() {\n  var filters = [];\n  while (!eof()) {\n    filters.push(parseFilter());\n  }\n  return filters;\n}\n\nfunction parseFilter() {\n  var filter = {};\n  var args;\n\n  state = filterState;\n  filter.name = parseExpression().trim();\n\n  state = filterArgState;\n  args = parseFilterArguments();\n\n  if (args.length) {\n    filter.args = args;\n  }\n  return filter;\n}\n\nfunction parseFilterArguments() {\n  var args = [];\n  while (!eof() && state !== filterState) {\n    var arg = parseExpression();\n    if (!arg) {\n      break;\n    }\n    args.push(processFilterArg(arg));\n  }\n\n  return args;\n}\n\n/**\n * Check if an argument is dynamic and strip quotes.\n *\n * @param {String} arg\n * @return {Object}\n */\n\nfunction processFilterArg(arg) {\n  if (reservedArgRE.test(arg)) {\n    return {\n      value: toNumber(arg),\n      dynamic: false\n    };\n  } else {\n    var stripped = stripQuotes(arg);\n    var dynamic = stripped === arg;\n    return {\n      value: dynamic ? arg : stripped,\n      dynamic: dynamic\n    };\n  }\n}\n\n/**\n * Parse a directive value and extract the expression\n * and its filters into a descriptor.\n *\n * Example:\n *\n * \"a + 1 | uppercase\" will yield:\n * {\n *   expression: 'a + 1',\n *   filters: [\n *     { name: 'uppercase', args: null }\n *   ]\n * }\n *\n * @param {String} s\n * @return {Object}\n */\n\nfunction parseDirective(s) {\n  var hit = cache$1.get(s);\n  if (hit) {\n    return hit;\n  }\n\n  // reset parser state\n  str = s;\n  dir = {};\n  len = str.length;\n  index = -1;\n  chr = '';\n  state = startState;\n\n  var filters;\n\n  if (str.indexOf('|') < 0) {\n    dir.expression = str.trim();\n  } else {\n    dir.expression = parseExpression().trim();\n    filters = parseFilterList();\n    if (filters.length) {\n      dir.filters = filters;\n    }\n  }\n\n  cache$1.put(s, dir);\n  return dir;\n}\n\nvar directive = Object.freeze({\n  parseDirective: parseDirective\n});\n\nvar regexEscapeRE = /[-.*+?^${}()|[\\]\\/\\\\]/g;\nvar cache = undefined;\nvar tagRE = undefined;\nvar htmlRE = undefined;\n/**\n * Escape a string so it can be used in a RegExp\n * constructor.\n *\n * @param {String} str\n */\n\nfunction escapeRegex(str) {\n  return str.replace(regexEscapeRE, '\\\\$&');\n}\n\nfunction compileRegex() {\n  var open = escapeRegex(config.delimiters[0]);\n  var close = escapeRegex(config.delimiters[1]);\n  var unsafeOpen = escapeRegex(config.unsafeDelimiters[0]);\n  var unsafeClose = escapeRegex(config.unsafeDelimiters[1]);\n  tagRE = new RegExp(unsafeOpen + '((?:.|\\\\n)+?)' + unsafeClose + '|' + open + '((?:.|\\\\n)+?)' + close, 'g');\n  htmlRE = new RegExp('^' + unsafeOpen + '((?:.|\\\\n)+?)' + unsafeClose + '$');\n  // reset cache\n  cache = new Cache(1000);\n}\n\n/**\n * Parse a template text string into an array of tokens.\n *\n * @param {String} text\n * @return {Array<Object> | null}\n *               - {String} type\n *               - {String} value\n *               - {Boolean} [html]\n *               - {Boolean} [oneTime]\n */\n\nfunction parseText(text) {\n  if (!cache) {\n    compileRegex();\n  }\n  var hit = cache.get(text);\n  if (hit) {\n    return hit;\n  }\n  if (!tagRE.test(text)) {\n    return null;\n  }\n  var tokens = [];\n  var lastIndex = tagRE.lastIndex = 0;\n  var match, index, html, value, first, oneTime;\n  /* eslint-disable no-cond-assign */\n  while (match = tagRE.exec(text)) {\n    /* eslint-enable no-cond-assign */\n    index = match.index;\n    // push text token\n    if (index > lastIndex) {\n      tokens.push({\n        value: text.slice(lastIndex, index)\n      });\n    }\n    // tag token\n    html = htmlRE.test(match[0]);\n    value = html ? match[1] : match[2];\n    first = value.charCodeAt(0);\n    oneTime = first === 42; // *\n    value = oneTime ? value.slice(1) : value;\n    tokens.push({\n      tag: true,\n      value: value.trim(),\n      html: html,\n      oneTime: oneTime\n    });\n    lastIndex = index + match[0].length;\n  }\n  if (lastIndex < text.length) {\n    tokens.push({\n      value: text.slice(lastIndex)\n    });\n  }\n  cache.put(text, tokens);\n  return tokens;\n}\n\n/**\n * Format a list of tokens into an expression.\n * e.g. tokens parsed from 'a {{b}} c' can be serialized\n * into one single expression as '\"a \" + b + \" c\"'.\n *\n * @param {Array} tokens\n * @param {Vue} [vm]\n * @return {String}\n */\n\nfunction tokensToExp(tokens, vm) {\n  if (tokens.length > 1) {\n    return tokens.map(function (token) {\n      return formatToken(token, vm);\n    }).join('+');\n  } else {\n    return formatToken(tokens[0], vm, true);\n  }\n}\n\n/**\n * Format a single token.\n *\n * @param {Object} token\n * @param {Vue} [vm]\n * @param {Boolean} [single]\n * @return {String}\n */\n\nfunction formatToken(token, vm, single) {\n  return token.tag ? token.oneTime && vm ? '\"' + vm.$eval(token.value) + '\"' : inlineFilters(token.value, single) : '\"' + token.value + '\"';\n}\n\n/**\n * For an attribute with multiple interpolation tags,\n * e.g. attr=\"some-{{thing | filter}}\", in order to combine\n * the whole thing into a single watchable expression, we\n * have to inline those filters. This function does exactly\n * that. This is a bit hacky but it avoids heavy changes\n * to directive parser and watcher mechanism.\n *\n * @param {String} exp\n * @param {Boolean} single\n * @return {String}\n */\n\nvar filterRE = /[^|]\\|[^|]/;\nfunction inlineFilters(exp, single) {\n  if (!filterRE.test(exp)) {\n    return single ? exp : '(' + exp + ')';\n  } else {\n    var dir = parseDirective(exp);\n    if (!dir.filters) {\n      return '(' + exp + ')';\n    } else {\n      return 'this._applyFilters(' + dir.expression + // value\n      ',null,' + // oldValue (null for read)\n      JSON.stringify(dir.filters) + // filter descriptors\n      ',false)'; // write?\n    }\n  }\n}\n\nvar text = Object.freeze({\n  compileRegex: compileRegex,\n  parseText: parseText,\n  tokensToExp: tokensToExp\n});\n\nvar delimiters = ['{{', '}}'];\nvar unsafeDelimiters = ['{{{', '}}}'];\n\nvar config = Object.defineProperties({\n\n  /**\n   * Whether to print debug messages.\n   * Also enables stack trace for warnings.\n   *\n   * @type {Boolean}\n   */\n\n  debug: false,\n\n  /**\n   * Whether to suppress warnings.\n   *\n   * @type {Boolean}\n   */\n\n  silent: false,\n\n  /**\n   * Whether to use async rendering.\n   */\n\n  async: true,\n\n  /**\n   * Whether to warn against errors caught when evaluating\n   * expressions.\n   */\n\n  warnExpressionErrors: true,\n\n  /**\n   * Whether to allow devtools inspection.\n   * Disabled by default in production builds.\n   */\n\n  devtools: process.env.NODE_ENV !== 'production',\n\n  /**\n   * Internal flag to indicate the delimiters have been\n   * changed.\n   *\n   * @type {Boolean}\n   */\n\n  _delimitersChanged: true,\n\n  /**\n   * List of asset types that a component can own.\n   *\n   * @type {Array}\n   */\n\n  _assetTypes: ['component', 'directive', 'elementDirective', 'filter', 'transition', 'partial'],\n\n  /**\n   * prop binding modes\n   */\n\n  _propBindingModes: {\n    ONE_WAY: 0,\n    TWO_WAY: 1,\n    ONE_TIME: 2\n  },\n\n  /**\n   * Max circular updates allowed in a batcher flush cycle.\n   */\n\n  _maxUpdateCount: 100\n\n}, {\n  delimiters: { /**\n                 * Interpolation delimiters. Changing these would trigger\n                 * the text parser to re-compile the regular expressions.\n                 *\n                 * @type {Array<String>}\n                 */\n\n    get: function get() {\n      return delimiters;\n    },\n    set: function set(val) {\n      delimiters = val;\n      compileRegex();\n    },\n    configurable: true,\n    enumerable: true\n  },\n  unsafeDelimiters: {\n    get: function get() {\n      return unsafeDelimiters;\n    },\n    set: function set(val) {\n      unsafeDelimiters = val;\n      compileRegex();\n    },\n    configurable: true,\n    enumerable: true\n  }\n});\n\nvar warn = undefined;\nvar formatComponentName = undefined;\n\nif (process.env.NODE_ENV !== 'production') {\n  (function () {\n    var hasConsole = typeof console !== 'undefined';\n\n    warn = function (msg, vm) {\n      if (hasConsole && !config.silent) {\n        console.error('[Vue warn]: ' + msg + (vm ? formatComponentName(vm) : ''));\n      }\n    };\n\n    formatComponentName = function (vm) {\n      var name = vm._isVue ? vm.$options.name : vm.name;\n      return name ? ' (found in component: <' + hyphenate(name) + '>)' : '';\n    };\n  })();\n}\n\n/**\n * Append with transition.\n *\n * @param {Element} el\n * @param {Element} target\n * @param {Vue} vm\n * @param {Function} [cb]\n */\n\nfunction appendWithTransition(el, target, vm, cb) {\n  applyTransition(el, 1, function () {\n    target.appendChild(el);\n  }, vm, cb);\n}\n\n/**\n * InsertBefore with transition.\n *\n * @param {Element} el\n * @param {Element} target\n * @param {Vue} vm\n * @param {Function} [cb]\n */\n\nfunction beforeWithTransition(el, target, vm, cb) {\n  applyTransition(el, 1, function () {\n    before(el, target);\n  }, vm, cb);\n}\n\n/**\n * Remove with transition.\n *\n * @param {Element} el\n * @param {Vue} vm\n * @param {Function} [cb]\n */\n\nfunction removeWithTransition(el, vm, cb) {\n  applyTransition(el, -1, function () {\n    remove(el);\n  }, vm, cb);\n}\n\n/**\n * Apply transitions with an operation callback.\n *\n * @param {Element} el\n * @param {Number} direction\n *                  1: enter\n *                 -1: leave\n * @param {Function} op - the actual DOM operation\n * @param {Vue} vm\n * @param {Function} [cb]\n */\n\nfunction applyTransition(el, direction, op, vm, cb) {\n  var transition = el.__v_trans;\n  if (!transition ||\n  // skip if there are no js hooks and CSS transition is\n  // not supported\n  !transition.hooks && !transitionEndEvent ||\n  // skip transitions for initial compile\n  !vm._isCompiled ||\n  // if the vm is being manipulated by a parent directive\n  // during the parent's compilation phase, skip the\n  // animation.\n  vm.$parent && !vm.$parent._isCompiled) {\n    op();\n    if (cb) cb();\n    return;\n  }\n  var action = direction > 0 ? 'enter' : 'leave';\n  transition[action](op, cb);\n}\n\nvar transition = Object.freeze({\n  appendWithTransition: appendWithTransition,\n  beforeWithTransition: beforeWithTransition,\n  removeWithTransition: removeWithTransition,\n  applyTransition: applyTransition\n});\n\n/**\n * Query an element selector if it's not an element already.\n *\n * @param {String|Element} el\n * @return {Element}\n */\n\nfunction query(el) {\n  if (typeof el === 'string') {\n    var selector = el;\n    el = document.querySelector(el);\n    if (!el) {\n      process.env.NODE_ENV !== 'production' && warn('Cannot find element: ' + selector);\n    }\n  }\n  return el;\n}\n\n/**\n * Check if a node is in the document.\n * Note: document.documentElement.contains should work here\n * but always returns false for comment nodes in phantomjs,\n * making unit tests difficult. This is fixed by doing the\n * contains() check on the node's parentNode instead of\n * the node itself.\n *\n * @param {Node} node\n * @return {Boolean}\n */\n\nfunction inDoc(node) {\n  if (!node) return false;\n  var doc = node.ownerDocument.documentElement;\n  var parent = node.parentNode;\n  return doc === node || doc === parent || !!(parent && parent.nodeType === 1 && doc.contains(parent));\n}\n\n/**\n * Get and remove an attribute from a node.\n *\n * @param {Node} node\n * @param {String} _attr\n */\n\nfunction getAttr(node, _attr) {\n  var val = node.getAttribute(_attr);\n  if (val !== null) {\n    node.removeAttribute(_attr);\n  }\n  return val;\n}\n\n/**\n * Get an attribute with colon or v-bind: prefix.\n *\n * @param {Node} node\n * @param {String} name\n * @return {String|null}\n */\n\nfunction getBindAttr(node, name) {\n  var val = getAttr(node, ':' + name);\n  if (val === null) {\n    val = getAttr(node, 'v-bind:' + name);\n  }\n  return val;\n}\n\n/**\n * Check the presence of a bind attribute.\n *\n * @param {Node} node\n * @param {String} name\n * @return {Boolean}\n */\n\nfunction hasBindAttr(node, name) {\n  return node.hasAttribute(name) || node.hasAttribute(':' + name) || node.hasAttribute('v-bind:' + name);\n}\n\n/**\n * Insert el before target\n *\n * @param {Element} el\n * @param {Element} target\n */\n\nfunction before(el, target) {\n  target.parentNode.insertBefore(el, target);\n}\n\n/**\n * Insert el after target\n *\n * @param {Element} el\n * @param {Element} target\n */\n\nfunction after(el, target) {\n  if (target.nextSibling) {\n    before(el, target.nextSibling);\n  } else {\n    target.parentNode.appendChild(el);\n  }\n}\n\n/**\n * Remove el from DOM\n *\n * @param {Element} el\n */\n\nfunction remove(el) {\n  el.parentNode.removeChild(el);\n}\n\n/**\n * Prepend el to target\n *\n * @param {Element} el\n * @param {Element} target\n */\n\nfunction prepend(el, target) {\n  if (target.firstChild) {\n    before(el, target.firstChild);\n  } else {\n    target.appendChild(el);\n  }\n}\n\n/**\n * Replace target with el\n *\n * @param {Element} target\n * @param {Element} el\n */\n\nfunction replace(target, el) {\n  var parent = target.parentNode;\n  if (parent) {\n    parent.replaceChild(el, target);\n  }\n}\n\n/**\n * Add event listener shorthand.\n *\n * @param {Element} el\n * @param {String} event\n * @param {Function} cb\n * @param {Boolean} [useCapture]\n */\n\nfunction on(el, event, cb, useCapture) {\n  el.addEventListener(event, cb, useCapture);\n}\n\n/**\n * Remove event listener shorthand.\n *\n * @param {Element} el\n * @param {String} event\n * @param {Function} cb\n */\n\nfunction off(el, event, cb) {\n  el.removeEventListener(event, cb);\n}\n\n/**\n * For IE9 compat: when both class and :class are present\n * getAttribute('class') returns wrong value...\n *\n * @param {Element} el\n * @return {String}\n */\n\nfunction getClass(el) {\n  var classname = el.className;\n  if (typeof classname === 'object') {\n    classname = classname.baseVal || '';\n  }\n  return classname;\n}\n\n/**\n * In IE9, setAttribute('class') will result in empty class\n * if the element also has the :class attribute; However in\n * PhantomJS, setting `className` does not work on SVG elements...\n * So we have to do a conditional check here.\n *\n * @param {Element} el\n * @param {String} cls\n */\n\nfunction setClass(el, cls) {\n  /* istanbul ignore if */\n  if (isIE9 && !/svg$/.test(el.namespaceURI)) {\n    el.className = cls;\n  } else {\n    el.setAttribute('class', cls);\n  }\n}\n\n/**\n * Add class with compatibility for IE & SVG\n *\n * @param {Element} el\n * @param {String} cls\n */\n\nfunction addClass(el, cls) {\n  if (el.classList) {\n    el.classList.add(cls);\n  } else {\n    var cur = ' ' + getClass(el) + ' ';\n    if (cur.indexOf(' ' + cls + ' ') < 0) {\n      setClass(el, (cur + cls).trim());\n    }\n  }\n}\n\n/**\n * Remove class with compatibility for IE & SVG\n *\n * @param {Element} el\n * @param {String} cls\n */\n\nfunction removeClass(el, cls) {\n  if (el.classList) {\n    el.classList.remove(cls);\n  } else {\n    var cur = ' ' + getClass(el) + ' ';\n    var tar = ' ' + cls + ' ';\n    while (cur.indexOf(tar) >= 0) {\n      cur = cur.replace(tar, ' ');\n    }\n    setClass(el, cur.trim());\n  }\n  if (!el.className) {\n    el.removeAttribute('class');\n  }\n}\n\n/**\n * Extract raw content inside an element into a temporary\n * container div\n *\n * @param {Element} el\n * @param {Boolean} asFragment\n * @return {Element|DocumentFragment}\n */\n\nfunction extractContent(el, asFragment) {\n  var child;\n  var rawContent;\n  /* istanbul ignore if */\n  if (isTemplate(el) && isFragment(el.content)) {\n    el = el.content;\n  }\n  if (el.hasChildNodes()) {\n    trimNode(el);\n    rawContent = asFragment ? document.createDocumentFragment() : document.createElement('div');\n    /* eslint-disable no-cond-assign */\n    while (child = el.firstChild) {\n      /* eslint-enable no-cond-assign */\n      rawContent.appendChild(child);\n    }\n  }\n  return rawContent;\n}\n\n/**\n * Trim possible empty head/tail text and comment\n * nodes inside a parent.\n *\n * @param {Node} node\n */\n\nfunction trimNode(node) {\n  var child;\n  /* eslint-disable no-sequences */\n  while ((child = node.firstChild, isTrimmable(child))) {\n    node.removeChild(child);\n  }\n  while ((child = node.lastChild, isTrimmable(child))) {\n    node.removeChild(child);\n  }\n  /* eslint-enable no-sequences */\n}\n\nfunction isTrimmable(node) {\n  return node && (node.nodeType === 3 && !node.data.trim() || node.nodeType === 8);\n}\n\n/**\n * Check if an element is a template tag.\n * Note if the template appears inside an SVG its tagName\n * will be in lowercase.\n *\n * @param {Element} el\n */\n\nfunction isTemplate(el) {\n  return el.tagName && el.tagName.toLowerCase() === 'template';\n}\n\n/**\n * Create an \"anchor\" for performing dom insertion/removals.\n * This is used in a number of scenarios:\n * - fragment instance\n * - v-html\n * - v-if\n * - v-for\n * - component\n *\n * @param {String} content\n * @param {Boolean} persist - IE trashes empty textNodes on\n *                            cloneNode(true), so in certain\n *                            cases the anchor needs to be\n *                            non-empty to be persisted in\n *                            templates.\n * @return {Comment|Text}\n */\n\nfunction createAnchor(content, persist) {\n  var anchor = config.debug ? document.createComment(content) : document.createTextNode(persist ? ' ' : '');\n  anchor.__v_anchor = true;\n  return anchor;\n}\n\n/**\n * Find a component ref attribute that starts with $.\n *\n * @param {Element} node\n * @return {String|undefined}\n */\n\nvar refRE = /^v-ref:/;\n\nfunction findRef(node) {\n  if (node.hasAttributes()) {\n    var attrs = node.attributes;\n    for (var i = 0, l = attrs.length; i < l; i++) {\n      var name = attrs[i].name;\n      if (refRE.test(name)) {\n        return camelize(name.replace(refRE, ''));\n      }\n    }\n  }\n}\n\n/**\n * Map a function to a range of nodes .\n *\n * @param {Node} node\n * @param {Node} end\n * @param {Function} op\n */\n\nfunction mapNodeRange(node, end, op) {\n  var next;\n  while (node !== end) {\n    next = node.nextSibling;\n    op(node);\n    node = next;\n  }\n  op(end);\n}\n\n/**\n * Remove a range of nodes with transition, store\n * the nodes in a fragment with correct ordering,\n * and call callback when done.\n *\n * @param {Node} start\n * @param {Node} end\n * @param {Vue} vm\n * @param {DocumentFragment} frag\n * @param {Function} cb\n */\n\nfunction removeNodeRange(start, end, vm, frag, cb) {\n  var done = false;\n  var removed = 0;\n  var nodes = [];\n  mapNodeRange(start, end, function (node) {\n    if (node === end) done = true;\n    nodes.push(node);\n    removeWithTransition(node, vm, onRemoved);\n  });\n  function onRemoved() {\n    removed++;\n    if (done && removed >= nodes.length) {\n      for (var i = 0; i < nodes.length; i++) {\n        frag.appendChild(nodes[i]);\n      }\n      cb && cb();\n    }\n  }\n}\n\n/**\n * Check if a node is a DocumentFragment.\n *\n * @param {Node} node\n * @return {Boolean}\n */\n\nfunction isFragment(node) {\n  return node && node.nodeType === 11;\n}\n\n/**\n * Get outerHTML of elements, taking care\n * of SVG elements in IE as well.\n *\n * @param {Element} el\n * @return {String}\n */\n\nfunction getOuterHTML(el) {\n  if (el.outerHTML) {\n    return el.outerHTML;\n  } else {\n    var container = document.createElement('div');\n    container.appendChild(el.cloneNode(true));\n    return container.innerHTML;\n  }\n}\n\nvar commonTagRE = /^(div|p|span|img|a|b|i|br|ul|ol|li|h1|h2|h3|h4|h5|h6|code|pre|table|th|td|tr|form|label|input|select|option|nav|article|section|header|footer)$/i;\nvar reservedTagRE = /^(slot|partial|component)$/i;\n\nvar isUnknownElement = undefined;\nif (process.env.NODE_ENV !== 'production') {\n  isUnknownElement = function (el, tag) {\n    if (tag.indexOf('-') > -1) {\n      // http://stackoverflow.com/a/28210364/1070244\n      return el.constructor === window.HTMLUnknownElement || el.constructor === window.HTMLElement;\n    } else {\n      return (/HTMLUnknownElement/.test(el.toString()) &&\n        // Chrome returns unknown for several HTML5 elements.\n        // https://code.google.com/p/chromium/issues/detail?id=540526\n        // Firefox returns unknown for some \"Interactive elements.\"\n        !/^(data|time|rtc|rb|details|dialog|summary)$/.test(tag)\n      );\n    }\n  };\n}\n\n/**\n * Check if an element is a component, if yes return its\n * component id.\n *\n * @param {Element} el\n * @param {Object} options\n * @return {Object|undefined}\n */\n\nfunction checkComponentAttr(el, options) {\n  var tag = el.tagName.toLowerCase();\n  var hasAttrs = el.hasAttributes();\n  if (!commonTagRE.test(tag) && !reservedTagRE.test(tag)) {\n    if (resolveAsset(options, 'components', tag)) {\n      return { id: tag };\n    } else {\n      var is = hasAttrs && getIsBinding(el, options);\n      if (is) {\n        return is;\n      } else if (process.env.NODE_ENV !== 'production') {\n        var expectedTag = options._componentNameMap && options._componentNameMap[tag];\n        if (expectedTag) {\n          warn('Unknown custom element: <' + tag + '> - ' + 'did you mean <' + expectedTag + '>? ' + 'HTML is case-insensitive, remember to use kebab-case in templates.');\n        } else if (isUnknownElement(el, tag)) {\n          warn('Unknown custom element: <' + tag + '> - did you ' + 'register the component correctly? For recursive components, ' + 'make sure to provide the \"name\" option.');\n        }\n      }\n    }\n  } else if (hasAttrs) {\n    return getIsBinding(el, options);\n  }\n}\n\n/**\n * Get \"is\" binding from an element.\n *\n * @param {Element} el\n * @param {Object} options\n * @return {Object|undefined}\n */\n\nfunction getIsBinding(el, options) {\n  // dynamic syntax\n  var exp = el.getAttribute('is');\n  if (exp != null) {\n    if (resolveAsset(options, 'components', exp)) {\n      el.removeAttribute('is');\n      return { id: exp };\n    }\n  } else {\n    exp = getBindAttr(el, 'is');\n    if (exp != null) {\n      return { id: exp, dynamic: true };\n    }\n  }\n}\n\n/**\n * Option overwriting strategies are functions that handle\n * how to merge a parent option value and a child option\n * value into the final value.\n *\n * All strategy functions follow the same signature:\n *\n * @param {*} parentVal\n * @param {*} childVal\n * @param {Vue} [vm]\n */\n\nvar strats = config.optionMergeStrategies = Object.create(null);\n\n/**\n * Helper that recursively merges two data objects together.\n */\n\nfunction mergeData(to, from) {\n  var key, toVal, fromVal;\n  for (key in from) {\n    toVal = to[key];\n    fromVal = from[key];\n    if (!hasOwn(to, key)) {\n      set(to, key, fromVal);\n    } else if (isObject(toVal) && isObject(fromVal)) {\n      mergeData(toVal, fromVal);\n    }\n  }\n  return to;\n}\n\n/**\n * Data\n */\n\nstrats.data = function (parentVal, childVal, vm) {\n  if (!vm) {\n    // in a Vue.extend merge, both should be functions\n    if (!childVal) {\n      return parentVal;\n    }\n    if (typeof childVal !== 'function') {\n      process.env.NODE_ENV !== 'production' && warn('The \"data\" option should be a function ' + 'that returns a per-instance value in component ' + 'definitions.', vm);\n      return parentVal;\n    }\n    if (!parentVal) {\n      return childVal;\n    }\n    // when parentVal & childVal are both present,\n    // we need to return a function that returns the\n    // merged result of both functions... no need to\n    // check if parentVal is a function here because\n    // it has to be a function to pass previous merges.\n    return function mergedDataFn() {\n      return mergeData(childVal.call(this), parentVal.call(this));\n    };\n  } else if (parentVal || childVal) {\n    return function mergedInstanceDataFn() {\n      // instance merge\n      var instanceData = typeof childVal === 'function' ? childVal.call(vm) : childVal;\n      var defaultData = typeof parentVal === 'function' ? parentVal.call(vm) : undefined;\n      if (instanceData) {\n        return mergeData(instanceData, defaultData);\n      } else {\n        return defaultData;\n      }\n    };\n  }\n};\n\n/**\n * El\n */\n\nstrats.el = function (parentVal, childVal, vm) {\n  if (!vm && childVal && typeof childVal !== 'function') {\n    process.env.NODE_ENV !== 'production' && warn('The \"el\" option should be a function ' + 'that returns a per-instance value in component ' + 'definitions.', vm);\n    return;\n  }\n  var ret = childVal || parentVal;\n  // invoke the element factory if this is instance merge\n  return vm && typeof ret === 'function' ? ret.call(vm) : ret;\n};\n\n/**\n * Hooks and param attributes are merged as arrays.\n */\n\nstrats.init = strats.created = strats.ready = strats.attached = strats.detached = strats.beforeCompile = strats.compiled = strats.beforeDestroy = strats.destroyed = strats.activate = function (parentVal, childVal) {\n  return childVal ? parentVal ? parentVal.concat(childVal) : isArray(childVal) ? childVal : [childVal] : parentVal;\n};\n\n/**\n * Assets\n *\n * When a vm is present (instance creation), we need to do\n * a three-way merge between constructor options, instance\n * options and parent options.\n */\n\nfunction mergeAssets(parentVal, childVal) {\n  var res = Object.create(parentVal || null);\n  return childVal ? extend(res, guardArrayAssets(childVal)) : res;\n}\n\nconfig._assetTypes.forEach(function (type) {\n  strats[type + 's'] = mergeAssets;\n});\n\n/**\n * Events & Watchers.\n *\n * Events & watchers hashes should not overwrite one\n * another, so we merge them as arrays.\n */\n\nstrats.watch = strats.events = function (parentVal, childVal) {\n  if (!childVal) return parentVal;\n  if (!parentVal) return childVal;\n  var ret = {};\n  extend(ret, parentVal);\n  for (var key in childVal) {\n    var parent = ret[key];\n    var child = childVal[key];\n    if (parent && !isArray(parent)) {\n      parent = [parent];\n    }\n    ret[key] = parent ? parent.concat(child) : [child];\n  }\n  return ret;\n};\n\n/**\n * Other object hashes.\n */\n\nstrats.props = strats.methods = strats.computed = function (parentVal, childVal) {\n  if (!childVal) return parentVal;\n  if (!parentVal) return childVal;\n  var ret = Object.create(null);\n  extend(ret, parentVal);\n  extend(ret, childVal);\n  return ret;\n};\n\n/**\n * Default strategy.\n */\n\nvar defaultStrat = function defaultStrat(parentVal, childVal) {\n  return childVal === undefined ? parentVal : childVal;\n};\n\n/**\n * Make sure component options get converted to actual\n * constructors.\n *\n * @param {Object} options\n */\n\nfunction guardComponents(options) {\n  if (options.components) {\n    var components = options.components = guardArrayAssets(options.components);\n    var ids = Object.keys(components);\n    var def;\n    if (process.env.NODE_ENV !== 'production') {\n      var map = options._componentNameMap = {};\n    }\n    for (var i = 0, l = ids.length; i < l; i++) {\n      var key = ids[i];\n      if (commonTagRE.test(key) || reservedTagRE.test(key)) {\n        process.env.NODE_ENV !== 'production' && warn('Do not use built-in or reserved HTML elements as component ' + 'id: ' + key);\n        continue;\n      }\n      // record a all lowercase <-> kebab-case mapping for\n      // possible custom element case error warning\n      if (process.env.NODE_ENV !== 'production') {\n        map[key.replace(/-/g, '').toLowerCase()] = hyphenate(key);\n      }\n      def = components[key];\n      if (isPlainObject(def)) {\n        components[key] = Vue.extend(def);\n      }\n    }\n  }\n}\n\n/**\n * Ensure all props option syntax are normalized into the\n * Object-based format.\n *\n * @param {Object} options\n */\n\nfunction guardProps(options) {\n  var props = options.props;\n  var i, val;\n  if (isArray(props)) {\n    options.props = {};\n    i = props.length;\n    while (i--) {\n      val = props[i];\n      if (typeof val === 'string') {\n        options.props[val] = null;\n      } else if (val.name) {\n        options.props[val.name] = val;\n      }\n    }\n  } else if (isPlainObject(props)) {\n    var keys = Object.keys(props);\n    i = keys.length;\n    while (i--) {\n      val = props[keys[i]];\n      if (typeof val === 'function') {\n        props[keys[i]] = { type: val };\n      }\n    }\n  }\n}\n\n/**\n * Guard an Array-format assets option and converted it\n * into the key-value Object format.\n *\n * @param {Object|Array} assets\n * @return {Object}\n */\n\nfunction guardArrayAssets(assets) {\n  if (isArray(assets)) {\n    var res = {};\n    var i = assets.length;\n    var asset;\n    while (i--) {\n      asset = assets[i];\n      var id = typeof asset === 'function' ? asset.options && asset.options.name || asset.id : asset.name || asset.id;\n      if (!id) {\n        process.env.NODE_ENV !== 'production' && warn('Array-syntax assets must provide a \"name\" or \"id\" field.');\n      } else {\n        res[id] = asset;\n      }\n    }\n    return res;\n  }\n  return assets;\n}\n\n/**\n * Merge two option objects into a new one.\n * Core utility used in both instantiation and inheritance.\n *\n * @param {Object} parent\n * @param {Object} child\n * @param {Vue} [vm] - if vm is present, indicates this is\n *                     an instantiation merge.\n */\n\nfunction mergeOptions(parent, child, vm) {\n  guardComponents(child);\n  guardProps(child);\n  if (process.env.NODE_ENV !== 'production') {\n    if (child.propsData && !vm) {\n      warn('propsData can only be used as an instantiation option.');\n    }\n  }\n  var options = {};\n  var key;\n  if (child['extends']) {\n    parent = typeof child['extends'] === 'function' ? mergeOptions(parent, child['extends'].options, vm) : mergeOptions(parent, child['extends'], vm);\n  }\n  if (child.mixins) {\n    for (var i = 0, l = child.mixins.length; i < l; i++) {\n      var mixin = child.mixins[i];\n      var mixinOptions = mixin.prototype instanceof Vue ? mixin.options : mixin;\n      parent = mergeOptions(parent, mixinOptions, vm);\n    }\n  }\n  for (key in parent) {\n    mergeField(key);\n  }\n  for (key in child) {\n    if (!hasOwn(parent, key)) {\n      mergeField(key);\n    }\n  }\n  function mergeField(key) {\n    var strat = strats[key] || defaultStrat;\n    options[key] = strat(parent[key], child[key], vm, key);\n  }\n  return options;\n}\n\n/**\n * Resolve an asset.\n * This function is used because child instances need access\n * to assets defined in its ancestor chain.\n *\n * @param {Object} options\n * @param {String} type\n * @param {String} id\n * @param {Boolean} warnMissing\n * @return {Object|Function}\n */\n\nfunction resolveAsset(options, type, id, warnMissing) {\n  /* istanbul ignore if */\n  if (typeof id !== 'string') {\n    return;\n  }\n  var assets = options[type];\n  var camelizedId;\n  var res = assets[id] ||\n  // camelCase ID\n  assets[camelizedId = camelize(id)] ||\n  // Pascal Case ID\n  assets[camelizedId.charAt(0).toUpperCase() + camelizedId.slice(1)];\n  if (process.env.NODE_ENV !== 'production' && warnMissing && !res) {\n    warn('Failed to resolve ' + type.slice(0, -1) + ': ' + id, options);\n  }\n  return res;\n}\n\nvar uid$1 = 0;\n\n/**\n * A dep is an observable that can have multiple\n * directives subscribing to it.\n *\n * @constructor\n */\nfunction Dep() {\n  this.id = uid$1++;\n  this.subs = [];\n}\n\n// the current target watcher being evaluated.\n// this is globally unique because there could be only one\n// watcher being evaluated at any time.\nDep.target = null;\n\n/**\n * Add a directive subscriber.\n *\n * @param {Directive} sub\n */\n\nDep.prototype.addSub = function (sub) {\n  this.subs.push(sub);\n};\n\n/**\n * Remove a directive subscriber.\n *\n * @param {Directive} sub\n */\n\nDep.prototype.removeSub = function (sub) {\n  this.subs.$remove(sub);\n};\n\n/**\n * Add self as a dependency to the target watcher.\n */\n\nDep.prototype.depend = function () {\n  Dep.target.addDep(this);\n};\n\n/**\n * Notify all subscribers of a new value.\n */\n\nDep.prototype.notify = function () {\n  // stablize the subscriber list first\n  var subs = toArray(this.subs);\n  for (var i = 0, l = subs.length; i < l; i++) {\n    subs[i].update();\n  }\n};\n\nvar arrayProto = Array.prototype;\nvar arrayMethods = Object.create(arrayProto)\n\n/**\n * Intercept mutating methods and emit events\n */\n\n;['push', 'pop', 'shift', 'unshift', 'splice', 'sort', 'reverse'].forEach(function (method) {\n  // cache original method\n  var original = arrayProto[method];\n  def(arrayMethods, method, function mutator() {\n    // avoid leaking arguments:\n    // http://jsperf.com/closure-with-arguments\n    var i = arguments.length;\n    var args = new Array(i);\n    while (i--) {\n      args[i] = arguments[i];\n    }\n    var result = original.apply(this, args);\n    var ob = this.__ob__;\n    var inserted;\n    switch (method) {\n      case 'push':\n        inserted = args;\n        break;\n      case 'unshift':\n        inserted = args;\n        break;\n      case 'splice':\n        inserted = args.slice(2);\n        break;\n    }\n    if (inserted) ob.observeArray(inserted);\n    // notify change\n    ob.dep.notify();\n    return result;\n  });\n});\n\n/**\n * Swap the element at the given index with a new value\n * and emits corresponding event.\n *\n * @param {Number} index\n * @param {*} val\n * @return {*} - replaced element\n */\n\ndef(arrayProto, '$set', function $set(index, val) {\n  if (index >= this.length) {\n    this.length = Number(index) + 1;\n  }\n  return this.splice(index, 1, val)[0];\n});\n\n/**\n * Convenience method to remove the element at given index or target element reference.\n *\n * @param {*} item\n */\n\ndef(arrayProto, '$remove', function $remove(item) {\n  /* istanbul ignore if */\n  if (!this.length) return;\n  var index = indexOf(this, item);\n  if (index > -1) {\n    return this.splice(index, 1);\n  }\n});\n\nvar arrayKeys = Object.getOwnPropertyNames(arrayMethods);\n\n/**\n * By default, when a reactive property is set, the new value is\n * also converted to become reactive. However in certain cases, e.g.\n * v-for scope alias and props, we don't want to force conversion\n * because the value may be a nested value under a frozen data structure.\n *\n * So whenever we want to set a reactive property without forcing\n * conversion on the new value, we wrap that call inside this function.\n */\n\nvar shouldConvert = true;\n\nfunction withoutConversion(fn) {\n  shouldConvert = false;\n  fn();\n  shouldConvert = true;\n}\n\n/**\n * Observer class that are attached to each observed\n * object. Once attached, the observer converts target\n * object's property keys into getter/setters that\n * collect dependencies and dispatches updates.\n *\n * @param {Array|Object} value\n * @constructor\n */\n\nfunction Observer(value) {\n  this.value = value;\n  this.dep = new Dep();\n  def(value, '__ob__', this);\n  if (isArray(value)) {\n    var augment = hasProto ? protoAugment : copyAugment;\n    augment(value, arrayMethods, arrayKeys);\n    this.observeArray(value);\n  } else {\n    this.walk(value);\n  }\n}\n\n// Instance methods\n\n/**\n * Walk through each property and convert them into\n * getter/setters. This method should only be called when\n * value type is Object.\n *\n * @param {Object} obj\n */\n\nObserver.prototype.walk = function (obj) {\n  var keys = Object.keys(obj);\n  for (var i = 0, l = keys.length; i < l; i++) {\n    this.convert(keys[i], obj[keys[i]]);\n  }\n};\n\n/**\n * Observe a list of Array items.\n *\n * @param {Array} items\n */\n\nObserver.prototype.observeArray = function (items) {\n  for (var i = 0, l = items.length; i < l; i++) {\n    observe(items[i]);\n  }\n};\n\n/**\n * Convert a property into getter/setter so we can emit\n * the events when the property is accessed/changed.\n *\n * @param {String} key\n * @param {*} val\n */\n\nObserver.prototype.convert = function (key, val) {\n  defineReactive(this.value, key, val);\n};\n\n/**\n * Add an owner vm, so that when $set/$delete mutations\n * happen we can notify owner vms to proxy the keys and\n * digest the watchers. This is only called when the object\n * is observed as an instance's root $data.\n *\n * @param {Vue} vm\n */\n\nObserver.prototype.addVm = function (vm) {\n  (this.vms || (this.vms = [])).push(vm);\n};\n\n/**\n * Remove an owner vm. This is called when the object is\n * swapped out as an instance's $data object.\n *\n * @param {Vue} vm\n */\n\nObserver.prototype.removeVm = function (vm) {\n  this.vms.$remove(vm);\n};\n\n// helpers\n\n/**\n * Augment an target Object or Array by intercepting\n * the prototype chain using __proto__\n *\n * @param {Object|Array} target\n * @param {Object} src\n */\n\nfunction protoAugment(target, src) {\n  /* eslint-disable no-proto */\n  target.__proto__ = src;\n  /* eslint-enable no-proto */\n}\n\n/**\n * Augment an target Object or Array by defining\n * hidden properties.\n *\n * @param {Object|Array} target\n * @param {Object} proto\n */\n\nfunction copyAugment(target, src, keys) {\n  for (var i = 0, l = keys.length; i < l; i++) {\n    var key = keys[i];\n    def(target, key, src[key]);\n  }\n}\n\n/**\n * Attempt to create an observer instance for a value,\n * returns the new observer if successfully observed,\n * or the existing observer if the value already has one.\n *\n * @param {*} value\n * @param {Vue} [vm]\n * @return {Observer|undefined}\n * @static\n */\n\nfunction observe(value, vm) {\n  if (!value || typeof value !== 'object') {\n    return;\n  }\n  var ob;\n  if (hasOwn(value, '__ob__') && value.__ob__ instanceof Observer) {\n    ob = value.__ob__;\n  } else if (shouldConvert && (isArray(value) || isPlainObject(value)) && Object.isExtensible(value) && !value._isVue) {\n    ob = new Observer(value);\n  }\n  if (ob && vm) {\n    ob.addVm(vm);\n  }\n  return ob;\n}\n\n/**\n * Define a reactive property on an Object.\n *\n * @param {Object} obj\n * @param {String} key\n * @param {*} val\n */\n\nfunction defineReactive(obj, key, val) {\n  var dep = new Dep();\n\n  var property = Object.getOwnPropertyDescriptor(obj, key);\n  if (property && property.configurable === false) {\n    return;\n  }\n\n  // cater for pre-defined getter/setters\n  var getter = property && property.get;\n  var setter = property && property.set;\n\n  var childOb = observe(val);\n  Object.defineProperty(obj, key, {\n    enumerable: true,\n    configurable: true,\n    get: function reactiveGetter() {\n      var value = getter ? getter.call(obj) : val;\n      if (Dep.target) {\n        dep.depend();\n        if (childOb) {\n          childOb.dep.depend();\n        }\n        if (isArray(value)) {\n          for (var e, i = 0, l = value.length; i < l; i++) {\n            e = value[i];\n            e && e.__ob__ && e.__ob__.dep.depend();\n          }\n        }\n      }\n      return value;\n    },\n    set: function reactiveSetter(newVal) {\n      var value = getter ? getter.call(obj) : val;\n      if (newVal === value) {\n        return;\n      }\n      if (setter) {\n        setter.call(obj, newVal);\n      } else {\n        val = newVal;\n      }\n      childOb = observe(newVal);\n      dep.notify();\n    }\n  });\n}\n\n\n\nvar util = Object.freeze({\n\tdefineReactive: defineReactive,\n\tset: set,\n\tdel: del,\n\thasOwn: hasOwn,\n\tisLiteral: isLiteral,\n\tisReserved: isReserved,\n\t_toString: _toString,\n\ttoNumber: toNumber,\n\ttoBoolean: toBoolean,\n\tstripQuotes: stripQuotes,\n\tcamelize: camelize,\n\thyphenate: hyphenate,\n\tclassify: classify,\n\tbind: bind,\n\ttoArray: toArray,\n\textend: extend,\n\tisObject: isObject,\n\tisPlainObject: isPlainObject,\n\tdef: def,\n\tdebounce: _debounce,\n\tindexOf: indexOf,\n\tcancellable: cancellable,\n\tlooseEqual: looseEqual,\n\tisArray: isArray,\n\thasProto: hasProto,\n\tinBrowser: inBrowser,\n\tdevtools: devtools,\n\tisIE: isIE,\n\tisIE9: isIE9,\n\tisAndroid: isAndroid,\n\tisIOS: isIOS,\n\tget transitionProp () { return transitionProp; },\n\tget transitionEndEvent () { return transitionEndEvent; },\n\tget animationProp () { return animationProp; },\n\tget animationEndEvent () { return animationEndEvent; },\n\tnextTick: nextTick,\n\tget _Set () { return _Set; },\n\tquery: query,\n\tinDoc: inDoc,\n\tgetAttr: getAttr,\n\tgetBindAttr: getBindAttr,\n\thasBindAttr: hasBindAttr,\n\tbefore: before,\n\tafter: after,\n\tremove: remove,\n\tprepend: prepend,\n\treplace: replace,\n\ton: on,\n\toff: off,\n\tsetClass: setClass,\n\taddClass: addClass,\n\tremoveClass: removeClass,\n\textractContent: extractContent,\n\ttrimNode: trimNode,\n\tisTemplate: isTemplate,\n\tcreateAnchor: createAnchor,\n\tfindRef: findRef,\n\tmapNodeRange: mapNodeRange,\n\tremoveNodeRange: removeNodeRange,\n\tisFragment: isFragment,\n\tgetOuterHTML: getOuterHTML,\n\tmergeOptions: mergeOptions,\n\tresolveAsset: resolveAsset,\n\tcheckComponentAttr: checkComponentAttr,\n\tcommonTagRE: commonTagRE,\n\treservedTagRE: reservedTagRE,\n\tget warn () { return warn; }\n});\n\nvar uid = 0;\n\nfunction initMixin (Vue) {\n  /**\n   * The main init sequence. This is called for every\n   * instance, including ones that are created from extended\n   * constructors.\n   *\n   * @param {Object} options - this options object should be\n   *                           the result of merging class\n   *                           options and the options passed\n   *                           in to the constructor.\n   */\n\n  Vue.prototype._init = function (options) {\n    options = options || {};\n\n    this.$el = null;\n    this.$parent = options.parent;\n    this.$root = this.$parent ? this.$parent.$root : this;\n    this.$children = [];\n    this.$refs = {}; // child vm references\n    this.$els = {}; // element references\n    this._watchers = []; // all watchers as an array\n    this._directives = []; // all directives\n\n    // a uid\n    this._uid = uid++;\n\n    // a flag to avoid this being observed\n    this._isVue = true;\n\n    // events bookkeeping\n    this._events = {}; // registered callbacks\n    this._eventsCount = {}; // for $broadcast optimization\n\n    // fragment instance properties\n    this._isFragment = false;\n    this._fragment = // @type {DocumentFragment}\n    this._fragmentStart = // @type {Text|Comment}\n    this._fragmentEnd = null; // @type {Text|Comment}\n\n    // lifecycle state\n    this._isCompiled = this._isDestroyed = this._isReady = this._isAttached = this._isBeingDestroyed = this._vForRemoving = false;\n    this._unlinkFn = null;\n\n    // context:\n    // if this is a transcluded component, context\n    // will be the common parent vm of this instance\n    // and its host.\n    this._context = options._context || this.$parent;\n\n    // scope:\n    // if this is inside an inline v-for, the scope\n    // will be the intermediate scope created for this\n    // repeat fragment. this is used for linking props\n    // and container directives.\n    this._scope = options._scope;\n\n    // fragment:\n    // if this instance is compiled inside a Fragment, it\n    // needs to register itself as a child of that fragment\n    // for attach/detach to work properly.\n    this._frag = options._frag;\n    if (this._frag) {\n      this._frag.children.push(this);\n    }\n\n    // push self into parent / transclusion host\n    if (this.$parent) {\n      this.$parent.$children.push(this);\n    }\n\n    // merge options.\n    options = this.$options = mergeOptions(this.constructor.options, options, this);\n\n    // set ref\n    this._updateRef();\n\n    // initialize data as empty object.\n    // it will be filled up in _initData().\n    this._data = {};\n\n    // call init hook\n    this._callHook('init');\n\n    // initialize data observation and scope inheritance.\n    this._initState();\n\n    // setup event system and option events.\n    this._initEvents();\n\n    // call created hook\n    this._callHook('created');\n\n    // if `el` option is passed, start compilation.\n    if (options.el) {\n      this.$mount(options.el);\n    }\n  };\n}\n\nvar pathCache = new Cache(1000);\n\n// actions\nvar APPEND = 0;\nvar PUSH = 1;\nvar INC_SUB_PATH_DEPTH = 2;\nvar PUSH_SUB_PATH = 3;\n\n// states\nvar BEFORE_PATH = 0;\nvar IN_PATH = 1;\nvar BEFORE_IDENT = 2;\nvar IN_IDENT = 3;\nvar IN_SUB_PATH = 4;\nvar IN_SINGLE_QUOTE = 5;\nvar IN_DOUBLE_QUOTE = 6;\nvar AFTER_PATH = 7;\nvar ERROR = 8;\n\nvar pathStateMachine = [];\n\npathStateMachine[BEFORE_PATH] = {\n  'ws': [BEFORE_PATH],\n  'ident': [IN_IDENT, APPEND],\n  '[': [IN_SUB_PATH],\n  'eof': [AFTER_PATH]\n};\n\npathStateMachine[IN_PATH] = {\n  'ws': [IN_PATH],\n  '.': [BEFORE_IDENT],\n  '[': [IN_SUB_PATH],\n  'eof': [AFTER_PATH]\n};\n\npathStateMachine[BEFORE_IDENT] = {\n  'ws': [BEFORE_IDENT],\n  'ident': [IN_IDENT, APPEND]\n};\n\npathStateMachine[IN_IDENT] = {\n  'ident': [IN_IDENT, APPEND],\n  '0': [IN_IDENT, APPEND],\n  'number': [IN_IDENT, APPEND],\n  'ws': [IN_PATH, PUSH],\n  '.': [BEFORE_IDENT, PUSH],\n  '[': [IN_SUB_PATH, PUSH],\n  'eof': [AFTER_PATH, PUSH]\n};\n\npathStateMachine[IN_SUB_PATH] = {\n  \"'\": [IN_SINGLE_QUOTE, APPEND],\n  '\"': [IN_DOUBLE_QUOTE, APPEND],\n  '[': [IN_SUB_PATH, INC_SUB_PATH_DEPTH],\n  ']': [IN_PATH, PUSH_SUB_PATH],\n  'eof': ERROR,\n  'else': [IN_SUB_PATH, APPEND]\n};\n\npathStateMachine[IN_SINGLE_QUOTE] = {\n  \"'\": [IN_SUB_PATH, APPEND],\n  'eof': ERROR,\n  'else': [IN_SINGLE_QUOTE, APPEND]\n};\n\npathStateMachine[IN_DOUBLE_QUOTE] = {\n  '\"': [IN_SUB_PATH, APPEND],\n  'eof': ERROR,\n  'else': [IN_DOUBLE_QUOTE, APPEND]\n};\n\n/**\n * Determine the type of a character in a keypath.\n *\n * @param {Char} ch\n * @return {String} type\n */\n\nfunction getPathCharType(ch) {\n  if (ch === undefined) {\n    return 'eof';\n  }\n\n  var code = ch.charCodeAt(0);\n\n  switch (code) {\n    case 0x5B: // [\n    case 0x5D: // ]\n    case 0x2E: // .\n    case 0x22: // \"\n    case 0x27: // '\n    case 0x30:\n      // 0\n      return ch;\n\n    case 0x5F: // _\n    case 0x24:\n      // $\n      return 'ident';\n\n    case 0x20: // Space\n    case 0x09: // Tab\n    case 0x0A: // Newline\n    case 0x0D: // Return\n    case 0xA0: // No-break space\n    case 0xFEFF: // Byte Order Mark\n    case 0x2028: // Line Separator\n    case 0x2029:\n      // Paragraph Separator\n      return 'ws';\n  }\n\n  // a-z, A-Z\n  if (code >= 0x61 && code <= 0x7A || code >= 0x41 && code <= 0x5A) {\n    return 'ident';\n  }\n\n  // 1-9\n  if (code >= 0x31 && code <= 0x39) {\n    return 'number';\n  }\n\n  return 'else';\n}\n\n/**\n * Format a subPath, return its plain form if it is\n * a literal string or number. Otherwise prepend the\n * dynamic indicator (*).\n *\n * @param {String} path\n * @return {String}\n */\n\nfunction formatSubPath(path) {\n  var trimmed = path.trim();\n  // invalid leading 0\n  if (path.charAt(0) === '0' && isNaN(path)) {\n    return false;\n  }\n  return isLiteral(trimmed) ? stripQuotes(trimmed) : '*' + trimmed;\n}\n\n/**\n * Parse a string path into an array of segments\n *\n * @param {String} path\n * @return {Array|undefined}\n */\n\nfunction parse(path) {\n  var keys = [];\n  var index = -1;\n  var mode = BEFORE_PATH;\n  var subPathDepth = 0;\n  var c, newChar, key, type, transition, action, typeMap;\n\n  var actions = [];\n\n  actions[PUSH] = function () {\n    if (key !== undefined) {\n      keys.push(key);\n      key = undefined;\n    }\n  };\n\n  actions[APPEND] = function () {\n    if (key === undefined) {\n      key = newChar;\n    } else {\n      key += newChar;\n    }\n  };\n\n  actions[INC_SUB_PATH_DEPTH] = function () {\n    actions[APPEND]();\n    subPathDepth++;\n  };\n\n  actions[PUSH_SUB_PATH] = function () {\n    if (subPathDepth > 0) {\n      subPathDepth--;\n      mode = IN_SUB_PATH;\n      actions[APPEND]();\n    } else {\n      subPathDepth = 0;\n      key = formatSubPath(key);\n      if (key === false) {\n        return false;\n      } else {\n        actions[PUSH]();\n      }\n    }\n  };\n\n  function maybeUnescapeQuote() {\n    var nextChar = path[index + 1];\n    if (mode === IN_SINGLE_QUOTE && nextChar === \"'\" || mode === IN_DOUBLE_QUOTE && nextChar === '\"') {\n      index++;\n      newChar = '\\\\' + nextChar;\n      actions[APPEND]();\n      return true;\n    }\n  }\n\n  while (mode != null) {\n    index++;\n    c = path[index];\n\n    if (c === '\\\\' && maybeUnescapeQuote()) {\n      continue;\n    }\n\n    type = getPathCharType(c);\n    typeMap = pathStateMachine[mode];\n    transition = typeMap[type] || typeMap['else'] || ERROR;\n\n    if (transition === ERROR) {\n      return; // parse error\n    }\n\n    mode = transition[0];\n    action = actions[transition[1]];\n    if (action) {\n      newChar = transition[2];\n      newChar = newChar === undefined ? c : newChar;\n      if (action() === false) {\n        return;\n      }\n    }\n\n    if (mode === AFTER_PATH) {\n      keys.raw = path;\n      return keys;\n    }\n  }\n}\n\n/**\n * External parse that check for a cache hit first\n *\n * @param {String} path\n * @return {Array|undefined}\n */\n\nfunction parsePath(path) {\n  var hit = pathCache.get(path);\n  if (!hit) {\n    hit = parse(path);\n    if (hit) {\n      pathCache.put(path, hit);\n    }\n  }\n  return hit;\n}\n\n/**\n * Get from an object from a path string\n *\n * @param {Object} obj\n * @param {String} path\n */\n\nfunction getPath(obj, path) {\n  return parseExpression$1(path).get(obj);\n}\n\n/**\n * Warn against setting non-existent root path on a vm.\n */\n\nvar warnNonExistent;\nif (process.env.NODE_ENV !== 'production') {\n  warnNonExistent = function (path, vm) {\n    warn('You are setting a non-existent path \"' + path.raw + '\" ' + 'on a vm instance. Consider pre-initializing the property ' + 'with the \"data\" option for more reliable reactivity ' + 'and better performance.', vm);\n  };\n}\n\n/**\n * Set on an object from a path\n *\n * @param {Object} obj\n * @param {String | Array} path\n * @param {*} val\n */\n\nfunction setPath(obj, path, val) {\n  var original = obj;\n  if (typeof path === 'string') {\n    path = parse(path);\n  }\n  if (!path || !isObject(obj)) {\n    return false;\n  }\n  var last, key;\n  for (var i = 0, l = path.length; i < l; i++) {\n    last = obj;\n    key = path[i];\n    if (key.charAt(0) === '*') {\n      key = parseExpression$1(key.slice(1)).get.call(original, original);\n    }\n    if (i < l - 1) {\n      obj = obj[key];\n      if (!isObject(obj)) {\n        obj = {};\n        if (process.env.NODE_ENV !== 'production' && last._isVue) {\n          warnNonExistent(path, last);\n        }\n        set(last, key, obj);\n      }\n    } else {\n      if (isArray(obj)) {\n        obj.$set(key, val);\n      } else if (key in obj) {\n        obj[key] = val;\n      } else {\n        if (process.env.NODE_ENV !== 'production' && obj._isVue) {\n          warnNonExistent(path, obj);\n        }\n        set(obj, key, val);\n      }\n    }\n  }\n  return true;\n}\n\nvar path = Object.freeze({\n  parsePath: parsePath,\n  getPath: getPath,\n  setPath: setPath\n});\n\nvar expressionCache = new Cache(1000);\n\nvar allowedKeywords = 'Math,Date,this,true,false,null,undefined,Infinity,NaN,' + 'isNaN,isFinite,decodeURI,decodeURIComponent,encodeURI,' + 'encodeURIComponent,parseInt,parseFloat';\nvar allowedKeywordsRE = new RegExp('^(' + allowedKeywords.replace(/,/g, '\\\\b|') + '\\\\b)');\n\n// keywords that don't make sense inside expressions\nvar improperKeywords = 'break,case,class,catch,const,continue,debugger,default,' + 'delete,do,else,export,extends,finally,for,function,if,' + 'import,in,instanceof,let,return,super,switch,throw,try,' + 'var,while,with,yield,enum,await,implements,package,' + 'protected,static,interface,private,public';\nvar improperKeywordsRE = new RegExp('^(' + improperKeywords.replace(/,/g, '\\\\b|') + '\\\\b)');\n\nvar wsRE = /\\s/g;\nvar newlineRE = /\\n/g;\nvar saveRE = /[\\{,]\\s*[\\w\\$_]+\\s*:|('(?:[^'\\\\]|\\\\.)*'|\"(?:[^\"\\\\]|\\\\.)*\"|`(?:[^`\\\\]|\\\\.)*\\$\\{|\\}(?:[^`\\\\\"']|\\\\.)*`|`(?:[^`\\\\]|\\\\.)*`)|new |typeof |void /g;\nvar restoreRE = /\"(\\d+)\"/g;\nvar pathTestRE = /^[A-Za-z_$][\\w$]*(?:\\.[A-Za-z_$][\\w$]*|\\['.*?'\\]|\\[\".*?\"\\]|\\[\\d+\\]|\\[[A-Za-z_$][\\w$]*\\])*$/;\nvar identRE = /[^\\w$\\.](?:[A-Za-z_$][\\w$]*)/g;\nvar literalValueRE$1 = /^(?:true|false|null|undefined|Infinity|NaN)$/;\n\nfunction noop() {}\n\n/**\n * Save / Rewrite / Restore\n *\n * When rewriting paths found in an expression, it is\n * possible for the same letter sequences to be found in\n * strings and Object literal property keys. Therefore we\n * remove and store these parts in a temporary array, and\n * restore them after the path rewrite.\n */\n\nvar saved = [];\n\n/**\n * Save replacer\n *\n * The save regex can match two possible cases:\n * 1. An opening object literal\n * 2. A string\n * If matched as a plain string, we need to escape its\n * newlines, since the string needs to be preserved when\n * generating the function body.\n *\n * @param {String} str\n * @param {String} isString - str if matched as a string\n * @return {String} - placeholder with index\n */\n\nfunction save(str, isString) {\n  var i = saved.length;\n  saved[i] = isString ? str.replace(newlineRE, '\\\\n') : str;\n  return '\"' + i + '\"';\n}\n\n/**\n * Path rewrite replacer\n *\n * @param {String} raw\n * @return {String}\n */\n\nfunction rewrite(raw) {\n  var c = raw.charAt(0);\n  var path = raw.slice(1);\n  if (allowedKeywordsRE.test(path)) {\n    return raw;\n  } else {\n    path = path.indexOf('\"') > -1 ? path.replace(restoreRE, restore) : path;\n    return c + 'scope.' + path;\n  }\n}\n\n/**\n * Restore replacer\n *\n * @param {String} str\n * @param {String} i - matched save index\n * @return {String}\n */\n\nfunction restore(str, i) {\n  return saved[i];\n}\n\n/**\n * Rewrite an expression, prefixing all path accessors with\n * `scope.` and generate getter/setter functions.\n *\n * @param {String} exp\n * @return {Function}\n */\n\nfunction compileGetter(exp) {\n  if (improperKeywordsRE.test(exp)) {\n    process.env.NODE_ENV !== 'production' && warn('Avoid using reserved keywords in expression: ' + exp);\n  }\n  // reset state\n  saved.length = 0;\n  // save strings and object literal keys\n  var body = exp.replace(saveRE, save).replace(wsRE, '');\n  // rewrite all paths\n  // pad 1 space here because the regex matches 1 extra char\n  body = (' ' + body).replace(identRE, rewrite).replace(restoreRE, restore);\n  return makeGetterFn(body);\n}\n\n/**\n * Build a getter function. Requires eval.\n *\n * We isolate the try/catch so it doesn't affect the\n * optimization of the parse function when it is not called.\n *\n * @param {String} body\n * @return {Function|undefined}\n */\n\nfunction makeGetterFn(body) {\n  try {\n    /* eslint-disable no-new-func */\n    return new Function('scope', 'return ' + body + ';');\n    /* eslint-enable no-new-func */\n  } catch (e) {\n    if (process.env.NODE_ENV !== 'production') {\n      /* istanbul ignore if */\n      if (e.toString().match(/unsafe-eval|CSP/)) {\n        warn('It seems you are using the default build of Vue.js in an environment ' + 'with Content Security Policy that prohibits unsafe-eval. ' + 'Use the CSP-compliant build instead: ' + 'http://vuejs.org/guide/installation.html#CSP-compliant-build');\n      } else {\n        warn('Invalid expression. ' + 'Generated function body: ' + body);\n      }\n    }\n    return noop;\n  }\n}\n\n/**\n * Compile a setter function for the expression.\n *\n * @param {String} exp\n * @return {Function|undefined}\n */\n\nfunction compileSetter(exp) {\n  var path = parsePath(exp);\n  if (path) {\n    return function (scope, val) {\n      setPath(scope, path, val);\n    };\n  } else {\n    process.env.NODE_ENV !== 'production' && warn('Invalid setter expression: ' + exp);\n  }\n}\n\n/**\n * Parse an expression into re-written getter/setters.\n *\n * @param {String} exp\n * @param {Boolean} needSet\n * @return {Function}\n */\n\nfunction parseExpression$1(exp, needSet) {\n  exp = exp.trim();\n  // try cache\n  var hit = expressionCache.get(exp);\n  if (hit) {\n    if (needSet && !hit.set) {\n      hit.set = compileSetter(hit.exp);\n    }\n    return hit;\n  }\n  var res = { exp: exp };\n  res.get = isSimplePath(exp) && exp.indexOf('[') < 0\n  // optimized super simple getter\n  ? makeGetterFn('scope.' + exp)\n  // dynamic getter\n  : compileGetter(exp);\n  if (needSet) {\n    res.set = compileSetter(exp);\n  }\n  expressionCache.put(exp, res);\n  return res;\n}\n\n/**\n * Check if an expression is a simple path.\n *\n * @param {String} exp\n * @return {Boolean}\n */\n\nfunction isSimplePath(exp) {\n  return pathTestRE.test(exp) &&\n  // don't treat literal values as paths\n  !literalValueRE$1.test(exp) &&\n  // Math constants e.g. Math.PI, Math.E etc.\n  exp.slice(0, 5) !== 'Math.';\n}\n\nvar expression = Object.freeze({\n  parseExpression: parseExpression$1,\n  isSimplePath: isSimplePath\n});\n\n// we have two separate queues: one for directive updates\n// and one for user watcher registered via $watch().\n// we want to guarantee directive updates to be called\n// before user watchers so that when user watchers are\n// triggered, the DOM would have already been in updated\n// state.\n\nvar queue = [];\nvar userQueue = [];\nvar has = {};\nvar circular = {};\nvar waiting = false;\n\n/**\n * Reset the batcher's state.\n */\n\nfunction resetBatcherState() {\n  queue.length = 0;\n  userQueue.length = 0;\n  has = {};\n  circular = {};\n  waiting = false;\n}\n\n/**\n * Flush both queues and run the watchers.\n */\n\nfunction flushBatcherQueue() {\n  var _again = true;\n\n  _function: while (_again) {\n    _again = false;\n\n    runBatcherQueue(queue);\n    runBatcherQueue(userQueue);\n    // user watchers triggered more watchers,\n    // keep flushing until it depletes\n    if (queue.length) {\n      _again = true;\n      continue _function;\n    }\n    // dev tool hook\n    /* istanbul ignore if */\n    if (devtools && config.devtools) {\n      devtools.emit('flush');\n    }\n    resetBatcherState();\n  }\n}\n\n/**\n * Run the watchers in a single queue.\n *\n * @param {Array} queue\n */\n\nfunction runBatcherQueue(queue) {\n  // do not cache length because more watchers might be pushed\n  // as we run existing watchers\n  for (var i = 0; i < queue.length; i++) {\n    var watcher = queue[i];\n    var id = watcher.id;\n    has[id] = null;\n    watcher.run();\n    // in dev build, check and stop circular updates.\n    if (process.env.NODE_ENV !== 'production' && has[id] != null) {\n      circular[id] = (circular[id] || 0) + 1;\n      if (circular[id] > config._maxUpdateCount) {\n        warn('You may have an infinite update loop for watcher ' + 'with expression \"' + watcher.expression + '\"', watcher.vm);\n        break;\n      }\n    }\n  }\n  queue.length = 0;\n}\n\n/**\n * Push a watcher into the watcher queue.\n * Jobs with duplicate IDs will be skipped unless it's\n * pushed when the queue is being flushed.\n *\n * @param {Watcher} watcher\n *   properties:\n *   - {Number} id\n *   - {Function} run\n */\n\nfunction pushWatcher(watcher) {\n  var id = watcher.id;\n  if (has[id] == null) {\n    // push watcher into appropriate queue\n    var q = watcher.user ? userQueue : queue;\n    has[id] = q.length;\n    q.push(watcher);\n    // queue the flush\n    if (!waiting) {\n      waiting = true;\n      nextTick(flushBatcherQueue);\n    }\n  }\n}\n\nvar uid$2 = 0;\n\n/**\n * A watcher parses an expression, collects dependencies,\n * and fires callback when the expression value changes.\n * This is used for both the $watch() api and directives.\n *\n * @param {Vue} vm\n * @param {String|Function} expOrFn\n * @param {Function} cb\n * @param {Object} options\n *                 - {Array} filters\n *                 - {Boolean} twoWay\n *                 - {Boolean} deep\n *                 - {Boolean} user\n *                 - {Boolean} sync\n *                 - {Boolean} lazy\n *                 - {Function} [preProcess]\n *                 - {Function} [postProcess]\n * @constructor\n */\nfunction Watcher(vm, expOrFn, cb, options) {\n  // mix in options\n  if (options) {\n    extend(this, options);\n  }\n  var isFn = typeof expOrFn === 'function';\n  this.vm = vm;\n  vm._watchers.push(this);\n  this.expression = expOrFn;\n  this.cb = cb;\n  this.id = ++uid$2; // uid for batching\n  this.active = true;\n  this.dirty = this.lazy; // for lazy watchers\n  this.deps = [];\n  this.newDeps = [];\n  this.depIds = new _Set();\n  this.newDepIds = new _Set();\n  this.prevError = null; // for async error stacks\n  // parse expression for getter/setter\n  if (isFn) {\n    this.getter = expOrFn;\n    this.setter = undefined;\n  } else {\n    var res = parseExpression$1(expOrFn, this.twoWay);\n    this.getter = res.get;\n    this.setter = res.set;\n  }\n  this.value = this.lazy ? undefined : this.get();\n  // state for avoiding false triggers for deep and Array\n  // watchers during vm._digest()\n  this.queued = this.shallow = false;\n}\n\n/**\n * Evaluate the getter, and re-collect dependencies.\n */\n\nWatcher.prototype.get = function () {\n  this.beforeGet();\n  var scope = this.scope || this.vm;\n  var value;\n  try {\n    value = this.getter.call(scope, scope);\n  } catch (e) {\n    if (process.env.NODE_ENV !== 'production' && config.warnExpressionErrors) {\n      warn('Error when evaluating expression ' + '\"' + this.expression + '\": ' + e.toString(), this.vm);\n    }\n  }\n  // \"touch\" every property so they are all tracked as\n  // dependencies for deep watching\n  if (this.deep) {\n    traverse(value);\n  }\n  if (this.preProcess) {\n    value = this.preProcess(value);\n  }\n  if (this.filters) {\n    value = scope._applyFilters(value, null, this.filters, false);\n  }\n  if (this.postProcess) {\n    value = this.postProcess(value);\n  }\n  this.afterGet();\n  return value;\n};\n\n/**\n * Set the corresponding value with the setter.\n *\n * @param {*} value\n */\n\nWatcher.prototype.set = function (value) {\n  var scope = this.scope || this.vm;\n  if (this.filters) {\n    value = scope._applyFilters(value, this.value, this.filters, true);\n  }\n  try {\n    this.setter.call(scope, scope, value);\n  } catch (e) {\n    if (process.env.NODE_ENV !== 'production' && config.warnExpressionErrors) {\n      warn('Error when evaluating setter ' + '\"' + this.expression + '\": ' + e.toString(), this.vm);\n    }\n  }\n  // two-way sync for v-for alias\n  var forContext = scope.$forContext;\n  if (forContext && forContext.alias === this.expression) {\n    if (forContext.filters) {\n      process.env.NODE_ENV !== 'production' && warn('It seems you are using two-way binding on ' + 'a v-for alias (' + this.expression + '), and the ' + 'v-for has filters. This will not work properly. ' + 'Either remove the filters or use an array of ' + 'objects and bind to object properties instead.', this.vm);\n      return;\n    }\n    forContext._withLock(function () {\n      if (scope.$key) {\n        // original is an object\n        forContext.rawValue[scope.$key] = value;\n      } else {\n        forContext.rawValue.$set(scope.$index, value);\n      }\n    });\n  }\n};\n\n/**\n * Prepare for dependency collection.\n */\n\nWatcher.prototype.beforeGet = function () {\n  Dep.target = this;\n};\n\n/**\n * Add a dependency to this directive.\n *\n * @param {Dep} dep\n */\n\nWatcher.prototype.addDep = function (dep) {\n  var id = dep.id;\n  if (!this.newDepIds.has(id)) {\n    this.newDepIds.add(id);\n    this.newDeps.push(dep);\n    if (!this.depIds.has(id)) {\n      dep.addSub(this);\n    }\n  }\n};\n\n/**\n * Clean up for dependency collection.\n */\n\nWatcher.prototype.afterGet = function () {\n  Dep.target = null;\n  var i = this.deps.length;\n  while (i--) {\n    var dep = this.deps[i];\n    if (!this.newDepIds.has(dep.id)) {\n      dep.removeSub(this);\n    }\n  }\n  var tmp = this.depIds;\n  this.depIds = this.newDepIds;\n  this.newDepIds = tmp;\n  this.newDepIds.clear();\n  tmp = this.deps;\n  this.deps = this.newDeps;\n  this.newDeps = tmp;\n  this.newDeps.length = 0;\n};\n\n/**\n * Subscriber interface.\n * Will be called when a dependency changes.\n *\n * @param {Boolean} shallow\n */\n\nWatcher.prototype.update = function (shallow) {\n  if (this.lazy) {\n    this.dirty = true;\n  } else if (this.sync || !config.async) {\n    this.run();\n  } else {\n    // if queued, only overwrite shallow with non-shallow,\n    // but not the other way around.\n    this.shallow = this.queued ? shallow ? this.shallow : false : !!shallow;\n    this.queued = true;\n    // record before-push error stack in debug mode\n    /* istanbul ignore if */\n    if (process.env.NODE_ENV !== 'production' && config.debug) {\n      this.prevError = new Error('[vue] async stack trace');\n    }\n    pushWatcher(this);\n  }\n};\n\n/**\n * Batcher job interface.\n * Will be called by the batcher.\n */\n\nWatcher.prototype.run = function () {\n  if (this.active) {\n    var value = this.get();\n    if (value !== this.value ||\n    // Deep watchers and watchers on Object/Arrays should fire even\n    // when the value is the same, because the value may\n    // have mutated; but only do so if this is a\n    // non-shallow update (caused by a vm digest).\n    (isObject(value) || this.deep) && !this.shallow) {\n      // set new value\n      var oldValue = this.value;\n      this.value = value;\n      // in debug + async mode, when a watcher callbacks\n      // throws, we also throw the saved before-push error\n      // so the full cross-tick stack trace is available.\n      var prevError = this.prevError;\n      /* istanbul ignore if */\n      if (process.env.NODE_ENV !== 'production' && config.debug && prevError) {\n        this.prevError = null;\n        try {\n          this.cb.call(this.vm, value, oldValue);\n        } catch (e) {\n          nextTick(function () {\n            throw prevError;\n          }, 0);\n          throw e;\n        }\n      } else {\n        this.cb.call(this.vm, value, oldValue);\n      }\n    }\n    this.queued = this.shallow = false;\n  }\n};\n\n/**\n * Evaluate the value of the watcher.\n * This only gets called for lazy watchers.\n */\n\nWatcher.prototype.evaluate = function () {\n  // avoid overwriting another watcher that is being\n  // collected.\n  var current = Dep.target;\n  this.value = this.get();\n  this.dirty = false;\n  Dep.target = current;\n};\n\n/**\n * Depend on all deps collected by this watcher.\n */\n\nWatcher.prototype.depend = function () {\n  var i = this.deps.length;\n  while (i--) {\n    this.deps[i].depend();\n  }\n};\n\n/**\n * Remove self from all dependencies' subcriber list.\n */\n\nWatcher.prototype.teardown = function () {\n  if (this.active) {\n    // remove self from vm's watcher list\n    // this is a somewhat expensive operation so we skip it\n    // if the vm is being destroyed or is performing a v-for\n    // re-render (the watcher list is then filtered by v-for).\n    if (!this.vm._isBeingDestroyed && !this.vm._vForRemoving) {\n      this.vm._watchers.$remove(this);\n    }\n    var i = this.deps.length;\n    while (i--) {\n      this.deps[i].removeSub(this);\n    }\n    this.active = false;\n    this.vm = this.cb = this.value = null;\n  }\n};\n\n/**\n * Recrusively traverse an object to evoke all converted\n * getters, so that every nested property inside the object\n * is collected as a \"deep\" dependency.\n *\n * @param {*} val\n */\n\nvar seenObjects = new _Set();\nfunction traverse(val, seen) {\n  var i = undefined,\n      keys = undefined;\n  if (!seen) {\n    seen = seenObjects;\n    seen.clear();\n  }\n  var isA = isArray(val);\n  var isO = isObject(val);\n  if ((isA || isO) && Object.isExtensible(val)) {\n    if (val.__ob__) {\n      var depId = val.__ob__.dep.id;\n      if (seen.has(depId)) {\n        return;\n      } else {\n        seen.add(depId);\n      }\n    }\n    if (isA) {\n      i = val.length;\n      while (i--) traverse(val[i], seen);\n    } else if (isO) {\n      keys = Object.keys(val);\n      i = keys.length;\n      while (i--) traverse(val[keys[i]], seen);\n    }\n  }\n}\n\nvar text$1 = {\n\n  bind: function bind() {\n    this.attr = this.el.nodeType === 3 ? 'data' : 'textContent';\n  },\n\n  update: function update(value) {\n    this.el[this.attr] = _toString(value);\n  }\n};\n\nvar templateCache = new Cache(1000);\nvar idSelectorCache = new Cache(1000);\n\nvar map = {\n  efault: [0, '', ''],\n  legend: [1, '<fieldset>', '</fieldset>'],\n  tr: [2, '<table><tbody>', '</tbody></table>'],\n  col: [2, '<table><tbody></tbody><colgroup>', '</colgroup></table>']\n};\n\nmap.td = map.th = [3, '<table><tbody><tr>', '</tr></tbody></table>'];\n\nmap.option = map.optgroup = [1, '<select multiple=\"multiple\">', '</select>'];\n\nmap.thead = map.tbody = map.colgroup = map.caption = map.tfoot = [1, '<table>', '</table>'];\n\nmap.g = map.defs = map.symbol = map.use = map.image = map.text = map.circle = map.ellipse = map.line = map.path = map.polygon = map.polyline = map.rect = [1, '<svg ' + 'xmlns=\"http://www.w3.org/2000/svg\" ' + 'xmlns:xlink=\"http://www.w3.org/1999/xlink\" ' + 'xmlns:ev=\"http://www.w3.org/2001/xml-events\"' + 'version=\"1.1\">', '</svg>'];\n\n/**\n * Check if a node is a supported template node with a\n * DocumentFragment content.\n *\n * @param {Node} node\n * @return {Boolean}\n */\n\nfunction isRealTemplate(node) {\n  return isTemplate(node) && isFragment(node.content);\n}\n\nvar tagRE$1 = /<([\\w:-]+)/;\nvar entityRE = /&#?\\w+?;/;\nvar commentRE = /<!--/;\n\n/**\n * Convert a string template to a DocumentFragment.\n * Determines correct wrapping by tag types. Wrapping\n * strategy found in jQuery & component/domify.\n *\n * @param {String} templateString\n * @param {Boolean} raw\n * @return {DocumentFragment}\n */\n\nfunction stringToFragment(templateString, raw) {\n  // try a cache hit first\n  var cacheKey = raw ? templateString : templateString.trim();\n  var hit = templateCache.get(cacheKey);\n  if (hit) {\n    return hit;\n  }\n\n  var frag = document.createDocumentFragment();\n  var tagMatch = templateString.match(tagRE$1);\n  var entityMatch = entityRE.test(templateString);\n  var commentMatch = commentRE.test(templateString);\n\n  if (!tagMatch && !entityMatch && !commentMatch) {\n    // text only, return a single text node.\n    frag.appendChild(document.createTextNode(templateString));\n  } else {\n    var tag = tagMatch && tagMatch[1];\n    var wrap = map[tag] || map.efault;\n    var depth = wrap[0];\n    var prefix = wrap[1];\n    var suffix = wrap[2];\n    var node = document.createElement('div');\n\n    node.innerHTML = prefix + templateString + suffix;\n    while (depth--) {\n      node = node.lastChild;\n    }\n\n    var child;\n    /* eslint-disable no-cond-assign */\n    while (child = node.firstChild) {\n      /* eslint-enable no-cond-assign */\n      frag.appendChild(child);\n    }\n  }\n  if (!raw) {\n    trimNode(frag);\n  }\n  templateCache.put(cacheKey, frag);\n  return frag;\n}\n\n/**\n * Convert a template node to a DocumentFragment.\n *\n * @param {Node} node\n * @return {DocumentFragment}\n */\n\nfunction nodeToFragment(node) {\n  // if its a template tag and the browser supports it,\n  // its content is already a document fragment. However, iOS Safari has\n  // bug when using directly cloned template content with touch\n  // events and can cause crashes when the nodes are removed from DOM, so we\n  // have to treat template elements as string templates. (#2805)\n  /* istanbul ignore if */\n  if (isRealTemplate(node)) {\n    return stringToFragment(node.innerHTML);\n  }\n  // script template\n  if (node.tagName === 'SCRIPT') {\n    return stringToFragment(node.textContent);\n  }\n  // normal node, clone it to avoid mutating the original\n  var clonedNode = cloneNode(node);\n  var frag = document.createDocumentFragment();\n  var child;\n  /* eslint-disable no-cond-assign */\n  while (child = clonedNode.firstChild) {\n    /* eslint-enable no-cond-assign */\n    frag.appendChild(child);\n  }\n  trimNode(frag);\n  return frag;\n}\n\n// Test for the presence of the Safari template cloning bug\n// https://bugs.webkit.org/showug.cgi?id=137755\nvar hasBrokenTemplate = (function () {\n  /* istanbul ignore else */\n  if (inBrowser) {\n    var a = document.createElement('div');\n    a.innerHTML = '<template>1</template>';\n    return !a.cloneNode(true).firstChild.innerHTML;\n  } else {\n    return false;\n  }\n})();\n\n// Test for IE10/11 textarea placeholder clone bug\nvar hasTextareaCloneBug = (function () {\n  /* istanbul ignore else */\n  if (inBrowser) {\n    var t = document.createElement('textarea');\n    t.placeholder = 't';\n    return t.cloneNode(true).value === 't';\n  } else {\n    return false;\n  }\n})();\n\n/**\n * 1. Deal with Safari cloning nested <template> bug by\n *    manually cloning all template instances.\n * 2. Deal with IE10/11 textarea placeholder bug by setting\n *    the correct value after cloning.\n *\n * @param {Element|DocumentFragment} node\n * @return {Element|DocumentFragment}\n */\n\nfunction cloneNode(node) {\n  /* istanbul ignore if */\n  if (!node.querySelectorAll) {\n    return node.cloneNode();\n  }\n  var res = node.cloneNode(true);\n  var i, original, cloned;\n  /* istanbul ignore if */\n  if (hasBrokenTemplate) {\n    var tempClone = res;\n    if (isRealTemplate(node)) {\n      node = node.content;\n      tempClone = res.content;\n    }\n    original = node.querySelectorAll('template');\n    if (original.length) {\n      cloned = tempClone.querySelectorAll('template');\n      i = cloned.length;\n      while (i--) {\n        cloned[i].parentNode.replaceChild(cloneNode(original[i]), cloned[i]);\n      }\n    }\n  }\n  /* istanbul ignore if */\n  if (hasTextareaCloneBug) {\n    if (node.tagName === 'TEXTAREA') {\n      res.value = node.value;\n    } else {\n      original = node.querySelectorAll('textarea');\n      if (original.length) {\n        cloned = res.querySelectorAll('textarea');\n        i = cloned.length;\n        while (i--) {\n          cloned[i].value = original[i].value;\n        }\n      }\n    }\n  }\n  return res;\n}\n\n/**\n * Process the template option and normalizes it into a\n * a DocumentFragment that can be used as a partial or a\n * instance template.\n *\n * @param {*} template\n *        Possible values include:\n *        - DocumentFragment object\n *        - Node object of type Template\n *        - id selector: '#some-template-id'\n *        - template string: '<div><span>{{msg}}</span></div>'\n * @param {Boolean} shouldClone\n * @param {Boolean} raw\n *        inline HTML interpolation. Do not check for id\n *        selector and keep whitespace in the string.\n * @return {DocumentFragment|undefined}\n */\n\nfunction parseTemplate(template, shouldClone, raw) {\n  var node, frag;\n\n  // if the template is already a document fragment,\n  // do nothing\n  if (isFragment(template)) {\n    trimNode(template);\n    return shouldClone ? cloneNode(template) : template;\n  }\n\n  if (typeof template === 'string') {\n    // id selector\n    if (!raw && template.charAt(0) === '#') {\n      // id selector can be cached too\n      frag = idSelectorCache.get(template);\n      if (!frag) {\n        node = document.getElementById(template.slice(1));\n        if (node) {\n          frag = nodeToFragment(node);\n          // save selector to cache\n          idSelectorCache.put(template, frag);\n        }\n      }\n    } else {\n      // normal string template\n      frag = stringToFragment(template, raw);\n    }\n  } else if (template.nodeType) {\n    // a direct node\n    frag = nodeToFragment(template);\n  }\n\n  return frag && shouldClone ? cloneNode(frag) : frag;\n}\n\nvar template = Object.freeze({\n  cloneNode: cloneNode,\n  parseTemplate: parseTemplate\n});\n\nvar html = {\n\n  bind: function bind() {\n    // a comment node means this is a binding for\n    // {{{ inline unescaped html }}}\n    if (this.el.nodeType === 8) {\n      // hold nodes\n      this.nodes = [];\n      // replace the placeholder with proper anchor\n      this.anchor = createAnchor('v-html');\n      replace(this.el, this.anchor);\n    }\n  },\n\n  update: function update(value) {\n    value = _toString(value);\n    if (this.nodes) {\n      this.swap(value);\n    } else {\n      this.el.innerHTML = value;\n    }\n  },\n\n  swap: function swap(value) {\n    // remove old nodes\n    var i = this.nodes.length;\n    while (i--) {\n      remove(this.nodes[i]);\n    }\n    // convert new value to a fragment\n    // do not attempt to retrieve from id selector\n    var frag = parseTemplate(value, true, true);\n    // save a reference to these nodes so we can remove later\n    this.nodes = toArray(frag.childNodes);\n    before(frag, this.anchor);\n  }\n};\n\n/**\n * Abstraction for a partially-compiled fragment.\n * Can optionally compile content with a child scope.\n *\n * @param {Function} linker\n * @param {Vue} vm\n * @param {DocumentFragment} frag\n * @param {Vue} [host]\n * @param {Object} [scope]\n * @param {Fragment} [parentFrag]\n */\nfunction Fragment(linker, vm, frag, host, scope, parentFrag) {\n  this.children = [];\n  this.childFrags = [];\n  this.vm = vm;\n  this.scope = scope;\n  this.inserted = false;\n  this.parentFrag = parentFrag;\n  if (parentFrag) {\n    parentFrag.childFrags.push(this);\n  }\n  this.unlink = linker(vm, frag, host, scope, this);\n  var single = this.single = frag.childNodes.length === 1 &&\n  // do not go single mode if the only node is an anchor\n  !frag.childNodes[0].__v_anchor;\n  if (single) {\n    this.node = frag.childNodes[0];\n    this.before = singleBefore;\n    this.remove = singleRemove;\n  } else {\n    this.node = createAnchor('fragment-start');\n    this.end = createAnchor('fragment-end');\n    this.frag = frag;\n    prepend(this.node, frag);\n    frag.appendChild(this.end);\n    this.before = multiBefore;\n    this.remove = multiRemove;\n  }\n  this.node.__v_frag = this;\n}\n\n/**\n * Call attach/detach for all components contained within\n * this fragment. Also do so recursively for all child\n * fragments.\n *\n * @param {Function} hook\n */\n\nFragment.prototype.callHook = function (hook) {\n  var i, l;\n  for (i = 0, l = this.childFrags.length; i < l; i++) {\n    this.childFrags[i].callHook(hook);\n  }\n  for (i = 0, l = this.children.length; i < l; i++) {\n    hook(this.children[i]);\n  }\n};\n\n/**\n * Insert fragment before target, single node version\n *\n * @param {Node} target\n * @param {Boolean} withTransition\n */\n\nfunction singleBefore(target, withTransition) {\n  this.inserted = true;\n  var method = withTransition !== false ? beforeWithTransition : before;\n  method(this.node, target, this.vm);\n  if (inDoc(this.node)) {\n    this.callHook(attach);\n  }\n}\n\n/**\n * Remove fragment, single node version\n */\n\nfunction singleRemove() {\n  this.inserted = false;\n  var shouldCallRemove = inDoc(this.node);\n  var self = this;\n  this.beforeRemove();\n  removeWithTransition(this.node, this.vm, function () {\n    if (shouldCallRemove) {\n      self.callHook(detach);\n    }\n    self.destroy();\n  });\n}\n\n/**\n * Insert fragment before target, multi-nodes version\n *\n * @param {Node} target\n * @param {Boolean} withTransition\n */\n\nfunction multiBefore(target, withTransition) {\n  this.inserted = true;\n  var vm = this.vm;\n  var method = withTransition !== false ? beforeWithTransition : before;\n  mapNodeRange(this.node, this.end, function (node) {\n    method(node, target, vm);\n  });\n  if (inDoc(this.node)) {\n    this.callHook(attach);\n  }\n}\n\n/**\n * Remove fragment, multi-nodes version\n */\n\nfunction multiRemove() {\n  this.inserted = false;\n  var self = this;\n  var shouldCallRemove = inDoc(this.node);\n  this.beforeRemove();\n  removeNodeRange(this.node, this.end, this.vm, this.frag, function () {\n    if (shouldCallRemove) {\n      self.callHook(detach);\n    }\n    self.destroy();\n  });\n}\n\n/**\n * Prepare the fragment for removal.\n */\n\nFragment.prototype.beforeRemove = function () {\n  var i, l;\n  for (i = 0, l = this.childFrags.length; i < l; i++) {\n    // call the same method recursively on child\n    // fragments, depth-first\n    this.childFrags[i].beforeRemove(false);\n  }\n  for (i = 0, l = this.children.length; i < l; i++) {\n    // Call destroy for all contained instances,\n    // with remove:false and defer:true.\n    // Defer is necessary because we need to\n    // keep the children to call detach hooks\n    // on them.\n    this.children[i].$destroy(false, true);\n  }\n  var dirs = this.unlink.dirs;\n  for (i = 0, l = dirs.length; i < l; i++) {\n    // disable the watchers on all the directives\n    // so that the rendered content stays the same\n    // during removal.\n    dirs[i]._watcher && dirs[i]._watcher.teardown();\n  }\n};\n\n/**\n * Destroy the fragment.\n */\n\nFragment.prototype.destroy = function () {\n  if (this.parentFrag) {\n    this.parentFrag.childFrags.$remove(this);\n  }\n  this.node.__v_frag = null;\n  this.unlink();\n};\n\n/**\n * Call attach hook for a Vue instance.\n *\n * @param {Vue} child\n */\n\nfunction attach(child) {\n  if (!child._isAttached && inDoc(child.$el)) {\n    child._callHook('attached');\n  }\n}\n\n/**\n * Call detach hook for a Vue instance.\n *\n * @param {Vue} child\n */\n\nfunction detach(child) {\n  if (child._isAttached && !inDoc(child.$el)) {\n    child._callHook('detached');\n  }\n}\n\nvar linkerCache = new Cache(5000);\n\n/**\n * A factory that can be used to create instances of a\n * fragment. Caches the compiled linker if possible.\n *\n * @param {Vue} vm\n * @param {Element|String} el\n */\nfunction FragmentFactory(vm, el) {\n  this.vm = vm;\n  var template;\n  var isString = typeof el === 'string';\n  if (isString || isTemplate(el) && !el.hasAttribute('v-if')) {\n    template = parseTemplate(el, true);\n  } else {\n    template = document.createDocumentFragment();\n    template.appendChild(el);\n  }\n  this.template = template;\n  // linker can be cached, but only for components\n  var linker;\n  var cid = vm.constructor.cid;\n  if (cid > 0) {\n    var cacheId = cid + (isString ? el : getOuterHTML(el));\n    linker = linkerCache.get(cacheId);\n    if (!linker) {\n      linker = compile(template, vm.$options, true);\n      linkerCache.put(cacheId, linker);\n    }\n  } else {\n    linker = compile(template, vm.$options, true);\n  }\n  this.linker = linker;\n}\n\n/**\n * Create a fragment instance with given host and scope.\n *\n * @param {Vue} host\n * @param {Object} scope\n * @param {Fragment} parentFrag\n */\n\nFragmentFactory.prototype.create = function (host, scope, parentFrag) {\n  var frag = cloneNode(this.template);\n  return new Fragment(this.linker, this.vm, frag, host, scope, parentFrag);\n};\n\nvar ON = 700;\nvar MODEL = 800;\nvar BIND = 850;\nvar TRANSITION = 1100;\nvar EL = 1500;\nvar COMPONENT = 1500;\nvar PARTIAL = 1750;\nvar IF = 2100;\nvar FOR = 2200;\nvar SLOT = 2300;\n\nvar uid$3 = 0;\n\nvar vFor = {\n\n  priority: FOR,\n  terminal: true,\n\n  params: ['track-by', 'stagger', 'enter-stagger', 'leave-stagger'],\n\n  bind: function bind() {\n    if (process.env.NODE_ENV !== 'production' && this.el.hasAttribute('v-if')) {\n      warn('<' + this.el.tagName.toLowerCase() + ' v-for=\"' + this.expression + '\" v-if=\"' + this.el.getAttribute('v-if') + '\">: ' + 'Using v-if and v-for on the same element is not recommended - ' + 'consider filtering the source Array instead.', this.vm);\n    }\n\n    // support \"item in/of items\" syntax\n    var inMatch = this.expression.match(/(.*) (?:in|of) (.*)/);\n    if (inMatch) {\n      var itMatch = inMatch[1].match(/\\((.*),(.*)\\)/);\n      if (itMatch) {\n        this.iterator = itMatch[1].trim();\n        this.alias = itMatch[2].trim();\n      } else {\n        this.alias = inMatch[1].trim();\n      }\n      this.expression = inMatch[2];\n    }\n\n    if (!this.alias) {\n      process.env.NODE_ENV !== 'production' && warn('Invalid v-for expression \"' + this.descriptor.raw + '\": ' + 'alias is required.', this.vm);\n      return;\n    }\n\n    // uid as a cache identifier\n    this.id = '__v-for__' + ++uid$3;\n\n    // check if this is an option list,\n    // so that we know if we need to update the <select>'s\n    // v-model when the option list has changed.\n    // because v-model has a lower priority than v-for,\n    // the v-model is not bound here yet, so we have to\n    // retrive it in the actual updateModel() function.\n    var tag = this.el.tagName;\n    this.isOption = (tag === 'OPTION' || tag === 'OPTGROUP') && this.el.parentNode.tagName === 'SELECT';\n\n    // setup anchor nodes\n    this.start = createAnchor('v-for-start');\n    this.end = createAnchor('v-for-end');\n    replace(this.el, this.end);\n    before(this.start, this.end);\n\n    // cache\n    this.cache = Object.create(null);\n\n    // fragment factory\n    this.factory = new FragmentFactory(this.vm, this.el);\n  },\n\n  update: function update(data) {\n    this.diff(data);\n    this.updateRef();\n    this.updateModel();\n  },\n\n  /**\n   * Diff, based on new data and old data, determine the\n   * minimum amount of DOM manipulations needed to make the\n   * DOM reflect the new data Array.\n   *\n   * The algorithm diffs the new data Array by storing a\n   * hidden reference to an owner vm instance on previously\n   * seen data. This allows us to achieve O(n) which is\n   * better than a levenshtein distance based algorithm,\n   * which is O(m * n).\n   *\n   * @param {Array} data\n   */\n\n  diff: function diff(data) {\n    // check if the Array was converted from an Object\n    var item = data[0];\n    var convertedFromObject = this.fromObject = isObject(item) && hasOwn(item, '$key') && hasOwn(item, '$value');\n\n    var trackByKey = this.params.trackBy;\n    var oldFrags = this.frags;\n    var frags = this.frags = new Array(data.length);\n    var alias = this.alias;\n    var iterator = this.iterator;\n    var start = this.start;\n    var end = this.end;\n    var inDocument = inDoc(start);\n    var init = !oldFrags;\n    var i, l, frag, key, value, primitive;\n\n    // First pass, go through the new Array and fill up\n    // the new frags array. If a piece of data has a cached\n    // instance for it, we reuse it. Otherwise build a new\n    // instance.\n    for (i = 0, l = data.length; i < l; i++) {\n      item = data[i];\n      key = convertedFromObject ? item.$key : null;\n      value = convertedFromObject ? item.$value : item;\n      primitive = !isObject(value);\n      frag = !init && this.getCachedFrag(value, i, key);\n      if (frag) {\n        // reusable fragment\n        frag.reused = true;\n        // update $index\n        frag.scope.$index = i;\n        // update $key\n        if (key) {\n          frag.scope.$key = key;\n        }\n        // update iterator\n        if (iterator) {\n          frag.scope[iterator] = key !== null ? key : i;\n        }\n        // update data for track-by, object repeat &\n        // primitive values.\n        if (trackByKey || convertedFromObject || primitive) {\n          withoutConversion(function () {\n            frag.scope[alias] = value;\n          });\n        }\n      } else {\n        // new instance\n        frag = this.create(value, alias, i, key);\n        frag.fresh = !init;\n      }\n      frags[i] = frag;\n      if (init) {\n        frag.before(end);\n      }\n    }\n\n    // we're done for the initial render.\n    if (init) {\n      return;\n    }\n\n    // Second pass, go through the old fragments and\n    // destroy those who are not reused (and remove them\n    // from cache)\n    var removalIndex = 0;\n    var totalRemoved = oldFrags.length - frags.length;\n    // when removing a large number of fragments, watcher removal\n    // turns out to be a perf bottleneck, so we batch the watcher\n    // removals into a single filter call!\n    this.vm._vForRemoving = true;\n    for (i = 0, l = oldFrags.length; i < l; i++) {\n      frag = oldFrags[i];\n      if (!frag.reused) {\n        this.deleteCachedFrag(frag);\n        this.remove(frag, removalIndex++, totalRemoved, inDocument);\n      }\n    }\n    this.vm._vForRemoving = false;\n    if (removalIndex) {\n      this.vm._watchers = this.vm._watchers.filter(function (w) {\n        return w.active;\n      });\n    }\n\n    // Final pass, move/insert new fragments into the\n    // right place.\n    var targetPrev, prevEl, currentPrev;\n    var insertionIndex = 0;\n    for (i = 0, l = frags.length; i < l; i++) {\n      frag = frags[i];\n      // this is the frag that we should be after\n      targetPrev = frags[i - 1];\n      prevEl = targetPrev ? targetPrev.staggerCb ? targetPrev.staggerAnchor : targetPrev.end || targetPrev.node : start;\n      if (frag.reused && !frag.staggerCb) {\n        currentPrev = findPrevFrag(frag, start, this.id);\n        if (currentPrev !== targetPrev && (!currentPrev ||\n        // optimization for moving a single item.\n        // thanks to suggestions by @livoras in #1807\n        findPrevFrag(currentPrev, start, this.id) !== targetPrev)) {\n          this.move(frag, prevEl);\n        }\n      } else {\n        // new instance, or still in stagger.\n        // insert with updated stagger index.\n        this.insert(frag, insertionIndex++, prevEl, inDocument);\n      }\n      frag.reused = frag.fresh = false;\n    }\n  },\n\n  /**\n   * Create a new fragment instance.\n   *\n   * @param {*} value\n   * @param {String} alias\n   * @param {Number} index\n   * @param {String} [key]\n   * @return {Fragment}\n   */\n\n  create: function create(value, alias, index, key) {\n    var host = this._host;\n    // create iteration scope\n    var parentScope = this._scope || this.vm;\n    var scope = Object.create(parentScope);\n    // ref holder for the scope\n    scope.$refs = Object.create(parentScope.$refs);\n    scope.$els = Object.create(parentScope.$els);\n    // make sure point $parent to parent scope\n    scope.$parent = parentScope;\n    // for two-way binding on alias\n    scope.$forContext = this;\n    // define scope properties\n    // important: define the scope alias without forced conversion\n    // so that frozen data structures remain non-reactive.\n    withoutConversion(function () {\n      defineReactive(scope, alias, value);\n    });\n    defineReactive(scope, '$index', index);\n    if (key) {\n      defineReactive(scope, '$key', key);\n    } else if (scope.$key) {\n      // avoid accidental fallback\n      def(scope, '$key', null);\n    }\n    if (this.iterator) {\n      defineReactive(scope, this.iterator, key !== null ? key : index);\n    }\n    var frag = this.factory.create(host, scope, this._frag);\n    frag.forId = this.id;\n    this.cacheFrag(value, frag, index, key);\n    return frag;\n  },\n\n  /**\n   * Update the v-ref on owner vm.\n   */\n\n  updateRef: function updateRef() {\n    var ref = this.descriptor.ref;\n    if (!ref) return;\n    var hash = (this._scope || this.vm).$refs;\n    var refs;\n    if (!this.fromObject) {\n      refs = this.frags.map(findVmFromFrag);\n    } else {\n      refs = {};\n      this.frags.forEach(function (frag) {\n        refs[frag.scope.$key] = findVmFromFrag(frag);\n      });\n    }\n    hash[ref] = refs;\n  },\n\n  /**\n   * For option lists, update the containing v-model on\n   * parent <select>.\n   */\n\n  updateModel: function updateModel() {\n    if (this.isOption) {\n      var parent = this.start.parentNode;\n      var model = parent && parent.__v_model;\n      if (model) {\n        model.forceUpdate();\n      }\n    }\n  },\n\n  /**\n   * Insert a fragment. Handles staggering.\n   *\n   * @param {Fragment} frag\n   * @param {Number} index\n   * @param {Node} prevEl\n   * @param {Boolean} inDocument\n   */\n\n  insert: function insert(frag, index, prevEl, inDocument) {\n    if (frag.staggerCb) {\n      frag.staggerCb.cancel();\n      frag.staggerCb = null;\n    }\n    var staggerAmount = this.getStagger(frag, index, null, 'enter');\n    if (inDocument && staggerAmount) {\n      // create an anchor and insert it synchronously,\n      // so that we can resolve the correct order without\n      // worrying about some elements not inserted yet\n      var anchor = frag.staggerAnchor;\n      if (!anchor) {\n        anchor = frag.staggerAnchor = createAnchor('stagger-anchor');\n        anchor.__v_frag = frag;\n      }\n      after(anchor, prevEl);\n      var op = frag.staggerCb = cancellable(function () {\n        frag.staggerCb = null;\n        frag.before(anchor);\n        remove(anchor);\n      });\n      setTimeout(op, staggerAmount);\n    } else {\n      var target = prevEl.nextSibling;\n      /* istanbul ignore if */\n      if (!target) {\n        // reset end anchor position in case the position was messed up\n        // by an external drag-n-drop library.\n        after(this.end, prevEl);\n        target = this.end;\n      }\n      frag.before(target);\n    }\n  },\n\n  /**\n   * Remove a fragment. Handles staggering.\n   *\n   * @param {Fragment} frag\n   * @param {Number} index\n   * @param {Number} total\n   * @param {Boolean} inDocument\n   */\n\n  remove: function remove(frag, index, total, inDocument) {\n    if (frag.staggerCb) {\n      frag.staggerCb.cancel();\n      frag.staggerCb = null;\n      // it's not possible for the same frag to be removed\n      // twice, so if we have a pending stagger callback,\n      // it means this frag is queued for enter but removed\n      // before its transition started. Since it is already\n      // destroyed, we can just leave it in detached state.\n      return;\n    }\n    var staggerAmount = this.getStagger(frag, index, total, 'leave');\n    if (inDocument && staggerAmount) {\n      var op = frag.staggerCb = cancellable(function () {\n        frag.staggerCb = null;\n        frag.remove();\n      });\n      setTimeout(op, staggerAmount);\n    } else {\n      frag.remove();\n    }\n  },\n\n  /**\n   * Move a fragment to a new position.\n   * Force no transition.\n   *\n   * @param {Fragment} frag\n   * @param {Node} prevEl\n   */\n\n  move: function move(frag, prevEl) {\n    // fix a common issue with Sortable:\n    // if prevEl doesn't have nextSibling, this means it's\n    // been dragged after the end anchor. Just re-position\n    // the end anchor to the end of the container.\n    /* istanbul ignore if */\n    if (!prevEl.nextSibling) {\n      this.end.parentNode.appendChild(this.end);\n    }\n    frag.before(prevEl.nextSibling, false);\n  },\n\n  /**\n   * Cache a fragment using track-by or the object key.\n   *\n   * @param {*} value\n   * @param {Fragment} frag\n   * @param {Number} index\n   * @param {String} [key]\n   */\n\n  cacheFrag: function cacheFrag(value, frag, index, key) {\n    var trackByKey = this.params.trackBy;\n    var cache = this.cache;\n    var primitive = !isObject(value);\n    var id;\n    if (key || trackByKey || primitive) {\n      id = getTrackByKey(index, key, value, trackByKey);\n      if (!cache[id]) {\n        cache[id] = frag;\n      } else if (trackByKey !== '$index') {\n        process.env.NODE_ENV !== 'production' && this.warnDuplicate(value);\n      }\n    } else {\n      id = this.id;\n      if (hasOwn(value, id)) {\n        if (value[id] === null) {\n          value[id] = frag;\n        } else {\n          process.env.NODE_ENV !== 'production' && this.warnDuplicate(value);\n        }\n      } else if (Object.isExtensible(value)) {\n        def(value, id, frag);\n      } else if (process.env.NODE_ENV !== 'production') {\n        warn('Frozen v-for objects cannot be automatically tracked, make sure to ' + 'provide a track-by key.');\n      }\n    }\n    frag.raw = value;\n  },\n\n  /**\n   * Get a cached fragment from the value/index/key\n   *\n   * @param {*} value\n   * @param {Number} index\n   * @param {String} key\n   * @return {Fragment}\n   */\n\n  getCachedFrag: function getCachedFrag(value, index, key) {\n    var trackByKey = this.params.trackBy;\n    var primitive = !isObject(value);\n    var frag;\n    if (key || trackByKey || primitive) {\n      var id = getTrackByKey(index, key, value, trackByKey);\n      frag = this.cache[id];\n    } else {\n      frag = value[this.id];\n    }\n    if (frag && (frag.reused || frag.fresh)) {\n      process.env.NODE_ENV !== 'production' && this.warnDuplicate(value);\n    }\n    return frag;\n  },\n\n  /**\n   * Delete a fragment from cache.\n   *\n   * @param {Fragment} frag\n   */\n\n  deleteCachedFrag: function deleteCachedFrag(frag) {\n    var value = frag.raw;\n    var trackByKey = this.params.trackBy;\n    var scope = frag.scope;\n    var index = scope.$index;\n    // fix #948: avoid accidentally fall through to\n    // a parent repeater which happens to have $key.\n    var key = hasOwn(scope, '$key') && scope.$key;\n    var primitive = !isObject(value);\n    if (trackByKey || key || primitive) {\n      var id = getTrackByKey(index, key, value, trackByKey);\n      this.cache[id] = null;\n    } else {\n      value[this.id] = null;\n      frag.raw = null;\n    }\n  },\n\n  /**\n   * Get the stagger amount for an insertion/removal.\n   *\n   * @param {Fragment} frag\n   * @param {Number} index\n   * @param {Number} total\n   * @param {String} type\n   */\n\n  getStagger: function getStagger(frag, index, total, type) {\n    type = type + 'Stagger';\n    var trans = frag.node.__v_trans;\n    var hooks = trans && trans.hooks;\n    var hook = hooks && (hooks[type] || hooks.stagger);\n    return hook ? hook.call(frag, index, total) : index * parseInt(this.params[type] || this.params.stagger, 10);\n  },\n\n  /**\n   * Pre-process the value before piping it through the\n   * filters. This is passed to and called by the watcher.\n   */\n\n  _preProcess: function _preProcess(value) {\n    // regardless of type, store the un-filtered raw value.\n    this.rawValue = value;\n    return value;\n  },\n\n  /**\n   * Post-process the value after it has been piped through\n   * the filters. This is passed to and called by the watcher.\n   *\n   * It is necessary for this to be called during the\n   * watcher's dependency collection phase because we want\n   * the v-for to update when the source Object is mutated.\n   */\n\n  _postProcess: function _postProcess(value) {\n    if (isArray(value)) {\n      return value;\n    } else if (isPlainObject(value)) {\n      // convert plain object to array.\n      var keys = Object.keys(value);\n      var i = keys.length;\n      var res = new Array(i);\n      var key;\n      while (i--) {\n        key = keys[i];\n        res[i] = {\n          $key: key,\n          $value: value[key]\n        };\n      }\n      return res;\n    } else {\n      if (typeof value === 'number' && !isNaN(value)) {\n        value = range(value);\n      }\n      return value || [];\n    }\n  },\n\n  unbind: function unbind() {\n    if (this.descriptor.ref) {\n      (this._scope || this.vm).$refs[this.descriptor.ref] = null;\n    }\n    if (this.frags) {\n      var i = this.frags.length;\n      var frag;\n      while (i--) {\n        frag = this.frags[i];\n        this.deleteCachedFrag(frag);\n        frag.destroy();\n      }\n    }\n  }\n};\n\n/**\n * Helper to find the previous element that is a fragment\n * anchor. This is necessary because a destroyed frag's\n * element could still be lingering in the DOM before its\n * leaving transition finishes, but its inserted flag\n * should have been set to false so we can skip them.\n *\n * If this is a block repeat, we want to make sure we only\n * return frag that is bound to this v-for. (see #929)\n *\n * @param {Fragment} frag\n * @param {Comment|Text} anchor\n * @param {String} id\n * @return {Fragment}\n */\n\nfunction findPrevFrag(frag, anchor, id) {\n  var el = frag.node.previousSibling;\n  /* istanbul ignore if */\n  if (!el) return;\n  frag = el.__v_frag;\n  while ((!frag || frag.forId !== id || !frag.inserted) && el !== anchor) {\n    el = el.previousSibling;\n    /* istanbul ignore if */\n    if (!el) return;\n    frag = el.__v_frag;\n  }\n  return frag;\n}\n\n/**\n * Create a range array from given number.\n *\n * @param {Number} n\n * @return {Array}\n */\n\nfunction range(n) {\n  var i = -1;\n  var ret = new Array(Math.floor(n));\n  while (++i < n) {\n    ret[i] = i;\n  }\n  return ret;\n}\n\n/**\n * Get the track by key for an item.\n *\n * @param {Number} index\n * @param {String} key\n * @param {*} value\n * @param {String} [trackByKey]\n */\n\nfunction getTrackByKey(index, key, value, trackByKey) {\n  return trackByKey ? trackByKey === '$index' ? index : trackByKey.charAt(0).match(/\\w/) ? getPath(value, trackByKey) : value[trackByKey] : key || value;\n}\n\nif (process.env.NODE_ENV !== 'production') {\n  vFor.warnDuplicate = function (value) {\n    warn('Duplicate value found in v-for=\"' + this.descriptor.raw + '\": ' + JSON.stringify(value) + '. Use track-by=\"$index\" if ' + 'you are expecting duplicate values.', this.vm);\n  };\n}\n\n/**\n * Find a vm from a fragment.\n *\n * @param {Fragment} frag\n * @return {Vue|undefined}\n */\n\nfunction findVmFromFrag(frag) {\n  var node = frag.node;\n  // handle multi-node frag\n  if (frag.end) {\n    while (!node.__vue__ && node !== frag.end && node.nextSibling) {\n      node = node.nextSibling;\n    }\n  }\n  return node.__vue__;\n}\n\nvar vIf = {\n\n  priority: IF,\n  terminal: true,\n\n  bind: function bind() {\n    var el = this.el;\n    if (!el.__vue__) {\n      // check else block\n      var next = el.nextElementSibling;\n      if (next && getAttr(next, 'v-else') !== null) {\n        remove(next);\n        this.elseEl = next;\n      }\n      // check main block\n      this.anchor = createAnchor('v-if');\n      replace(el, this.anchor);\n    } else {\n      process.env.NODE_ENV !== 'production' && warn('v-if=\"' + this.expression + '\" cannot be ' + 'used on an instance root element.', this.vm);\n      this.invalid = true;\n    }\n  },\n\n  update: function update(value) {\n    if (this.invalid) return;\n    if (value) {\n      if (!this.frag) {\n        this.insert();\n      }\n    } else {\n      this.remove();\n    }\n  },\n\n  insert: function insert() {\n    if (this.elseFrag) {\n      this.elseFrag.remove();\n      this.elseFrag = null;\n    }\n    // lazy init factory\n    if (!this.factory) {\n      this.factory = new FragmentFactory(this.vm, this.el);\n    }\n    this.frag = this.factory.create(this._host, this._scope, this._frag);\n    this.frag.before(this.anchor);\n  },\n\n  remove: function remove() {\n    if (this.frag) {\n      this.frag.remove();\n      this.frag = null;\n    }\n    if (this.elseEl && !this.elseFrag) {\n      if (!this.elseFactory) {\n        this.elseFactory = new FragmentFactory(this.elseEl._context || this.vm, this.elseEl);\n      }\n      this.elseFrag = this.elseFactory.create(this._host, this._scope, this._frag);\n      this.elseFrag.before(this.anchor);\n    }\n  },\n\n  unbind: function unbind() {\n    if (this.frag) {\n      this.frag.destroy();\n    }\n    if (this.elseFrag) {\n      this.elseFrag.destroy();\n    }\n  }\n};\n\nvar show = {\n\n  bind: function bind() {\n    // check else block\n    var next = this.el.nextElementSibling;\n    if (next && getAttr(next, 'v-else') !== null) {\n      this.elseEl = next;\n    }\n  },\n\n  update: function update(value) {\n    this.apply(this.el, value);\n    if (this.elseEl) {\n      this.apply(this.elseEl, !value);\n    }\n  },\n\n  apply: function apply(el, value) {\n    if (inDoc(el)) {\n      applyTransition(el, value ? 1 : -1, toggle, this.vm);\n    } else {\n      toggle();\n    }\n    function toggle() {\n      el.style.display = value ? '' : 'none';\n    }\n  }\n};\n\nvar text$2 = {\n\n  bind: function bind() {\n    var self = this;\n    var el = this.el;\n    var isRange = el.type === 'range';\n    var lazy = this.params.lazy;\n    var number = this.params.number;\n    var debounce = this.params.debounce;\n\n    // handle composition events.\n    //   http://blog.evanyou.me/2014/01/03/composition-event/\n    // skip this for Android because it handles composition\n    // events quite differently. Android doesn't trigger\n    // composition events for language input methods e.g.\n    // Chinese, but instead triggers them for spelling\n    // suggestions... (see Discussion/#162)\n    var composing = false;\n    if (!isAndroid && !isRange) {\n      this.on('compositionstart', function () {\n        composing = true;\n      });\n      this.on('compositionend', function () {\n        composing = false;\n        // in IE11 the \"compositionend\" event fires AFTER\n        // the \"input\" event, so the input handler is blocked\n        // at the end... have to call it here.\n        //\n        // #1327: in lazy mode this is unecessary.\n        if (!lazy) {\n          self.listener();\n        }\n      });\n    }\n\n    // prevent messing with the input when user is typing,\n    // and force update on blur.\n    this.focused = false;\n    if (!isRange && !lazy) {\n      this.on('focus', function () {\n        self.focused = true;\n      });\n      this.on('blur', function () {\n        self.focused = false;\n        // do not sync value after fragment removal (#2017)\n        if (!self._frag || self._frag.inserted) {\n          self.rawListener();\n        }\n      });\n    }\n\n    // Now attach the main listener\n    this.listener = this.rawListener = function () {\n      if (composing || !self._bound) {\n        return;\n      }\n      var val = number || isRange ? toNumber(el.value) : el.value;\n      self.set(val);\n      // force update on next tick to avoid lock & same value\n      // also only update when user is not typing\n      nextTick(function () {\n        if (self._bound && !self.focused) {\n          self.update(self._watcher.value);\n        }\n      });\n    };\n\n    // apply debounce\n    if (debounce) {\n      this.listener = _debounce(this.listener, debounce);\n    }\n\n    // Support jQuery events, since jQuery.trigger() doesn't\n    // trigger native events in some cases and some plugins\n    // rely on $.trigger()\n    //\n    // We want to make sure if a listener is attached using\n    // jQuery, it is also removed with jQuery, that's why\n    // we do the check for each directive instance and\n    // store that check result on itself. This also allows\n    // easier test coverage control by unsetting the global\n    // jQuery variable in tests.\n    this.hasjQuery = typeof jQuery === 'function';\n    if (this.hasjQuery) {\n      var method = jQuery.fn.on ? 'on' : 'bind';\n      jQuery(el)[method]('change', this.rawListener);\n      if (!lazy) {\n        jQuery(el)[method]('input', this.listener);\n      }\n    } else {\n      this.on('change', this.rawListener);\n      if (!lazy) {\n        this.on('input', this.listener);\n      }\n    }\n\n    // IE9 doesn't fire input event on backspace/del/cut\n    if (!lazy && isIE9) {\n      this.on('cut', function () {\n        nextTick(self.listener);\n      });\n      this.on('keyup', function (e) {\n        if (e.keyCode === 46 || e.keyCode === 8) {\n          self.listener();\n        }\n      });\n    }\n\n    // set initial value if present\n    if (el.hasAttribute('value') || el.tagName === 'TEXTAREA' && el.value.trim()) {\n      this.afterBind = this.listener;\n    }\n  },\n\n  update: function update(value) {\n    // #3029 only update when the value changes. This prevent\n    // browsers from overwriting values like selectionStart\n    value = _toString(value);\n    if (value !== this.el.value) this.el.value = value;\n  },\n\n  unbind: function unbind() {\n    var el = this.el;\n    if (this.hasjQuery) {\n      var method = jQuery.fn.off ? 'off' : 'unbind';\n      jQuery(el)[method]('change', this.listener);\n      jQuery(el)[method]('input', this.listener);\n    }\n  }\n};\n\nvar radio = {\n\n  bind: function bind() {\n    var self = this;\n    var el = this.el;\n\n    this.getValue = function () {\n      // value overwrite via v-bind:value\n      if (el.hasOwnProperty('_value')) {\n        return el._value;\n      }\n      var val = el.value;\n      if (self.params.number) {\n        val = toNumber(val);\n      }\n      return val;\n    };\n\n    this.listener = function () {\n      self.set(self.getValue());\n    };\n    this.on('change', this.listener);\n\n    if (el.hasAttribute('checked')) {\n      this.afterBind = this.listener;\n    }\n  },\n\n  update: function update(value) {\n    this.el.checked = looseEqual(value, this.getValue());\n  }\n};\n\nvar select = {\n\n  bind: function bind() {\n    var _this = this;\n\n    var self = this;\n    var el = this.el;\n\n    // method to force update DOM using latest value.\n    this.forceUpdate = function () {\n      if (self._watcher) {\n        self.update(self._watcher.get());\n      }\n    };\n\n    // check if this is a multiple select\n    var multiple = this.multiple = el.hasAttribute('multiple');\n\n    // attach listener\n    this.listener = function () {\n      var value = getValue(el, multiple);\n      value = self.params.number ? isArray(value) ? value.map(toNumber) : toNumber(value) : value;\n      self.set(value);\n    };\n    this.on('change', this.listener);\n\n    // if has initial value, set afterBind\n    var initValue = getValue(el, multiple, true);\n    if (multiple && initValue.length || !multiple && initValue !== null) {\n      this.afterBind = this.listener;\n    }\n\n    // All major browsers except Firefox resets\n    // selectedIndex with value -1 to 0 when the element\n    // is appended to a new parent, therefore we have to\n    // force a DOM update whenever that happens...\n    this.vm.$on('hook:attached', function () {\n      nextTick(_this.forceUpdate);\n    });\n    if (!inDoc(el)) {\n      nextTick(this.forceUpdate);\n    }\n  },\n\n  update: function update(value) {\n    var el = this.el;\n    el.selectedIndex = -1;\n    var multi = this.multiple && isArray(value);\n    var options = el.options;\n    var i = options.length;\n    var op, val;\n    while (i--) {\n      op = options[i];\n      val = op.hasOwnProperty('_value') ? op._value : op.value;\n      /* eslint-disable eqeqeq */\n      op.selected = multi ? indexOf$1(value, val) > -1 : looseEqual(value, val);\n      /* eslint-enable eqeqeq */\n    }\n  },\n\n  unbind: function unbind() {\n    /* istanbul ignore next */\n    this.vm.$off('hook:attached', this.forceUpdate);\n  }\n};\n\n/**\n * Get select value\n *\n * @param {SelectElement} el\n * @param {Boolean} multi\n * @param {Boolean} init\n * @return {Array|*}\n */\n\nfunction getValue(el, multi, init) {\n  var res = multi ? [] : null;\n  var op, val, selected;\n  for (var i = 0, l = el.options.length; i < l; i++) {\n    op = el.options[i];\n    selected = init ? op.hasAttribute('selected') : op.selected;\n    if (selected) {\n      val = op.hasOwnProperty('_value') ? op._value : op.value;\n      if (multi) {\n        res.push(val);\n      } else {\n        return val;\n      }\n    }\n  }\n  return res;\n}\n\n/**\n * Native Array.indexOf uses strict equal, but in this\n * case we need to match string/numbers with custom equal.\n *\n * @param {Array} arr\n * @param {*} val\n */\n\nfunction indexOf$1(arr, val) {\n  var i = arr.length;\n  while (i--) {\n    if (looseEqual(arr[i], val)) {\n      return i;\n    }\n  }\n  return -1;\n}\n\nvar checkbox = {\n\n  bind: function bind() {\n    var self = this;\n    var el = this.el;\n\n    this.getValue = function () {\n      return el.hasOwnProperty('_value') ? el._value : self.params.number ? toNumber(el.value) : el.value;\n    };\n\n    function getBooleanValue() {\n      var val = el.checked;\n      if (val && el.hasOwnProperty('_trueValue')) {\n        return el._trueValue;\n      }\n      if (!val && el.hasOwnProperty('_falseValue')) {\n        return el._falseValue;\n      }\n      return val;\n    }\n\n    this.listener = function () {\n      var model = self._watcher.get();\n      if (isArray(model)) {\n        var val = self.getValue();\n        var i = indexOf(model, val);\n        if (el.checked) {\n          if (i < 0) {\n            self.set(model.concat(val));\n          }\n        } else if (i > -1) {\n          self.set(model.slice(0, i).concat(model.slice(i + 1)));\n        }\n      } else {\n        self.set(getBooleanValue());\n      }\n    };\n\n    this.on('change', this.listener);\n    if (el.hasAttribute('checked')) {\n      this.afterBind = this.listener;\n    }\n  },\n\n  update: function update(value) {\n    var el = this.el;\n    if (isArray(value)) {\n      el.checked = indexOf(value, this.getValue()) > -1;\n    } else {\n      if (el.hasOwnProperty('_trueValue')) {\n        el.checked = looseEqual(value, el._trueValue);\n      } else {\n        el.checked = !!value;\n      }\n    }\n  }\n};\n\nvar handlers = {\n  text: text$2,\n  radio: radio,\n  select: select,\n  checkbox: checkbox\n};\n\nvar model = {\n\n  priority: MODEL,\n  twoWay: true,\n  handlers: handlers,\n  params: ['lazy', 'number', 'debounce'],\n\n  /**\n   * Possible elements:\n   *   <select>\n   *   <textarea>\n   *   <input type=\"*\">\n   *     - text\n   *     - checkbox\n   *     - radio\n   *     - number\n   */\n\n  bind: function bind() {\n    // friendly warning...\n    this.checkFilters();\n    if (this.hasRead && !this.hasWrite) {\n      process.env.NODE_ENV !== 'production' && warn('It seems you are using a read-only filter with ' + 'v-model=\"' + this.descriptor.raw + '\". ' + 'You might want to use a two-way filter to ensure correct behavior.', this.vm);\n    }\n    var el = this.el;\n    var tag = el.tagName;\n    var handler;\n    if (tag === 'INPUT') {\n      handler = handlers[el.type] || handlers.text;\n    } else if (tag === 'SELECT') {\n      handler = handlers.select;\n    } else if (tag === 'TEXTAREA') {\n      handler = handlers.text;\n    } else {\n      process.env.NODE_ENV !== 'production' && warn('v-model does not support element type: ' + tag, this.vm);\n      return;\n    }\n    el.__v_model = this;\n    handler.bind.call(this);\n    this.update = handler.update;\n    this._unbind = handler.unbind;\n  },\n\n  /**\n   * Check read/write filter stats.\n   */\n\n  checkFilters: function checkFilters() {\n    var filters = this.filters;\n    if (!filters) return;\n    var i = filters.length;\n    while (i--) {\n      var filter = resolveAsset(this.vm.$options, 'filters', filters[i].name);\n      if (typeof filter === 'function' || filter.read) {\n        this.hasRead = true;\n      }\n      if (filter.write) {\n        this.hasWrite = true;\n      }\n    }\n  },\n\n  unbind: function unbind() {\n    this.el.__v_model = null;\n    this._unbind && this._unbind();\n  }\n};\n\n// keyCode aliases\nvar keyCodes = {\n  esc: 27,\n  tab: 9,\n  enter: 13,\n  space: 32,\n  'delete': [8, 46],\n  up: 38,\n  left: 37,\n  right: 39,\n  down: 40\n};\n\nfunction keyFilter(handler, keys) {\n  var codes = keys.map(function (key) {\n    var charCode = key.charCodeAt(0);\n    if (charCode > 47 && charCode < 58) {\n      return parseInt(key, 10);\n    }\n    if (key.length === 1) {\n      charCode = key.toUpperCase().charCodeAt(0);\n      if (charCode > 64 && charCode < 91) {\n        return charCode;\n      }\n    }\n    return keyCodes[key];\n  });\n  codes = [].concat.apply([], codes);\n  return function keyHandler(e) {\n    if (codes.indexOf(e.keyCode) > -1) {\n      return handler.call(this, e);\n    }\n  };\n}\n\nfunction stopFilter(handler) {\n  return function stopHandler(e) {\n    e.stopPropagation();\n    return handler.call(this, e);\n  };\n}\n\nfunction preventFilter(handler) {\n  return function preventHandler(e) {\n    e.preventDefault();\n    return handler.call(this, e);\n  };\n}\n\nfunction selfFilter(handler) {\n  return function selfHandler(e) {\n    if (e.target === e.currentTarget) {\n      return handler.call(this, e);\n    }\n  };\n}\n\nvar on$1 = {\n\n  priority: ON,\n  acceptStatement: true,\n  keyCodes: keyCodes,\n\n  bind: function bind() {\n    // deal with iframes\n    if (this.el.tagName === 'IFRAME' && this.arg !== 'load') {\n      var self = this;\n      this.iframeBind = function () {\n        on(self.el.contentWindow, self.arg, self.handler, self.modifiers.capture);\n      };\n      this.on('load', this.iframeBind);\n    }\n  },\n\n  update: function update(handler) {\n    // stub a noop for v-on with no value,\n    // e.g. @mousedown.prevent\n    if (!this.descriptor.raw) {\n      handler = function () {};\n    }\n\n    if (typeof handler !== 'function') {\n      process.env.NODE_ENV !== 'production' && warn('v-on:' + this.arg + '=\"' + this.expression + '\" expects a function value, ' + 'got ' + handler, this.vm);\n      return;\n    }\n\n    // apply modifiers\n    if (this.modifiers.stop) {\n      handler = stopFilter(handler);\n    }\n    if (this.modifiers.prevent) {\n      handler = preventFilter(handler);\n    }\n    if (this.modifiers.self) {\n      handler = selfFilter(handler);\n    }\n    // key filter\n    var keys = Object.keys(this.modifiers).filter(function (key) {\n      return key !== 'stop' && key !== 'prevent' && key !== 'self' && key !== 'capture';\n    });\n    if (keys.length) {\n      handler = keyFilter(handler, keys);\n    }\n\n    this.reset();\n    this.handler = handler;\n\n    if (this.iframeBind) {\n      this.iframeBind();\n    } else {\n      on(this.el, this.arg, this.handler, this.modifiers.capture);\n    }\n  },\n\n  reset: function reset() {\n    var el = this.iframeBind ? this.el.contentWindow : this.el;\n    if (this.handler) {\n      off(el, this.arg, this.handler);\n    }\n  },\n\n  unbind: function unbind() {\n    this.reset();\n  }\n};\n\nvar prefixes = ['-webkit-', '-moz-', '-ms-'];\nvar camelPrefixes = ['Webkit', 'Moz', 'ms'];\nvar importantRE = /!important;?$/;\nvar propCache = Object.create(null);\n\nvar testEl = null;\n\nvar style = {\n\n  deep: true,\n\n  update: function update(value) {\n    if (typeof value === 'string') {\n      this.el.style.cssText = value;\n    } else if (isArray(value)) {\n      this.handleObject(value.reduce(extend, {}));\n    } else {\n      this.handleObject(value || {});\n    }\n  },\n\n  handleObject: function handleObject(value) {\n    // cache object styles so that only changed props\n    // are actually updated.\n    var cache = this.cache || (this.cache = {});\n    var name, val;\n    for (name in cache) {\n      if (!(name in value)) {\n        this.handleSingle(name, null);\n        delete cache[name];\n      }\n    }\n    for (name in value) {\n      val = value[name];\n      if (val !== cache[name]) {\n        cache[name] = val;\n        this.handleSingle(name, val);\n      }\n    }\n  },\n\n  handleSingle: function handleSingle(prop, value) {\n    prop = normalize(prop);\n    if (!prop) return; // unsupported prop\n    // cast possible numbers/booleans into strings\n    if (value != null) value += '';\n    if (value) {\n      var isImportant = importantRE.test(value) ? 'important' : '';\n      if (isImportant) {\n        /* istanbul ignore if */\n        if (process.env.NODE_ENV !== 'production') {\n          warn('It\\'s probably a bad idea to use !important with inline rules. ' + 'This feature will be deprecated in a future version of Vue.');\n        }\n        value = value.replace(importantRE, '').trim();\n        this.el.style.setProperty(prop.kebab, value, isImportant);\n      } else {\n        this.el.style[prop.camel] = value;\n      }\n    } else {\n      this.el.style[prop.camel] = '';\n    }\n  }\n\n};\n\n/**\n * Normalize a CSS property name.\n * - cache result\n * - auto prefix\n * - camelCase -> dash-case\n *\n * @param {String} prop\n * @return {String}\n */\n\nfunction normalize(prop) {\n  if (propCache[prop]) {\n    return propCache[prop];\n  }\n  var res = prefix(prop);\n  propCache[prop] = propCache[res] = res;\n  return res;\n}\n\n/**\n * Auto detect the appropriate prefix for a CSS property.\n * https://gist.github.com/paulirish/523692\n *\n * @param {String} prop\n * @return {String}\n */\n\nfunction prefix(prop) {\n  prop = hyphenate(prop);\n  var camel = camelize(prop);\n  var upper = camel.charAt(0).toUpperCase() + camel.slice(1);\n  if (!testEl) {\n    testEl = document.createElement('div');\n  }\n  var i = prefixes.length;\n  var prefixed;\n  if (camel !== 'filter' && camel in testEl.style) {\n    return {\n      kebab: prop,\n      camel: camel\n    };\n  }\n  while (i--) {\n    prefixed = camelPrefixes[i] + upper;\n    if (prefixed in testEl.style) {\n      return {\n        kebab: prefixes[i] + prop,\n        camel: prefixed\n      };\n    }\n  }\n}\n\n// xlink\nvar xlinkNS = 'http://www.w3.org/1999/xlink';\nvar xlinkRE = /^xlink:/;\n\n// check for attributes that prohibit interpolations\nvar disallowedInterpAttrRE = /^v-|^:|^@|^(?:is|transition|transition-mode|debounce|track-by|stagger|enter-stagger|leave-stagger)$/;\n// these attributes should also set their corresponding properties\n// because they only affect the initial state of the element\nvar attrWithPropsRE = /^(?:value|checked|selected|muted)$/;\n// these attributes expect enumrated values of \"true\" or \"false\"\n// but are not boolean attributes\nvar enumeratedAttrRE = /^(?:draggable|contenteditable|spellcheck)$/;\n\n// these attributes should set a hidden property for\n// binding v-model to object values\nvar modelProps = {\n  value: '_value',\n  'true-value': '_trueValue',\n  'false-value': '_falseValue'\n};\n\nvar bind$1 = {\n\n  priority: BIND,\n\n  bind: function bind() {\n    var attr = this.arg;\n    var tag = this.el.tagName;\n    // should be deep watch on object mode\n    if (!attr) {\n      this.deep = true;\n    }\n    // handle interpolation bindings\n    var descriptor = this.descriptor;\n    var tokens = descriptor.interp;\n    if (tokens) {\n      // handle interpolations with one-time tokens\n      if (descriptor.hasOneTime) {\n        this.expression = tokensToExp(tokens, this._scope || this.vm);\n      }\n\n      // only allow binding on native attributes\n      if (disallowedInterpAttrRE.test(attr) || attr === 'name' && (tag === 'PARTIAL' || tag === 'SLOT')) {\n        process.env.NODE_ENV !== 'production' && warn(attr + '=\"' + descriptor.raw + '\": ' + 'attribute interpolation is not allowed in Vue.js ' + 'directives and special attributes.', this.vm);\n        this.el.removeAttribute(attr);\n        this.invalid = true;\n      }\n\n      /* istanbul ignore if */\n      if (process.env.NODE_ENV !== 'production') {\n        var raw = attr + '=\"' + descriptor.raw + '\": ';\n        // warn src\n        if (attr === 'src') {\n          warn(raw + 'interpolation in \"src\" attribute will cause ' + 'a 404 request. Use v-bind:src instead.', this.vm);\n        }\n\n        // warn style\n        if (attr === 'style') {\n          warn(raw + 'interpolation in \"style\" attribute will cause ' + 'the attribute to be discarded in Internet Explorer. ' + 'Use v-bind:style instead.', this.vm);\n        }\n      }\n    }\n  },\n\n  update: function update(value) {\n    if (this.invalid) {\n      return;\n    }\n    var attr = this.arg;\n    if (this.arg) {\n      this.handleSingle(attr, value);\n    } else {\n      this.handleObject(value || {});\n    }\n  },\n\n  // share object handler with v-bind:class\n  handleObject: style.handleObject,\n\n  handleSingle: function handleSingle(attr, value) {\n    var el = this.el;\n    var interp = this.descriptor.interp;\n    if (this.modifiers.camel) {\n      attr = camelize(attr);\n    }\n    if (!interp && attrWithPropsRE.test(attr) && attr in el) {\n      var attrValue = attr === 'value' ? value == null // IE9 will set input.value to \"null\" for null...\n      ? '' : value : value;\n\n      if (el[attr] !== attrValue) {\n        el[attr] = attrValue;\n      }\n    }\n    // set model props\n    var modelProp = modelProps[attr];\n    if (!interp && modelProp) {\n      el[modelProp] = value;\n      // update v-model if present\n      var model = el.__v_model;\n      if (model) {\n        model.listener();\n      }\n    }\n    // do not set value attribute for textarea\n    if (attr === 'value' && el.tagName === 'TEXTAREA') {\n      el.removeAttribute(attr);\n      return;\n    }\n    // update attribute\n    if (enumeratedAttrRE.test(attr)) {\n      el.setAttribute(attr, value ? 'true' : 'false');\n    } else if (value != null && value !== false) {\n      if (attr === 'class') {\n        // handle edge case #1960:\n        // class interpolation should not overwrite Vue transition class\n        if (el.__v_trans) {\n          value += ' ' + el.__v_trans.id + '-transition';\n        }\n        setClass(el, value);\n      } else if (xlinkRE.test(attr)) {\n        el.setAttributeNS(xlinkNS, attr, value === true ? '' : value);\n      } else {\n        el.setAttribute(attr, value === true ? '' : value);\n      }\n    } else {\n      el.removeAttribute(attr);\n    }\n  }\n};\n\nvar el = {\n\n  priority: EL,\n\n  bind: function bind() {\n    /* istanbul ignore if */\n    if (!this.arg) {\n      return;\n    }\n    var id = this.id = camelize(this.arg);\n    var refs = (this._scope || this.vm).$els;\n    if (hasOwn(refs, id)) {\n      refs[id] = this.el;\n    } else {\n      defineReactive(refs, id, this.el);\n    }\n  },\n\n  unbind: function unbind() {\n    var refs = (this._scope || this.vm).$els;\n    if (refs[this.id] === this.el) {\n      refs[this.id] = null;\n    }\n  }\n};\n\nvar ref = {\n  bind: function bind() {\n    process.env.NODE_ENV !== 'production' && warn('v-ref:' + this.arg + ' must be used on a child ' + 'component. Found on <' + this.el.tagName.toLowerCase() + '>.', this.vm);\n  }\n};\n\nvar cloak = {\n  bind: function bind() {\n    var el = this.el;\n    this.vm.$once('pre-hook:compiled', function () {\n      el.removeAttribute('v-cloak');\n    });\n  }\n};\n\n// logic control\n// two-way binding\n// event handling\n// attributes\n// ref & el\n// cloak\n// must export plain object\nvar directives = {\n  text: text$1,\n  html: html,\n  'for': vFor,\n  'if': vIf,\n  show: show,\n  model: model,\n  on: on$1,\n  bind: bind$1,\n  el: el,\n  ref: ref,\n  cloak: cloak\n};\n\nvar vClass = {\n\n  deep: true,\n\n  update: function update(value) {\n    if (!value) {\n      this.cleanup();\n    } else if (typeof value === 'string') {\n      this.setClass(value.trim().split(/\\s+/));\n    } else {\n      this.setClass(normalize$1(value));\n    }\n  },\n\n  setClass: function setClass(value) {\n    this.cleanup(value);\n    for (var i = 0, l = value.length; i < l; i++) {\n      var val = value[i];\n      if (val) {\n        apply(this.el, val, addClass);\n      }\n    }\n    this.prevKeys = value;\n  },\n\n  cleanup: function cleanup(value) {\n    var prevKeys = this.prevKeys;\n    if (!prevKeys) return;\n    var i = prevKeys.length;\n    while (i--) {\n      var key = prevKeys[i];\n      if (!value || value.indexOf(key) < 0) {\n        apply(this.el, key, removeClass);\n      }\n    }\n  }\n};\n\n/**\n * Normalize objects and arrays (potentially containing objects)\n * into array of strings.\n *\n * @param {Object|Array<String|Object>} value\n * @return {Array<String>}\n */\n\nfunction normalize$1(value) {\n  var res = [];\n  if (isArray(value)) {\n    for (var i = 0, l = value.length; i < l; i++) {\n      var _key = value[i];\n      if (_key) {\n        if (typeof _key === 'string') {\n          res.push(_key);\n        } else {\n          for (var k in _key) {\n            if (_key[k]) res.push(k);\n          }\n        }\n      }\n    }\n  } else if (isObject(value)) {\n    for (var key in value) {\n      if (value[key]) res.push(key);\n    }\n  }\n  return res;\n}\n\n/**\n * Add or remove a class/classes on an element\n *\n * @param {Element} el\n * @param {String} key The class name. This may or may not\n *                     contain a space character, in such a\n *                     case we'll deal with multiple class\n *                     names at once.\n * @param {Function} fn\n */\n\nfunction apply(el, key, fn) {\n  key = key.trim();\n  if (key.indexOf(' ') === -1) {\n    fn(el, key);\n    return;\n  }\n  // The key contains one or more space characters.\n  // Since a class name doesn't accept such characters, we\n  // treat it as multiple classes.\n  var keys = key.split(/\\s+/);\n  for (var i = 0, l = keys.length; i < l; i++) {\n    fn(el, keys[i]);\n  }\n}\n\nvar component = {\n\n  priority: COMPONENT,\n\n  params: ['keep-alive', 'transition-mode', 'inline-template'],\n\n  /**\n   * Setup. Two possible usages:\n   *\n   * - static:\n   *   <comp> or <div v-component=\"comp\">\n   *\n   * - dynamic:\n   *   <component :is=\"view\">\n   */\n\n  bind: function bind() {\n    if (!this.el.__vue__) {\n      // keep-alive cache\n      this.keepAlive = this.params.keepAlive;\n      if (this.keepAlive) {\n        this.cache = {};\n      }\n      // check inline-template\n      if (this.params.inlineTemplate) {\n        // extract inline template as a DocumentFragment\n        this.inlineTemplate = extractContent(this.el, true);\n      }\n      // component resolution related state\n      this.pendingComponentCb = this.Component = null;\n      // transition related state\n      this.pendingRemovals = 0;\n      this.pendingRemovalCb = null;\n      // create a ref anchor\n      this.anchor = createAnchor('v-component');\n      replace(this.el, this.anchor);\n      // remove is attribute.\n      // this is removed during compilation, but because compilation is\n      // cached, when the component is used elsewhere this attribute\n      // will remain at link time.\n      this.el.removeAttribute('is');\n      this.el.removeAttribute(':is');\n      // remove ref, same as above\n      if (this.descriptor.ref) {\n        this.el.removeAttribute('v-ref:' + hyphenate(this.descriptor.ref));\n      }\n      // if static, build right now.\n      if (this.literal) {\n        this.setComponent(this.expression);\n      }\n    } else {\n      process.env.NODE_ENV !== 'production' && warn('cannot mount component \"' + this.expression + '\" ' + 'on already mounted element: ' + this.el);\n    }\n  },\n\n  /**\n   * Public update, called by the watcher in the dynamic\n   * literal scenario, e.g. <component :is=\"view\">\n   */\n\n  update: function update(value) {\n    if (!this.literal) {\n      this.setComponent(value);\n    }\n  },\n\n  /**\n   * Switch dynamic components. May resolve the component\n   * asynchronously, and perform transition based on\n   * specified transition mode. Accepts a few additional\n   * arguments specifically for vue-router.\n   *\n   * The callback is called when the full transition is\n   * finished.\n   *\n   * @param {String} value\n   * @param {Function} [cb]\n   */\n\n  setComponent: function setComponent(value, cb) {\n    this.invalidatePending();\n    if (!value) {\n      // just remove current\n      this.unbuild(true);\n      this.remove(this.childVM, cb);\n      this.childVM = null;\n    } else {\n      var self = this;\n      this.resolveComponent(value, function () {\n        self.mountComponent(cb);\n      });\n    }\n  },\n\n  /**\n   * Resolve the component constructor to use when creating\n   * the child vm.\n   *\n   * @param {String|Function} value\n   * @param {Function} cb\n   */\n\n  resolveComponent: function resolveComponent(value, cb) {\n    var self = this;\n    this.pendingComponentCb = cancellable(function (Component) {\n      self.ComponentName = Component.options.name || (typeof value === 'string' ? value : null);\n      self.Component = Component;\n      cb();\n    });\n    this.vm._resolveComponent(value, this.pendingComponentCb);\n  },\n\n  /**\n   * Create a new instance using the current constructor and\n   * replace the existing instance. This method doesn't care\n   * whether the new component and the old one are actually\n   * the same.\n   *\n   * @param {Function} [cb]\n   */\n\n  mountComponent: function mountComponent(cb) {\n    // actual mount\n    this.unbuild(true);\n    var self = this;\n    var activateHooks = this.Component.options.activate;\n    var cached = this.getCached();\n    var newComponent = this.build();\n    if (activateHooks && !cached) {\n      this.waitingFor = newComponent;\n      callActivateHooks(activateHooks, newComponent, function () {\n        if (self.waitingFor !== newComponent) {\n          return;\n        }\n        self.waitingFor = null;\n        self.transition(newComponent, cb);\n      });\n    } else {\n      // update ref for kept-alive component\n      if (cached) {\n        newComponent._updateRef();\n      }\n      this.transition(newComponent, cb);\n    }\n  },\n\n  /**\n   * When the component changes or unbinds before an async\n   * constructor is resolved, we need to invalidate its\n   * pending callback.\n   */\n\n  invalidatePending: function invalidatePending() {\n    if (this.pendingComponentCb) {\n      this.pendingComponentCb.cancel();\n      this.pendingComponentCb = null;\n    }\n  },\n\n  /**\n   * Instantiate/insert a new child vm.\n   * If keep alive and has cached instance, insert that\n   * instance; otherwise build a new one and cache it.\n   *\n   * @param {Object} [extraOptions]\n   * @return {Vue} - the created instance\n   */\n\n  build: function build(extraOptions) {\n    var cached = this.getCached();\n    if (cached) {\n      return cached;\n    }\n    if (this.Component) {\n      // default options\n      var options = {\n        name: this.ComponentName,\n        el: cloneNode(this.el),\n        template: this.inlineTemplate,\n        // make sure to add the child with correct parent\n        // if this is a transcluded component, its parent\n        // should be the transclusion host.\n        parent: this._host || this.vm,\n        // if no inline-template, then the compiled\n        // linker can be cached for better performance.\n        _linkerCachable: !this.inlineTemplate,\n        _ref: this.descriptor.ref,\n        _asComponent: true,\n        _isRouterView: this._isRouterView,\n        // if this is a transcluded component, context\n        // will be the common parent vm of this instance\n        // and its host.\n        _context: this.vm,\n        // if this is inside an inline v-for, the scope\n        // will be the intermediate scope created for this\n        // repeat fragment. this is used for linking props\n        // and container directives.\n        _scope: this._scope,\n        // pass in the owner fragment of this component.\n        // this is necessary so that the fragment can keep\n        // track of its contained components in order to\n        // call attach/detach hooks for them.\n        _frag: this._frag\n      };\n      // extra options\n      // in 1.0.0 this is used by vue-router only\n      /* istanbul ignore if */\n      if (extraOptions) {\n        extend(options, extraOptions);\n      }\n      var child = new this.Component(options);\n      if (this.keepAlive) {\n        this.cache[this.Component.cid] = child;\n      }\n      /* istanbul ignore if */\n      if (process.env.NODE_ENV !== 'production' && this.el.hasAttribute('transition') && child._isFragment) {\n        warn('Transitions will not work on a fragment instance. ' + 'Template: ' + child.$options.template, child);\n      }\n      return child;\n    }\n  },\n\n  /**\n   * Try to get a cached instance of the current component.\n   *\n   * @return {Vue|undefined}\n   */\n\n  getCached: function getCached() {\n    return this.keepAlive && this.cache[this.Component.cid];\n  },\n\n  /**\n   * Teardown the current child, but defers cleanup so\n   * that we can separate the destroy and removal steps.\n   *\n   * @param {Boolean} defer\n   */\n\n  unbuild: function unbuild(defer) {\n    if (this.waitingFor) {\n      if (!this.keepAlive) {\n        this.waitingFor.$destroy();\n      }\n      this.waitingFor = null;\n    }\n    var child = this.childVM;\n    if (!child || this.keepAlive) {\n      if (child) {\n        // remove ref\n        child._inactive = true;\n        child._updateRef(true);\n      }\n      return;\n    }\n    // the sole purpose of `deferCleanup` is so that we can\n    // \"deactivate\" the vm right now and perform DOM removal\n    // later.\n    child.$destroy(false, defer);\n  },\n\n  /**\n   * Remove current destroyed child and manually do\n   * the cleanup after removal.\n   *\n   * @param {Function} cb\n   */\n\n  remove: function remove(child, cb) {\n    var keepAlive = this.keepAlive;\n    if (child) {\n      // we may have a component switch when a previous\n      // component is still being transitioned out.\n      // we want to trigger only one lastest insertion cb\n      // when the existing transition finishes. (#1119)\n      this.pendingRemovals++;\n      this.pendingRemovalCb = cb;\n      var self = this;\n      child.$remove(function () {\n        self.pendingRemovals--;\n        if (!keepAlive) child._cleanup();\n        if (!self.pendingRemovals && self.pendingRemovalCb) {\n          self.pendingRemovalCb();\n          self.pendingRemovalCb = null;\n        }\n      });\n    } else if (cb) {\n      cb();\n    }\n  },\n\n  /**\n   * Actually swap the components, depending on the\n   * transition mode. Defaults to simultaneous.\n   *\n   * @param {Vue} target\n   * @param {Function} [cb]\n   */\n\n  transition: function transition(target, cb) {\n    var self = this;\n    var current = this.childVM;\n    // for devtool inspection\n    if (current) current._inactive = true;\n    target._inactive = false;\n    this.childVM = target;\n    switch (self.params.transitionMode) {\n      case 'in-out':\n        target.$before(self.anchor, function () {\n          self.remove(current, cb);\n        });\n        break;\n      case 'out-in':\n        self.remove(current, function () {\n          target.$before(self.anchor, cb);\n        });\n        break;\n      default:\n        self.remove(current);\n        target.$before(self.anchor, cb);\n    }\n  },\n\n  /**\n   * Unbind.\n   */\n\n  unbind: function unbind() {\n    this.invalidatePending();\n    // Do not defer cleanup when unbinding\n    this.unbuild();\n    // destroy all keep-alive cached instances\n    if (this.cache) {\n      for (var key in this.cache) {\n        this.cache[key].$destroy();\n      }\n      this.cache = null;\n    }\n  }\n};\n\n/**\n * Call activate hooks in order (asynchronous)\n *\n * @param {Array} hooks\n * @param {Vue} vm\n * @param {Function} cb\n */\n\nfunction callActivateHooks(hooks, vm, cb) {\n  var total = hooks.length;\n  var called = 0;\n  hooks[0].call(vm, next);\n  function next() {\n    if (++called >= total) {\n      cb();\n    } else {\n      hooks[called].call(vm, next);\n    }\n  }\n}\n\nvar propBindingModes = config._propBindingModes;\nvar empty = {};\n\n// regexes\nvar identRE$1 = /^[$_a-zA-Z]+[\\w$]*$/;\nvar settablePathRE = /^[A-Za-z_$][\\w$]*(\\.[A-Za-z_$][\\w$]*|\\[[^\\[\\]]+\\])*$/;\n\n/**\n * Compile props on a root element and return\n * a props link function.\n *\n * @param {Element|DocumentFragment} el\n * @param {Array} propOptions\n * @param {Vue} vm\n * @return {Function} propsLinkFn\n */\n\nfunction compileProps(el, propOptions, vm) {\n  var props = [];\n  var propsData = vm.$options.propsData;\n  var names = Object.keys(propOptions);\n  var i = names.length;\n  var options, name, attr, value, path, parsed, prop;\n  while (i--) {\n    name = names[i];\n    options = propOptions[name] || empty;\n\n    if (process.env.NODE_ENV !== 'production' && name === '$data') {\n      warn('Do not use $data as prop.', vm);\n      continue;\n    }\n\n    // props could contain dashes, which will be\n    // interpreted as minus calculations by the parser\n    // so we need to camelize the path here\n    path = camelize(name);\n    if (!identRE$1.test(path)) {\n      process.env.NODE_ENV !== 'production' && warn('Invalid prop key: \"' + name + '\". Prop keys ' + 'must be valid identifiers.', vm);\n      continue;\n    }\n\n    prop = {\n      name: name,\n      path: path,\n      options: options,\n      mode: propBindingModes.ONE_WAY,\n      raw: null\n    };\n\n    attr = hyphenate(name);\n    // first check dynamic version\n    if ((value = getBindAttr(el, attr)) === null) {\n      if ((value = getBindAttr(el, attr + '.sync')) !== null) {\n        prop.mode = propBindingModes.TWO_WAY;\n      } else if ((value = getBindAttr(el, attr + '.once')) !== null) {\n        prop.mode = propBindingModes.ONE_TIME;\n      }\n    }\n    if (value !== null) {\n      // has dynamic binding!\n      prop.raw = value;\n      parsed = parseDirective(value);\n      value = parsed.expression;\n      prop.filters = parsed.filters;\n      // check binding type\n      if (isLiteral(value) && !parsed.filters) {\n        // for expressions containing literal numbers and\n        // booleans, there's no need to setup a prop binding,\n        // so we can optimize them as a one-time set.\n        prop.optimizedLiteral = true;\n      } else {\n        prop.dynamic = true;\n        // check non-settable path for two-way bindings\n        if (process.env.NODE_ENV !== 'production' && prop.mode === propBindingModes.TWO_WAY && !settablePathRE.test(value)) {\n          prop.mode = propBindingModes.ONE_WAY;\n          warn('Cannot bind two-way prop with non-settable ' + 'parent path: ' + value, vm);\n        }\n      }\n      prop.parentPath = value;\n\n      // warn required two-way\n      if (process.env.NODE_ENV !== 'production' && options.twoWay && prop.mode !== propBindingModes.TWO_WAY) {\n        warn('Prop \"' + name + '\" expects a two-way binding type.', vm);\n      }\n    } else if ((value = getAttr(el, attr)) !== null) {\n      // has literal binding!\n      prop.raw = value;\n    } else if (propsData && (value = propsData[name] || propsData[path]) !== null) {\n      // has propsData\n      prop.raw = value;\n    } else if (process.env.NODE_ENV !== 'production') {\n      // check possible camelCase prop usage\n      var lowerCaseName = path.toLowerCase();\n      value = /[A-Z\\-]/.test(name) && (el.getAttribute(lowerCaseName) || el.getAttribute(':' + lowerCaseName) || el.getAttribute('v-bind:' + lowerCaseName) || el.getAttribute(':' + lowerCaseName + '.once') || el.getAttribute('v-bind:' + lowerCaseName + '.once') || el.getAttribute(':' + lowerCaseName + '.sync') || el.getAttribute('v-bind:' + lowerCaseName + '.sync'));\n      if (value) {\n        warn('Possible usage error for prop `' + lowerCaseName + '` - ' + 'did you mean `' + attr + '`? HTML is case-insensitive, remember to use ' + 'kebab-case for props in templates.', vm);\n      } else if (options.required && (!propsData || !(name in propsData) && !(path in propsData))) {\n        // warn missing required\n        warn('Missing required prop: ' + name, vm);\n      }\n    }\n    // push prop\n    props.push(prop);\n  }\n  return makePropsLinkFn(props);\n}\n\n/**\n * Build a function that applies props to a vm.\n *\n * @param {Array} props\n * @return {Function} propsLinkFn\n */\n\nfunction makePropsLinkFn(props) {\n  return function propsLinkFn(vm, scope) {\n    // store resolved props info\n    vm._props = {};\n    var inlineProps = vm.$options.propsData;\n    var i = props.length;\n    var prop, path, options, value, raw;\n    while (i--) {\n      prop = props[i];\n      raw = prop.raw;\n      path = prop.path;\n      options = prop.options;\n      vm._props[path] = prop;\n      if (inlineProps && hasOwn(inlineProps, path)) {\n        initProp(vm, prop, inlineProps[path]);\n      }if (raw === null) {\n        // initialize absent prop\n        initProp(vm, prop, undefined);\n      } else if (prop.dynamic) {\n        // dynamic prop\n        if (prop.mode === propBindingModes.ONE_TIME) {\n          // one time binding\n          value = (scope || vm._context || vm).$get(prop.parentPath);\n          initProp(vm, prop, value);\n        } else {\n          if (vm._context) {\n            // dynamic binding\n            vm._bindDir({\n              name: 'prop',\n              def: propDef,\n              prop: prop\n            }, null, null, scope); // el, host, scope\n          } else {\n              // root instance\n              initProp(vm, prop, vm.$get(prop.parentPath));\n            }\n        }\n      } else if (prop.optimizedLiteral) {\n        // optimized literal, cast it and just set once\n        var stripped = stripQuotes(raw);\n        value = stripped === raw ? toBoolean(toNumber(raw)) : stripped;\n        initProp(vm, prop, value);\n      } else {\n        // string literal, but we need to cater for\n        // Boolean props with no value, or with same\n        // literal value (e.g. disabled=\"disabled\")\n        // see https://github.com/vuejs/vue-loader/issues/182\n        value = options.type === Boolean && (raw === '' || raw === hyphenate(prop.name)) ? true : raw;\n        initProp(vm, prop, value);\n      }\n    }\n  };\n}\n\n/**\n * Process a prop with a rawValue, applying necessary coersions,\n * default values & assertions and call the given callback with\n * processed value.\n *\n * @param {Vue} vm\n * @param {Object} prop\n * @param {*} rawValue\n * @param {Function} fn\n */\n\nfunction processPropValue(vm, prop, rawValue, fn) {\n  var isSimple = prop.dynamic && isSimplePath(prop.parentPath);\n  var value = rawValue;\n  if (value === undefined) {\n    value = getPropDefaultValue(vm, prop);\n  }\n  value = coerceProp(prop, value, vm);\n  var coerced = value !== rawValue;\n  if (!assertProp(prop, value, vm)) {\n    value = undefined;\n  }\n  if (isSimple && !coerced) {\n    withoutConversion(function () {\n      fn(value);\n    });\n  } else {\n    fn(value);\n  }\n}\n\n/**\n * Set a prop's initial value on a vm and its data object.\n *\n * @param {Vue} vm\n * @param {Object} prop\n * @param {*} value\n */\n\nfunction initProp(vm, prop, value) {\n  processPropValue(vm, prop, value, function (value) {\n    defineReactive(vm, prop.path, value);\n  });\n}\n\n/**\n * Update a prop's value on a vm.\n *\n * @param {Vue} vm\n * @param {Object} prop\n * @param {*} value\n */\n\nfunction updateProp(vm, prop, value) {\n  processPropValue(vm, prop, value, function (value) {\n    vm[prop.path] = value;\n  });\n}\n\n/**\n * Get the default value of a prop.\n *\n * @param {Vue} vm\n * @param {Object} prop\n * @return {*}\n */\n\nfunction getPropDefaultValue(vm, prop) {\n  // no default, return undefined\n  var options = prop.options;\n  if (!hasOwn(options, 'default')) {\n    // absent boolean value defaults to false\n    return options.type === Boolean ? false : undefined;\n  }\n  var def = options['default'];\n  // warn against non-factory defaults for Object & Array\n  if (isObject(def)) {\n    process.env.NODE_ENV !== 'production' && warn('Invalid default value for prop \"' + prop.name + '\": ' + 'Props with type Object/Array must use a factory function ' + 'to return the default value.', vm);\n  }\n  // call factory function for non-Function types\n  return typeof def === 'function' && options.type !== Function ? def.call(vm) : def;\n}\n\n/**\n * Assert whether a prop is valid.\n *\n * @param {Object} prop\n * @param {*} value\n * @param {Vue} vm\n */\n\nfunction assertProp(prop, value, vm) {\n  if (!prop.options.required && ( // non-required\n  prop.raw === null || // abscent\n  value == null) // null or undefined\n  ) {\n      return true;\n    }\n  var options = prop.options;\n  var type = options.type;\n  var valid = !type;\n  var expectedTypes = [];\n  if (type) {\n    if (!isArray(type)) {\n      type = [type];\n    }\n    for (var i = 0; i < type.length && !valid; i++) {\n      var assertedType = assertType(value, type[i]);\n      expectedTypes.push(assertedType.expectedType);\n      valid = assertedType.valid;\n    }\n  }\n  if (!valid) {\n    if (process.env.NODE_ENV !== 'production') {\n      warn('Invalid prop: type check failed for prop \"' + prop.name + '\".' + ' Expected ' + expectedTypes.map(formatType).join(', ') + ', got ' + formatValue(value) + '.', vm);\n    }\n    return false;\n  }\n  var validator = options.validator;\n  if (validator) {\n    if (!validator(value)) {\n      process.env.NODE_ENV !== 'production' && warn('Invalid prop: custom validator check failed for prop \"' + prop.name + '\".', vm);\n      return false;\n    }\n  }\n  return true;\n}\n\n/**\n * Force parsing value with coerce option.\n *\n * @param {*} value\n * @param {Object} options\n * @return {*}\n */\n\nfunction coerceProp(prop, value, vm) {\n  var coerce = prop.options.coerce;\n  if (!coerce) {\n    return value;\n  }\n  if (typeof coerce === 'function') {\n    return coerce(value);\n  } else {\n    process.env.NODE_ENV !== 'production' && warn('Invalid coerce for prop \"' + prop.name + '\": expected function, got ' + typeof coerce + '.', vm);\n    return value;\n  }\n}\n\n/**\n * Assert the type of a value\n *\n * @param {*} value\n * @param {Function} type\n * @return {Object}\n */\n\nfunction assertType(value, type) {\n  var valid;\n  var expectedType;\n  if (type === String) {\n    expectedType = 'string';\n    valid = typeof value === expectedType;\n  } else if (type === Number) {\n    expectedType = 'number';\n    valid = typeof value === expectedType;\n  } else if (type === Boolean) {\n    expectedType = 'boolean';\n    valid = typeof value === expectedType;\n  } else if (type === Function) {\n    expectedType = 'function';\n    valid = typeof value === expectedType;\n  } else if (type === Object) {\n    expectedType = 'object';\n    valid = isPlainObject(value);\n  } else if (type === Array) {\n    expectedType = 'array';\n    valid = isArray(value);\n  } else {\n    valid = value instanceof type;\n  }\n  return {\n    valid: valid,\n    expectedType: expectedType\n  };\n}\n\n/**\n * Format type for output\n *\n * @param {String} type\n * @return {String}\n */\n\nfunction formatType(type) {\n  return type ? type.charAt(0).toUpperCase() + type.slice(1) : 'custom type';\n}\n\n/**\n * Format value\n *\n * @param {*} value\n * @return {String}\n */\n\nfunction formatValue(val) {\n  return Object.prototype.toString.call(val).slice(8, -1);\n}\n\nvar bindingModes = config._propBindingModes;\n\nvar propDef = {\n\n  bind: function bind() {\n    var child = this.vm;\n    var parent = child._context;\n    // passed in from compiler directly\n    var prop = this.descriptor.prop;\n    var childKey = prop.path;\n    var parentKey = prop.parentPath;\n    var twoWay = prop.mode === bindingModes.TWO_WAY;\n\n    var parentWatcher = this.parentWatcher = new Watcher(parent, parentKey, function (val) {\n      updateProp(child, prop, val);\n    }, {\n      twoWay: twoWay,\n      filters: prop.filters,\n      // important: props need to be observed on the\n      // v-for scope if present\n      scope: this._scope\n    });\n\n    // set the child initial value.\n    initProp(child, prop, parentWatcher.value);\n\n    // setup two-way binding\n    if (twoWay) {\n      // important: defer the child watcher creation until\n      // the created hook (after data observation)\n      var self = this;\n      child.$once('pre-hook:created', function () {\n        self.childWatcher = new Watcher(child, childKey, function (val) {\n          parentWatcher.set(val);\n        }, {\n          // ensure sync upward before parent sync down.\n          // this is necessary in cases e.g. the child\n          // mutates a prop array, then replaces it. (#1683)\n          sync: true\n        });\n      });\n    }\n  },\n\n  unbind: function unbind() {\n    this.parentWatcher.teardown();\n    if (this.childWatcher) {\n      this.childWatcher.teardown();\n    }\n  }\n};\n\nvar queue$1 = [];\nvar queued = false;\n\n/**\n * Push a job into the queue.\n *\n * @param {Function} job\n */\n\nfunction pushJob(job) {\n  queue$1.push(job);\n  if (!queued) {\n    queued = true;\n    nextTick(flush);\n  }\n}\n\n/**\n * Flush the queue, and do one forced reflow before\n * triggering transitions.\n */\n\nfunction flush() {\n  // Force layout\n  var f = document.documentElement.offsetHeight;\n  for (var i = 0; i < queue$1.length; i++) {\n    queue$1[i]();\n  }\n  queue$1 = [];\n  queued = false;\n  // dummy return, so js linters don't complain about\n  // unused variable f\n  return f;\n}\n\nvar TYPE_TRANSITION = 'transition';\nvar TYPE_ANIMATION = 'animation';\nvar transDurationProp = transitionProp + 'Duration';\nvar animDurationProp = animationProp + 'Duration';\n\n/**\n * If a just-entered element is applied the\n * leave class while its enter transition hasn't started yet,\n * and the transitioned property has the same value for both\n * enter/leave, then the leave transition will be skipped and\n * the transitionend event never fires. This function ensures\n * its callback to be called after a transition has started\n * by waiting for double raf.\n *\n * It falls back to setTimeout on devices that support CSS\n * transitions but not raf (e.g. Android 4.2 browser) - since\n * these environments are usually slow, we are giving it a\n * relatively large timeout.\n */\n\nvar raf = inBrowser && window.requestAnimationFrame;\nvar waitForTransitionStart = raf\n/* istanbul ignore next */\n? function (fn) {\n  raf(function () {\n    raf(fn);\n  });\n} : function (fn) {\n  setTimeout(fn, 50);\n};\n\n/**\n * A Transition object that encapsulates the state and logic\n * of the transition.\n *\n * @param {Element} el\n * @param {String} id\n * @param {Object} hooks\n * @param {Vue} vm\n */\nfunction Transition(el, id, hooks, vm) {\n  this.id = id;\n  this.el = el;\n  this.enterClass = hooks && hooks.enterClass || id + '-enter';\n  this.leaveClass = hooks && hooks.leaveClass || id + '-leave';\n  this.hooks = hooks;\n  this.vm = vm;\n  // async state\n  this.pendingCssEvent = this.pendingCssCb = this.cancel = this.pendingJsCb = this.op = this.cb = null;\n  this.justEntered = false;\n  this.entered = this.left = false;\n  this.typeCache = {};\n  // check css transition type\n  this.type = hooks && hooks.type;\n  /* istanbul ignore if */\n  if (process.env.NODE_ENV !== 'production') {\n    if (this.type && this.type !== TYPE_TRANSITION && this.type !== TYPE_ANIMATION) {\n      warn('invalid CSS transition type for transition=\"' + this.id + '\": ' + this.type, vm);\n    }\n  }\n  // bind\n  var self = this;['enterNextTick', 'enterDone', 'leaveNextTick', 'leaveDone'].forEach(function (m) {\n    self[m] = bind(self[m], self);\n  });\n}\n\nvar p$1 = Transition.prototype;\n\n/**\n * Start an entering transition.\n *\n * 1. enter transition triggered\n * 2. call beforeEnter hook\n * 3. add enter class\n * 4. insert/show element\n * 5. call enter hook (with possible explicit js callback)\n * 6. reflow\n * 7. based on transition type:\n *    - transition:\n *        remove class now, wait for transitionend,\n *        then done if there's no explicit js callback.\n *    - animation:\n *        wait for animationend, remove class,\n *        then done if there's no explicit js callback.\n *    - no css transition:\n *        done now if there's no explicit js callback.\n * 8. wait for either done or js callback, then call\n *    afterEnter hook.\n *\n * @param {Function} op - insert/show the element\n * @param {Function} [cb]\n */\n\np$1.enter = function (op, cb) {\n  this.cancelPending();\n  this.callHook('beforeEnter');\n  this.cb = cb;\n  addClass(this.el, this.enterClass);\n  op();\n  this.entered = false;\n  this.callHookWithCb('enter');\n  if (this.entered) {\n    return; // user called done synchronously.\n  }\n  this.cancel = this.hooks && this.hooks.enterCancelled;\n  pushJob(this.enterNextTick);\n};\n\n/**\n * The \"nextTick\" phase of an entering transition, which is\n * to be pushed into a queue and executed after a reflow so\n * that removing the class can trigger a CSS transition.\n */\n\np$1.enterNextTick = function () {\n  var _this = this;\n\n  // prevent transition skipping\n  this.justEntered = true;\n  waitForTransitionStart(function () {\n    _this.justEntered = false;\n  });\n  var enterDone = this.enterDone;\n  var type = this.getCssTransitionType(this.enterClass);\n  if (!this.pendingJsCb) {\n    if (type === TYPE_TRANSITION) {\n      // trigger transition by removing enter class now\n      removeClass(this.el, this.enterClass);\n      this.setupCssCb(transitionEndEvent, enterDone);\n    } else if (type === TYPE_ANIMATION) {\n      this.setupCssCb(animationEndEvent, enterDone);\n    } else {\n      enterDone();\n    }\n  } else if (type === TYPE_TRANSITION) {\n    removeClass(this.el, this.enterClass);\n  }\n};\n\n/**\n * The \"cleanup\" phase of an entering transition.\n */\n\np$1.enterDone = function () {\n  this.entered = true;\n  this.cancel = this.pendingJsCb = null;\n  removeClass(this.el, this.enterClass);\n  this.callHook('afterEnter');\n  if (this.cb) this.cb();\n};\n\n/**\n * Start a leaving transition.\n *\n * 1. leave transition triggered.\n * 2. call beforeLeave hook\n * 3. add leave class (trigger css transition)\n * 4. call leave hook (with possible explicit js callback)\n * 5. reflow if no explicit js callback is provided\n * 6. based on transition type:\n *    - transition or animation:\n *        wait for end event, remove class, then done if\n *        there's no explicit js callback.\n *    - no css transition:\n *        done if there's no explicit js callback.\n * 7. wait for either done or js callback, then call\n *    afterLeave hook.\n *\n * @param {Function} op - remove/hide the element\n * @param {Function} [cb]\n */\n\np$1.leave = function (op, cb) {\n  this.cancelPending();\n  this.callHook('beforeLeave');\n  this.op = op;\n  this.cb = cb;\n  addClass(this.el, this.leaveClass);\n  this.left = false;\n  this.callHookWithCb('leave');\n  if (this.left) {\n    return; // user called done synchronously.\n  }\n  this.cancel = this.hooks && this.hooks.leaveCancelled;\n  // only need to handle leaveDone if\n  // 1. the transition is already done (synchronously called\n  //    by the user, which causes this.op set to null)\n  // 2. there's no explicit js callback\n  if (this.op && !this.pendingJsCb) {\n    // if a CSS transition leaves immediately after enter,\n    // the transitionend event never fires. therefore we\n    // detect such cases and end the leave immediately.\n    if (this.justEntered) {\n      this.leaveDone();\n    } else {\n      pushJob(this.leaveNextTick);\n    }\n  }\n};\n\n/**\n * The \"nextTick\" phase of a leaving transition.\n */\n\np$1.leaveNextTick = function () {\n  var type = this.getCssTransitionType(this.leaveClass);\n  if (type) {\n    var event = type === TYPE_TRANSITION ? transitionEndEvent : animationEndEvent;\n    this.setupCssCb(event, this.leaveDone);\n  } else {\n    this.leaveDone();\n  }\n};\n\n/**\n * The \"cleanup\" phase of a leaving transition.\n */\n\np$1.leaveDone = function () {\n  this.left = true;\n  this.cancel = this.pendingJsCb = null;\n  this.op();\n  removeClass(this.el, this.leaveClass);\n  this.callHook('afterLeave');\n  if (this.cb) this.cb();\n  this.op = null;\n};\n\n/**\n * Cancel any pending callbacks from a previously running\n * but not finished transition.\n */\n\np$1.cancelPending = function () {\n  this.op = this.cb = null;\n  var hasPending = false;\n  if (this.pendingCssCb) {\n    hasPending = true;\n    off(this.el, this.pendingCssEvent, this.pendingCssCb);\n    this.pendingCssEvent = this.pendingCssCb = null;\n  }\n  if (this.pendingJsCb) {\n    hasPending = true;\n    this.pendingJsCb.cancel();\n    this.pendingJsCb = null;\n  }\n  if (hasPending) {\n    removeClass(this.el, this.enterClass);\n    removeClass(this.el, this.leaveClass);\n  }\n  if (this.cancel) {\n    this.cancel.call(this.vm, this.el);\n    this.cancel = null;\n  }\n};\n\n/**\n * Call a user-provided synchronous hook function.\n *\n * @param {String} type\n */\n\np$1.callHook = function (type) {\n  if (this.hooks && this.hooks[type]) {\n    this.hooks[type].call(this.vm, this.el);\n  }\n};\n\n/**\n * Call a user-provided, potentially-async hook function.\n * We check for the length of arguments to see if the hook\n * expects a `done` callback. If true, the transition's end\n * will be determined by when the user calls that callback;\n * otherwise, the end is determined by the CSS transition or\n * animation.\n *\n * @param {String} type\n */\n\np$1.callHookWithCb = function (type) {\n  var hook = this.hooks && this.hooks[type];\n  if (hook) {\n    if (hook.length > 1) {\n      this.pendingJsCb = cancellable(this[type + 'Done']);\n    }\n    hook.call(this.vm, this.el, this.pendingJsCb);\n  }\n};\n\n/**\n * Get an element's transition type based on the\n * calculated styles.\n *\n * @param {String} className\n * @return {Number}\n */\n\np$1.getCssTransitionType = function (className) {\n  /* istanbul ignore if */\n  if (!transitionEndEvent ||\n  // skip CSS transitions if page is not visible -\n  // this solves the issue of transitionend events not\n  // firing until the page is visible again.\n  // pageVisibility API is supported in IE10+, same as\n  // CSS transitions.\n  document.hidden ||\n  // explicit js-only transition\n  this.hooks && this.hooks.css === false ||\n  // element is hidden\n  isHidden(this.el)) {\n    return;\n  }\n  var type = this.type || this.typeCache[className];\n  if (type) return type;\n  var inlineStyles = this.el.style;\n  var computedStyles = window.getComputedStyle(this.el);\n  var transDuration = inlineStyles[transDurationProp] || computedStyles[transDurationProp];\n  if (transDuration && transDuration !== '0s') {\n    type = TYPE_TRANSITION;\n  } else {\n    var animDuration = inlineStyles[animDurationProp] || computedStyles[animDurationProp];\n    if (animDuration && animDuration !== '0s') {\n      type = TYPE_ANIMATION;\n    }\n  }\n  if (type) {\n    this.typeCache[className] = type;\n  }\n  return type;\n};\n\n/**\n * Setup a CSS transitionend/animationend callback.\n *\n * @param {String} event\n * @param {Function} cb\n */\n\np$1.setupCssCb = function (event, cb) {\n  this.pendingCssEvent = event;\n  var self = this;\n  var el = this.el;\n  var onEnd = this.pendingCssCb = function (e) {\n    if (e.target === el) {\n      off(el, event, onEnd);\n      self.pendingCssEvent = self.pendingCssCb = null;\n      if (!self.pendingJsCb && cb) {\n        cb();\n      }\n    }\n  };\n  on(el, event, onEnd);\n};\n\n/**\n * Check if an element is hidden - in that case we can just\n * skip the transition alltogether.\n *\n * @param {Element} el\n * @return {Boolean}\n */\n\nfunction isHidden(el) {\n  if (/svg$/.test(el.namespaceURI)) {\n    // SVG elements do not have offset(Width|Height)\n    // so we need to check the client rect\n    var rect = el.getBoundingClientRect();\n    return !(rect.width || rect.height);\n  } else {\n    return !(el.offsetWidth || el.offsetHeight || el.getClientRects().length);\n  }\n}\n\nvar transition$1 = {\n\n  priority: TRANSITION,\n\n  update: function update(id, oldId) {\n    var el = this.el;\n    // resolve on owner vm\n    var hooks = resolveAsset(this.vm.$options, 'transitions', id);\n    id = id || 'v';\n    oldId = oldId || 'v';\n    el.__v_trans = new Transition(el, id, hooks, this.vm);\n    removeClass(el, oldId + '-transition');\n    addClass(el, id + '-transition');\n  }\n};\n\nvar internalDirectives = {\n  style: style,\n  'class': vClass,\n  component: component,\n  prop: propDef,\n  transition: transition$1\n};\n\n// special binding prefixes\nvar bindRE = /^v-bind:|^:/;\nvar onRE = /^v-on:|^@/;\nvar dirAttrRE = /^v-([^:]+)(?:$|:(.*)$)/;\nvar modifierRE = /\\.[^\\.]+/g;\nvar transitionRE = /^(v-bind:|:)?transition$/;\n\n// default directive priority\nvar DEFAULT_PRIORITY = 1000;\nvar DEFAULT_TERMINAL_PRIORITY = 2000;\n\n/**\n * Compile a template and return a reusable composite link\n * function, which recursively contains more link functions\n * inside. This top level compile function would normally\n * be called on instance root nodes, but can also be used\n * for partial compilation if the partial argument is true.\n *\n * The returned composite link function, when called, will\n * return an unlink function that tearsdown all directives\n * created during the linking phase.\n *\n * @param {Element|DocumentFragment} el\n * @param {Object} options\n * @param {Boolean} partial\n * @return {Function}\n */\n\nfunction compile(el, options, partial) {\n  // link function for the node itself.\n  var nodeLinkFn = partial || !options._asComponent ? compileNode(el, options) : null;\n  // link function for the childNodes\n  var childLinkFn = !(nodeLinkFn && nodeLinkFn.terminal) && !isScript(el) && el.hasChildNodes() ? compileNodeList(el.childNodes, options) : null;\n\n  /**\n   * A composite linker function to be called on a already\n   * compiled piece of DOM, which instantiates all directive\n   * instances.\n   *\n   * @param {Vue} vm\n   * @param {Element|DocumentFragment} el\n   * @param {Vue} [host] - host vm of transcluded content\n   * @param {Object} [scope] - v-for scope\n   * @param {Fragment} [frag] - link context fragment\n   * @return {Function|undefined}\n   */\n\n  return function compositeLinkFn(vm, el, host, scope, frag) {\n    // cache childNodes before linking parent, fix #657\n    var childNodes = toArray(el.childNodes);\n    // link\n    var dirs = linkAndCapture(function compositeLinkCapturer() {\n      if (nodeLinkFn) nodeLinkFn(vm, el, host, scope, frag);\n      if (childLinkFn) childLinkFn(vm, childNodes, host, scope, frag);\n    }, vm);\n    return makeUnlinkFn(vm, dirs);\n  };\n}\n\n/**\n * Apply a linker to a vm/element pair and capture the\n * directives created during the process.\n *\n * @param {Function} linker\n * @param {Vue} vm\n */\n\nfunction linkAndCapture(linker, vm) {\n  /* istanbul ignore if */\n  if (process.env.NODE_ENV === 'production') {\n    // reset directives before every capture in production\n    // mode, so that when unlinking we don't need to splice\n    // them out (which turns out to be a perf hit).\n    // they are kept in development mode because they are\n    // useful for Vue's own tests.\n    vm._directives = [];\n  }\n  var originalDirCount = vm._directives.length;\n  linker();\n  var dirs = vm._directives.slice(originalDirCount);\n  sortDirectives(dirs);\n  for (var i = 0, l = dirs.length; i < l; i++) {\n    dirs[i]._bind();\n  }\n  return dirs;\n}\n\n/**\n * sort directives by priority (stable sort)\n *\n * @param {Array} dirs\n */\nfunction sortDirectives(dirs) {\n  if (dirs.length === 0) return;\n\n  var groupedMap = {};\n  var i, j, k, l;\n  var index = 0;\n  var priorities = [];\n  for (i = 0, j = dirs.length; i < j; i++) {\n    var dir = dirs[i];\n    var priority = dir.descriptor.def.priority || DEFAULT_PRIORITY;\n    var array = groupedMap[priority];\n    if (!array) {\n      array = groupedMap[priority] = [];\n      priorities.push(priority);\n    }\n    array.push(dir);\n  }\n\n  priorities.sort(function (a, b) {\n    return a > b ? -1 : a === b ? 0 : 1;\n  });\n  for (i = 0, j = priorities.length; i < j; i++) {\n    var group = groupedMap[priorities[i]];\n    for (k = 0, l = group.length; k < l; k++) {\n      dirs[index++] = group[k];\n    }\n  }\n}\n\n/**\n * Linker functions return an unlink function that\n * tearsdown all directives instances generated during\n * the process.\n *\n * We create unlink functions with only the necessary\n * information to avoid retaining additional closures.\n *\n * @param {Vue} vm\n * @param {Array} dirs\n * @param {Vue} [context]\n * @param {Array} [contextDirs]\n * @return {Function}\n */\n\nfunction makeUnlinkFn(vm, dirs, context, contextDirs) {\n  function unlink(destroying) {\n    teardownDirs(vm, dirs, destroying);\n    if (context && contextDirs) {\n      teardownDirs(context, contextDirs);\n    }\n  }\n  // expose linked directives\n  unlink.dirs = dirs;\n  return unlink;\n}\n\n/**\n * Teardown partial linked directives.\n *\n * @param {Vue} vm\n * @param {Array} dirs\n * @param {Boolean} destroying\n */\n\nfunction teardownDirs(vm, dirs, destroying) {\n  var i = dirs.length;\n  while (i--) {\n    dirs[i]._teardown();\n    if (process.env.NODE_ENV !== 'production' && !destroying) {\n      vm._directives.$remove(dirs[i]);\n    }\n  }\n}\n\n/**\n * Compile link props on an instance.\n *\n * @param {Vue} vm\n * @param {Element} el\n * @param {Object} props\n * @param {Object} [scope]\n * @return {Function}\n */\n\nfunction compileAndLinkProps(vm, el, props, scope) {\n  var propsLinkFn = compileProps(el, props, vm);\n  var propDirs = linkAndCapture(function () {\n    propsLinkFn(vm, scope);\n  }, vm);\n  return makeUnlinkFn(vm, propDirs);\n}\n\n/**\n * Compile the root element of an instance.\n *\n * 1. attrs on context container (context scope)\n * 2. attrs on the component template root node, if\n *    replace:true (child scope)\n *\n * If this is a fragment instance, we only need to compile 1.\n *\n * @param {Element} el\n * @param {Object} options\n * @param {Object} contextOptions\n * @return {Function}\n */\n\nfunction compileRoot(el, options, contextOptions) {\n  var containerAttrs = options._containerAttrs;\n  var replacerAttrs = options._replacerAttrs;\n  var contextLinkFn, replacerLinkFn;\n\n  // only need to compile other attributes for\n  // non-fragment instances\n  if (el.nodeType !== 11) {\n    // for components, container and replacer need to be\n    // compiled separately and linked in different scopes.\n    if (options._asComponent) {\n      // 2. container attributes\n      if (containerAttrs && contextOptions) {\n        contextLinkFn = compileDirectives(containerAttrs, contextOptions);\n      }\n      if (replacerAttrs) {\n        // 3. replacer attributes\n        replacerLinkFn = compileDirectives(replacerAttrs, options);\n      }\n    } else {\n      // non-component, just compile as a normal element.\n      replacerLinkFn = compileDirectives(el.attributes, options);\n    }\n  } else if (process.env.NODE_ENV !== 'production' && containerAttrs) {\n    // warn container directives for fragment instances\n    var names = containerAttrs.filter(function (attr) {\n      // allow vue-loader/vueify scoped css attributes\n      return attr.name.indexOf('_v-') < 0 &&\n      // allow event listeners\n      !onRE.test(attr.name) &&\n      // allow slots\n      attr.name !== 'slot';\n    }).map(function (attr) {\n      return '\"' + attr.name + '\"';\n    });\n    if (names.length) {\n      var plural = names.length > 1;\n\n      var componentName = options.el.tagName.toLowerCase();\n      if (componentName === 'component' && options.name) {\n        componentName += ':' + options.name;\n      }\n\n      warn('Attribute' + (plural ? 's ' : ' ') + names.join(', ') + (plural ? ' are' : ' is') + ' ignored on component ' + '<' + componentName + '> because ' + 'the component is a fragment instance: ' + 'http://vuejs.org/guide/components.html#Fragment-Instance');\n    }\n  }\n\n  options._containerAttrs = options._replacerAttrs = null;\n  return function rootLinkFn(vm, el, scope) {\n    // link context scope dirs\n    var context = vm._context;\n    var contextDirs;\n    if (context && contextLinkFn) {\n      contextDirs = linkAndCapture(function () {\n        contextLinkFn(context, el, null, scope);\n      }, context);\n    }\n\n    // link self\n    var selfDirs = linkAndCapture(function () {\n      if (replacerLinkFn) replacerLinkFn(vm, el);\n    }, vm);\n\n    // return the unlink function that tearsdown context\n    // container directives.\n    return makeUnlinkFn(vm, selfDirs, context, contextDirs);\n  };\n}\n\n/**\n * Compile a node and return a nodeLinkFn based on the\n * node type.\n *\n * @param {Node} node\n * @param {Object} options\n * @return {Function|null}\n */\n\nfunction compileNode(node, options) {\n  var type = node.nodeType;\n  if (type === 1 && !isScript(node)) {\n    return compileElement(node, options);\n  } else if (type === 3 && node.data.trim()) {\n    return compileTextNode(node, options);\n  } else {\n    return null;\n  }\n}\n\n/**\n * Compile an element and return a nodeLinkFn.\n *\n * @param {Element} el\n * @param {Object} options\n * @return {Function|null}\n */\n\nfunction compileElement(el, options) {\n  // preprocess textareas.\n  // textarea treats its text content as the initial value.\n  // just bind it as an attr directive for value.\n  if (el.tagName === 'TEXTAREA') {\n    // a textarea which has v-pre attr should skip complie.\n    if (getAttr(el, 'v-pre') !== null) {\n      return skip;\n    }\n    var tokens = parseText(el.value);\n    if (tokens) {\n      el.setAttribute(':value', tokensToExp(tokens));\n      el.value = '';\n    }\n  }\n  var linkFn;\n  var hasAttrs = el.hasAttributes();\n  var attrs = hasAttrs && toArray(el.attributes);\n  // check terminal directives (for & if)\n  if (hasAttrs) {\n    linkFn = checkTerminalDirectives(el, attrs, options);\n  }\n  // check element directives\n  if (!linkFn) {\n    linkFn = checkElementDirectives(el, options);\n  }\n  // check component\n  if (!linkFn) {\n    linkFn = checkComponent(el, options);\n  }\n  // normal directives\n  if (!linkFn && hasAttrs) {\n    linkFn = compileDirectives(attrs, options);\n  }\n  return linkFn;\n}\n\n/**\n * Compile a textNode and return a nodeLinkFn.\n *\n * @param {TextNode} node\n * @param {Object} options\n * @return {Function|null} textNodeLinkFn\n */\n\nfunction compileTextNode(node, options) {\n  // skip marked text nodes\n  if (node._skip) {\n    return removeText;\n  }\n\n  var tokens = parseText(node.wholeText);\n  if (!tokens) {\n    return null;\n  }\n\n  // mark adjacent text nodes as skipped,\n  // because we are using node.wholeText to compile\n  // all adjacent text nodes together. This fixes\n  // issues in IE where sometimes it splits up a single\n  // text node into multiple ones.\n  var next = node.nextSibling;\n  while (next && next.nodeType === 3) {\n    next._skip = true;\n    next = next.nextSibling;\n  }\n\n  var frag = document.createDocumentFragment();\n  var el, token;\n  for (var i = 0, l = tokens.length; i < l; i++) {\n    token = tokens[i];\n    el = token.tag ? processTextToken(token, options) : document.createTextNode(token.value);\n    frag.appendChild(el);\n  }\n  return makeTextNodeLinkFn(tokens, frag, options);\n}\n\n/**\n * Linker for an skipped text node.\n *\n * @param {Vue} vm\n * @param {Text} node\n */\n\nfunction removeText(vm, node) {\n  remove(node);\n}\n\n/**\n * Process a single text token.\n *\n * @param {Object} token\n * @param {Object} options\n * @return {Node}\n */\n\nfunction processTextToken(token, options) {\n  var el;\n  if (token.oneTime) {\n    el = document.createTextNode(token.value);\n  } else {\n    if (token.html) {\n      el = document.createComment('v-html');\n      setTokenType('html');\n    } else {\n      // IE will clean up empty textNodes during\n      // frag.cloneNode(true), so we have to give it\n      // something here...\n      el = document.createTextNode(' ');\n      setTokenType('text');\n    }\n  }\n  function setTokenType(type) {\n    if (token.descriptor) return;\n    var parsed = parseDirective(token.value);\n    token.descriptor = {\n      name: type,\n      def: directives[type],\n      expression: parsed.expression,\n      filters: parsed.filters\n    };\n  }\n  return el;\n}\n\n/**\n * Build a function that processes a textNode.\n *\n * @param {Array<Object>} tokens\n * @param {DocumentFragment} frag\n */\n\nfunction makeTextNodeLinkFn(tokens, frag) {\n  return function textNodeLinkFn(vm, el, host, scope) {\n    var fragClone = frag.cloneNode(true);\n    var childNodes = toArray(fragClone.childNodes);\n    var token, value, node;\n    for (var i = 0, l = tokens.length; i < l; i++) {\n      token = tokens[i];\n      value = token.value;\n      if (token.tag) {\n        node = childNodes[i];\n        if (token.oneTime) {\n          value = (scope || vm).$eval(value);\n          if (token.html) {\n            replace(node, parseTemplate(value, true));\n          } else {\n            node.data = _toString(value);\n          }\n        } else {\n          vm._bindDir(token.descriptor, node, host, scope);\n        }\n      }\n    }\n    replace(el, fragClone);\n  };\n}\n\n/**\n * Compile a node list and return a childLinkFn.\n *\n * @param {NodeList} nodeList\n * @param {Object} options\n * @return {Function|undefined}\n */\n\nfunction compileNodeList(nodeList, options) {\n  var linkFns = [];\n  var nodeLinkFn, childLinkFn, node;\n  for (var i = 0, l = nodeList.length; i < l; i++) {\n    node = nodeList[i];\n    nodeLinkFn = compileNode(node, options);\n    childLinkFn = !(nodeLinkFn && nodeLinkFn.terminal) && node.tagName !== 'SCRIPT' && node.hasChildNodes() ? compileNodeList(node.childNodes, options) : null;\n    linkFns.push(nodeLinkFn, childLinkFn);\n  }\n  return linkFns.length ? makeChildLinkFn(linkFns) : null;\n}\n\n/**\n * Make a child link function for a node's childNodes.\n *\n * @param {Array<Function>} linkFns\n * @return {Function} childLinkFn\n */\n\nfunction makeChildLinkFn(linkFns) {\n  return function childLinkFn(vm, nodes, host, scope, frag) {\n    var node, nodeLinkFn, childrenLinkFn;\n    for (var i = 0, n = 0, l = linkFns.length; i < l; n++) {\n      node = nodes[n];\n      nodeLinkFn = linkFns[i++];\n      childrenLinkFn = linkFns[i++];\n      // cache childNodes before linking parent, fix #657\n      var childNodes = toArray(node.childNodes);\n      if (nodeLinkFn) {\n        nodeLinkFn(vm, node, host, scope, frag);\n      }\n      if (childrenLinkFn) {\n        childrenLinkFn(vm, childNodes, host, scope, frag);\n      }\n    }\n  };\n}\n\n/**\n * Check for element directives (custom elements that should\n * be resovled as terminal directives).\n *\n * @param {Element} el\n * @param {Object} options\n */\n\nfunction checkElementDirectives(el, options) {\n  var tag = el.tagName.toLowerCase();\n  if (commonTagRE.test(tag)) {\n    return;\n  }\n  var def = resolveAsset(options, 'elementDirectives', tag);\n  if (def) {\n    return makeTerminalNodeLinkFn(el, tag, '', options, def);\n  }\n}\n\n/**\n * Check if an element is a component. If yes, return\n * a component link function.\n *\n * @param {Element} el\n * @param {Object} options\n * @return {Function|undefined}\n */\n\nfunction checkComponent(el, options) {\n  var component = checkComponentAttr(el, options);\n  if (component) {\n    var ref = findRef(el);\n    var descriptor = {\n      name: 'component',\n      ref: ref,\n      expression: component.id,\n      def: internalDirectives.component,\n      modifiers: {\n        literal: !component.dynamic\n      }\n    };\n    var componentLinkFn = function componentLinkFn(vm, el, host, scope, frag) {\n      if (ref) {\n        defineReactive((scope || vm).$refs, ref, null);\n      }\n      vm._bindDir(descriptor, el, host, scope, frag);\n    };\n    componentLinkFn.terminal = true;\n    return componentLinkFn;\n  }\n}\n\n/**\n * Check an element for terminal directives in fixed order.\n * If it finds one, return a terminal link function.\n *\n * @param {Element} el\n * @param {Array} attrs\n * @param {Object} options\n * @return {Function} terminalLinkFn\n */\n\nfunction checkTerminalDirectives(el, attrs, options) {\n  // skip v-pre\n  if (getAttr(el, 'v-pre') !== null) {\n    return skip;\n  }\n  // skip v-else block, but only if following v-if\n  if (el.hasAttribute('v-else')) {\n    var prev = el.previousElementSibling;\n    if (prev && prev.hasAttribute('v-if')) {\n      return skip;\n    }\n  }\n\n  var attr, name, value, modifiers, matched, dirName, rawName, arg, def, termDef;\n  for (var i = 0, j = attrs.length; i < j; i++) {\n    attr = attrs[i];\n    name = attr.name.replace(modifierRE, '');\n    if (matched = name.match(dirAttrRE)) {\n      def = resolveAsset(options, 'directives', matched[1]);\n      if (def && def.terminal) {\n        if (!termDef || (def.priority || DEFAULT_TERMINAL_PRIORITY) > termDef.priority) {\n          termDef = def;\n          rawName = attr.name;\n          modifiers = parseModifiers(attr.name);\n          value = attr.value;\n          dirName = matched[1];\n          arg = matched[2];\n        }\n      }\n    }\n  }\n\n  if (termDef) {\n    return makeTerminalNodeLinkFn(el, dirName, value, options, termDef, rawName, arg, modifiers);\n  }\n}\n\nfunction skip() {}\nskip.terminal = true;\n\n/**\n * Build a node link function for a terminal directive.\n * A terminal link function terminates the current\n * compilation recursion and handles compilation of the\n * subtree in the directive.\n *\n * @param {Element} el\n * @param {String} dirName\n * @param {String} value\n * @param {Object} options\n * @param {Object} def\n * @param {String} [rawName]\n * @param {String} [arg]\n * @param {Object} [modifiers]\n * @return {Function} terminalLinkFn\n */\n\nfunction makeTerminalNodeLinkFn(el, dirName, value, options, def, rawName, arg, modifiers) {\n  var parsed = parseDirective(value);\n  var descriptor = {\n    name: dirName,\n    arg: arg,\n    expression: parsed.expression,\n    filters: parsed.filters,\n    raw: value,\n    attr: rawName,\n    modifiers: modifiers,\n    def: def\n  };\n  // check ref for v-for, v-if and router-view\n  if (dirName === 'for' || dirName === 'router-view') {\n    descriptor.ref = findRef(el);\n  }\n  var fn = function terminalNodeLinkFn(vm, el, host, scope, frag) {\n    if (descriptor.ref) {\n      defineReactive((scope || vm).$refs, descriptor.ref, null);\n    }\n    vm._bindDir(descriptor, el, host, scope, frag);\n  };\n  fn.terminal = true;\n  return fn;\n}\n\n/**\n * Compile the directives on an element and return a linker.\n *\n * @param {Array|NamedNodeMap} attrs\n * @param {Object} options\n * @return {Function}\n */\n\nfunction compileDirectives(attrs, options) {\n  var i = attrs.length;\n  var dirs = [];\n  var attr, name, value, rawName, rawValue, dirName, arg, modifiers, dirDef, tokens, matched;\n  while (i--) {\n    attr = attrs[i];\n    name = rawName = attr.name;\n    value = rawValue = attr.value;\n    tokens = parseText(value);\n    // reset arg\n    arg = null;\n    // check modifiers\n    modifiers = parseModifiers(name);\n    name = name.replace(modifierRE, '');\n\n    // attribute interpolations\n    if (tokens) {\n      value = tokensToExp(tokens);\n      arg = name;\n      pushDir('bind', directives.bind, tokens);\n      // warn against mixing mustaches with v-bind\n      if (process.env.NODE_ENV !== 'production') {\n        if (name === 'class' && Array.prototype.some.call(attrs, function (attr) {\n          return attr.name === ':class' || attr.name === 'v-bind:class';\n        })) {\n          warn('class=\"' + rawValue + '\": Do not mix mustache interpolation ' + 'and v-bind for \"class\" on the same element. Use one or the other.', options);\n        }\n      }\n    } else\n\n      // special attribute: transition\n      if (transitionRE.test(name)) {\n        modifiers.literal = !bindRE.test(name);\n        pushDir('transition', internalDirectives.transition);\n      } else\n\n        // event handlers\n        if (onRE.test(name)) {\n          arg = name.replace(onRE, '');\n          pushDir('on', directives.on);\n        } else\n\n          // attribute bindings\n          if (bindRE.test(name)) {\n            dirName = name.replace(bindRE, '');\n            if (dirName === 'style' || dirName === 'class') {\n              pushDir(dirName, internalDirectives[dirName]);\n            } else {\n              arg = dirName;\n              pushDir('bind', directives.bind);\n            }\n          } else\n\n            // normal directives\n            if (matched = name.match(dirAttrRE)) {\n              dirName = matched[1];\n              arg = matched[2];\n\n              // skip v-else (when used with v-show)\n              if (dirName === 'else') {\n                continue;\n              }\n\n              dirDef = resolveAsset(options, 'directives', dirName, true);\n              if (dirDef) {\n                pushDir(dirName, dirDef);\n              }\n            }\n  }\n\n  /**\n   * Push a directive.\n   *\n   * @param {String} dirName\n   * @param {Object|Function} def\n   * @param {Array} [interpTokens]\n   */\n\n  function pushDir(dirName, def, interpTokens) {\n    var hasOneTimeToken = interpTokens && hasOneTime(interpTokens);\n    var parsed = !hasOneTimeToken && parseDirective(value);\n    dirs.push({\n      name: dirName,\n      attr: rawName,\n      raw: rawValue,\n      def: def,\n      arg: arg,\n      modifiers: modifiers,\n      // conversion from interpolation strings with one-time token\n      // to expression is differed until directive bind time so that we\n      // have access to the actual vm context for one-time bindings.\n      expression: parsed && parsed.expression,\n      filters: parsed && parsed.filters,\n      interp: interpTokens,\n      hasOneTime: hasOneTimeToken\n    });\n  }\n\n  if (dirs.length) {\n    return makeNodeLinkFn(dirs);\n  }\n}\n\n/**\n * Parse modifiers from directive attribute name.\n *\n * @param {String} name\n * @return {Object}\n */\n\nfunction parseModifiers(name) {\n  var res = Object.create(null);\n  var match = name.match(modifierRE);\n  if (match) {\n    var i = match.length;\n    while (i--) {\n      res[match[i].slice(1)] = true;\n    }\n  }\n  return res;\n}\n\n/**\n * Build a link function for all directives on a single node.\n *\n * @param {Array} directives\n * @return {Function} directivesLinkFn\n */\n\nfunction makeNodeLinkFn(directives) {\n  return function nodeLinkFn(vm, el, host, scope, frag) {\n    // reverse apply because it's sorted low to high\n    var i = directives.length;\n    while (i--) {\n      vm._bindDir(directives[i], el, host, scope, frag);\n    }\n  };\n}\n\n/**\n * Check if an interpolation string contains one-time tokens.\n *\n * @param {Array} tokens\n * @return {Boolean}\n */\n\nfunction hasOneTime(tokens) {\n  var i = tokens.length;\n  while (i--) {\n    if (tokens[i].oneTime) return true;\n  }\n}\n\nfunction isScript(el) {\n  return el.tagName === 'SCRIPT' && (!el.hasAttribute('type') || el.getAttribute('type') === 'text/javascript');\n}\n\nvar specialCharRE = /[^\\w\\-:\\.]/;\n\n/**\n * Process an element or a DocumentFragment based on a\n * instance option object. This allows us to transclude\n * a template node/fragment before the instance is created,\n * so the processed fragment can then be cloned and reused\n * in v-for.\n *\n * @param {Element} el\n * @param {Object} options\n * @return {Element|DocumentFragment}\n */\n\nfunction transclude(el, options) {\n  // extract container attributes to pass them down\n  // to compiler, because they need to be compiled in\n  // parent scope. we are mutating the options object here\n  // assuming the same object will be used for compile\n  // right after this.\n  if (options) {\n    options._containerAttrs = extractAttrs(el);\n  }\n  // for template tags, what we want is its content as\n  // a documentFragment (for fragment instances)\n  if (isTemplate(el)) {\n    el = parseTemplate(el);\n  }\n  if (options) {\n    if (options._asComponent && !options.template) {\n      options.template = '<slot></slot>';\n    }\n    if (options.template) {\n      options._content = extractContent(el);\n      el = transcludeTemplate(el, options);\n    }\n  }\n  if (isFragment(el)) {\n    // anchors for fragment instance\n    // passing in `persist: true` to avoid them being\n    // discarded by IE during template cloning\n    prepend(createAnchor('v-start', true), el);\n    el.appendChild(createAnchor('v-end', true));\n  }\n  return el;\n}\n\n/**\n * Process the template option.\n * If the replace option is true this will swap the $el.\n *\n * @param {Element} el\n * @param {Object} options\n * @return {Element|DocumentFragment}\n */\n\nfunction transcludeTemplate(el, options) {\n  var template = options.template;\n  var frag = parseTemplate(template, true);\n  if (frag) {\n    var replacer = frag.firstChild;\n    if (!replacer) {\n      return frag;\n    }\n    var tag = replacer.tagName && replacer.tagName.toLowerCase();\n    if (options.replace) {\n      /* istanbul ignore if */\n      if (el === document.body) {\n        process.env.NODE_ENV !== 'production' && warn('You are mounting an instance with a template to ' + '<body>. This will replace <body> entirely. You ' + 'should probably use `replace: false` here.');\n      }\n      // there are many cases where the instance must\n      // become a fragment instance: basically anything that\n      // can create more than 1 root nodes.\n      if (\n      // multi-children template\n      frag.childNodes.length > 1 ||\n      // non-element template\n      replacer.nodeType !== 1 ||\n      // single nested component\n      tag === 'component' || resolveAsset(options, 'components', tag) || hasBindAttr(replacer, 'is') ||\n      // element directive\n      resolveAsset(options, 'elementDirectives', tag) ||\n      // for block\n      replacer.hasAttribute('v-for') ||\n      // if block\n      replacer.hasAttribute('v-if')) {\n        return frag;\n      } else {\n        options._replacerAttrs = extractAttrs(replacer);\n        mergeAttrs(el, replacer);\n        return replacer;\n      }\n    } else {\n      el.appendChild(frag);\n      return el;\n    }\n  } else {\n    process.env.NODE_ENV !== 'production' && warn('Invalid template option: ' + template);\n  }\n}\n\n/**\n * Helper to extract a component container's attributes\n * into a plain object array.\n *\n * @param {Element} el\n * @return {Array}\n */\n\nfunction extractAttrs(el) {\n  if (el.nodeType === 1 && el.hasAttributes()) {\n    return toArray(el.attributes);\n  }\n}\n\n/**\n * Merge the attributes of two elements, and make sure\n * the class names are merged properly.\n *\n * @param {Element} from\n * @param {Element} to\n */\n\nfunction mergeAttrs(from, to) {\n  var attrs = from.attributes;\n  var i = attrs.length;\n  var name, value;\n  while (i--) {\n    name = attrs[i].name;\n    value = attrs[i].value;\n    if (!to.hasAttribute(name) && !specialCharRE.test(name)) {\n      to.setAttribute(name, value);\n    } else if (name === 'class' && !parseText(value) && (value = value.trim())) {\n      value.split(/\\s+/).forEach(function (cls) {\n        addClass(to, cls);\n      });\n    }\n  }\n}\n\n/**\n * Scan and determine slot content distribution.\n * We do this during transclusion instead at compile time so that\n * the distribution is decoupled from the compilation order of\n * the slots.\n *\n * @param {Element|DocumentFragment} template\n * @param {Element} content\n * @param {Vue} vm\n */\n\nfunction resolveSlots(vm, content) {\n  if (!content) {\n    return;\n  }\n  var contents = vm._slotContents = Object.create(null);\n  var el, name;\n  for (var i = 0, l = content.children.length; i < l; i++) {\n    el = content.children[i];\n    /* eslint-disable no-cond-assign */\n    if (name = el.getAttribute('slot')) {\n      (contents[name] || (contents[name] = [])).push(el);\n    }\n    /* eslint-enable no-cond-assign */\n    if (process.env.NODE_ENV !== 'production' && getBindAttr(el, 'slot')) {\n      warn('The \"slot\" attribute must be static.', vm.$parent);\n    }\n  }\n  for (name in contents) {\n    contents[name] = extractFragment(contents[name], content);\n  }\n  if (content.hasChildNodes()) {\n    var nodes = content.childNodes;\n    if (nodes.length === 1 && nodes[0].nodeType === 3 && !nodes[0].data.trim()) {\n      return;\n    }\n    contents['default'] = extractFragment(content.childNodes, content);\n  }\n}\n\n/**\n * Extract qualified content nodes from a node list.\n *\n * @param {NodeList} nodes\n * @return {DocumentFragment}\n */\n\nfunction extractFragment(nodes, parent) {\n  var frag = document.createDocumentFragment();\n  nodes = toArray(nodes);\n  for (var i = 0, l = nodes.length; i < l; i++) {\n    var node = nodes[i];\n    if (isTemplate(node) && !node.hasAttribute('v-if') && !node.hasAttribute('v-for')) {\n      parent.removeChild(node);\n      node = parseTemplate(node, true);\n    }\n    frag.appendChild(node);\n  }\n  return frag;\n}\n\n\n\nvar compiler = Object.freeze({\n\tcompile: compile,\n\tcompileAndLinkProps: compileAndLinkProps,\n\tcompileRoot: compileRoot,\n\ttransclude: transclude,\n\tresolveSlots: resolveSlots\n});\n\nfunction stateMixin (Vue) {\n  /**\n   * Accessor for `$data` property, since setting $data\n   * requires observing the new object and updating\n   * proxied properties.\n   */\n\n  Object.defineProperty(Vue.prototype, '$data', {\n    get: function get() {\n      return this._data;\n    },\n    set: function set(newData) {\n      if (newData !== this._data) {\n        this._setData(newData);\n      }\n    }\n  });\n\n  /**\n   * Setup the scope of an instance, which contains:\n   * - observed data\n   * - computed properties\n   * - user methods\n   * - meta properties\n   */\n\n  Vue.prototype._initState = function () {\n    this._initProps();\n    this._initMeta();\n    this._initMethods();\n    this._initData();\n    this._initComputed();\n  };\n\n  /**\n   * Initialize props.\n   */\n\n  Vue.prototype._initProps = function () {\n    var options = this.$options;\n    var el = options.el;\n    var props = options.props;\n    if (props && !el) {\n      process.env.NODE_ENV !== 'production' && warn('Props will not be compiled if no `el` option is ' + 'provided at instantiation.', this);\n    }\n    // make sure to convert string selectors into element now\n    el = options.el = query(el);\n    this._propsUnlinkFn = el && el.nodeType === 1 && props\n    // props must be linked in proper scope if inside v-for\n    ? compileAndLinkProps(this, el, props, this._scope) : null;\n  };\n\n  /**\n   * Initialize the data.\n   */\n\n  Vue.prototype._initData = function () {\n    var dataFn = this.$options.data;\n    var data = this._data = dataFn ? dataFn() : {};\n    if (!isPlainObject(data)) {\n      data = {};\n      process.env.NODE_ENV !== 'production' && warn('data functions should return an object.', this);\n    }\n    var props = this._props;\n    // proxy data on instance\n    var keys = Object.keys(data);\n    var i, key;\n    i = keys.length;\n    while (i--) {\n      key = keys[i];\n      // there are two scenarios where we can proxy a data key:\n      // 1. it's not already defined as a prop\n      // 2. it's provided via a instantiation option AND there are no\n      //    template prop present\n      if (!props || !hasOwn(props, key)) {\n        this._proxy(key);\n      } else if (process.env.NODE_ENV !== 'production') {\n        warn('Data field \"' + key + '\" is already defined ' + 'as a prop. To provide default value for a prop, use the \"default\" ' + 'prop option; if you want to pass prop values to an instantiation ' + 'call, use the \"propsData\" option.', this);\n      }\n    }\n    // observe data\n    observe(data, this);\n  };\n\n  /**\n   * Swap the instance's $data. Called in $data's setter.\n   *\n   * @param {Object} newData\n   */\n\n  Vue.prototype._setData = function (newData) {\n    newData = newData || {};\n    var oldData = this._data;\n    this._data = newData;\n    var keys, key, i;\n    // unproxy keys not present in new data\n    keys = Object.keys(oldData);\n    i = keys.length;\n    while (i--) {\n      key = keys[i];\n      if (!(key in newData)) {\n        this._unproxy(key);\n      }\n    }\n    // proxy keys not already proxied,\n    // and trigger change for changed values\n    keys = Object.keys(newData);\n    i = keys.length;\n    while (i--) {\n      key = keys[i];\n      if (!hasOwn(this, key)) {\n        // new property\n        this._proxy(key);\n      }\n    }\n    oldData.__ob__.removeVm(this);\n    observe(newData, this);\n    this._digest();\n  };\n\n  /**\n   * Proxy a property, so that\n   * vm.prop === vm._data.prop\n   *\n   * @param {String} key\n   */\n\n  Vue.prototype._proxy = function (key) {\n    if (!isReserved(key)) {\n      // need to store ref to self here\n      // because these getter/setters might\n      // be called by child scopes via\n      // prototype inheritance.\n      var self = this;\n      Object.defineProperty(self, key, {\n        configurable: true,\n        enumerable: true,\n        get: function proxyGetter() {\n          return self._data[key];\n        },\n        set: function proxySetter(val) {\n          self._data[key] = val;\n        }\n      });\n    }\n  };\n\n  /**\n   * Unproxy a property.\n   *\n   * @param {String} key\n   */\n\n  Vue.prototype._unproxy = function (key) {\n    if (!isReserved(key)) {\n      delete this[key];\n    }\n  };\n\n  /**\n   * Force update on every watcher in scope.\n   */\n\n  Vue.prototype._digest = function () {\n    for (var i = 0, l = this._watchers.length; i < l; i++) {\n      this._watchers[i].update(true); // shallow updates\n    }\n  };\n\n  /**\n   * Setup computed properties. They are essentially\n   * special getter/setters\n   */\n\n  function noop() {}\n  Vue.prototype._initComputed = function () {\n    var computed = this.$options.computed;\n    if (computed) {\n      for (var key in computed) {\n        var userDef = computed[key];\n        var def = {\n          enumerable: true,\n          configurable: true\n        };\n        if (typeof userDef === 'function') {\n          def.get = makeComputedGetter(userDef, this);\n          def.set = noop;\n        } else {\n          def.get = userDef.get ? userDef.cache !== false ? makeComputedGetter(userDef.get, this) : bind(userDef.get, this) : noop;\n          def.set = userDef.set ? bind(userDef.set, this) : noop;\n        }\n        Object.defineProperty(this, key, def);\n      }\n    }\n  };\n\n  function makeComputedGetter(getter, owner) {\n    var watcher = new Watcher(owner, getter, null, {\n      lazy: true\n    });\n    return function computedGetter() {\n      if (watcher.dirty) {\n        watcher.evaluate();\n      }\n      if (Dep.target) {\n        watcher.depend();\n      }\n      return watcher.value;\n    };\n  }\n\n  /**\n   * Setup instance methods. Methods must be bound to the\n   * instance since they might be passed down as a prop to\n   * child components.\n   */\n\n  Vue.prototype._initMethods = function () {\n    var methods = this.$options.methods;\n    if (methods) {\n      for (var key in methods) {\n        this[key] = bind(methods[key], this);\n      }\n    }\n  };\n\n  /**\n   * Initialize meta information like $index, $key & $value.\n   */\n\n  Vue.prototype._initMeta = function () {\n    var metas = this.$options._meta;\n    if (metas) {\n      for (var key in metas) {\n        defineReactive(this, key, metas[key]);\n      }\n    }\n  };\n}\n\nvar eventRE = /^v-on:|^@/;\n\nfunction eventsMixin (Vue) {\n  /**\n   * Setup the instance's option events & watchers.\n   * If the value is a string, we pull it from the\n   * instance's methods by name.\n   */\n\n  Vue.prototype._initEvents = function () {\n    var options = this.$options;\n    if (options._asComponent) {\n      registerComponentEvents(this, options.el);\n    }\n    registerCallbacks(this, '$on', options.events);\n    registerCallbacks(this, '$watch', options.watch);\n  };\n\n  /**\n   * Register v-on events on a child component\n   *\n   * @param {Vue} vm\n   * @param {Element} el\n   */\n\n  function registerComponentEvents(vm, el) {\n    var attrs = el.attributes;\n    var name, value, handler;\n    for (var i = 0, l = attrs.length; i < l; i++) {\n      name = attrs[i].name;\n      if (eventRE.test(name)) {\n        name = name.replace(eventRE, '');\n        // force the expression into a statement so that\n        // it always dynamically resolves the method to call (#2670)\n        // kinda ugly hack, but does the job.\n        value = attrs[i].value;\n        if (isSimplePath(value)) {\n          value += '.apply(this, $arguments)';\n        }\n        handler = (vm._scope || vm._context).$eval(value, true);\n        handler._fromParent = true;\n        vm.$on(name.replace(eventRE), handler);\n      }\n    }\n  }\n\n  /**\n   * Register callbacks for option events and watchers.\n   *\n   * @param {Vue} vm\n   * @param {String} action\n   * @param {Object} hash\n   */\n\n  function registerCallbacks(vm, action, hash) {\n    if (!hash) return;\n    var handlers, key, i, j;\n    for (key in hash) {\n      handlers = hash[key];\n      if (isArray(handlers)) {\n        for (i = 0, j = handlers.length; i < j; i++) {\n          register(vm, action, key, handlers[i]);\n        }\n      } else {\n        register(vm, action, key, handlers);\n      }\n    }\n  }\n\n  /**\n   * Helper to register an event/watch callback.\n   *\n   * @param {Vue} vm\n   * @param {String} action\n   * @param {String} key\n   * @param {Function|String|Object} handler\n   * @param {Object} [options]\n   */\n\n  function register(vm, action, key, handler, options) {\n    var type = typeof handler;\n    if (type === 'function') {\n      vm[action](key, handler, options);\n    } else if (type === 'string') {\n      var methods = vm.$options.methods;\n      var method = methods && methods[handler];\n      if (method) {\n        vm[action](key, method, options);\n      } else {\n        process.env.NODE_ENV !== 'production' && warn('Unknown method: \"' + handler + '\" when ' + 'registering callback for ' + action + ': \"' + key + '\".', vm);\n      }\n    } else if (handler && type === 'object') {\n      register(vm, action, key, handler.handler, handler);\n    }\n  }\n\n  /**\n   * Setup recursive attached/detached calls\n   */\n\n  Vue.prototype._initDOMHooks = function () {\n    this.$on('hook:attached', onAttached);\n    this.$on('hook:detached', onDetached);\n  };\n\n  /**\n   * Callback to recursively call attached hook on children\n   */\n\n  function onAttached() {\n    if (!this._isAttached) {\n      this._isAttached = true;\n      this.$children.forEach(callAttach);\n    }\n  }\n\n  /**\n   * Iterator to call attached hook\n   *\n   * @param {Vue} child\n   */\n\n  function callAttach(child) {\n    if (!child._isAttached && inDoc(child.$el)) {\n      child._callHook('attached');\n    }\n  }\n\n  /**\n   * Callback to recursively call detached hook on children\n   */\n\n  function onDetached() {\n    if (this._isAttached) {\n      this._isAttached = false;\n      this.$children.forEach(callDetach);\n    }\n  }\n\n  /**\n   * Iterator to call detached hook\n   *\n   * @param {Vue} child\n   */\n\n  function callDetach(child) {\n    if (child._isAttached && !inDoc(child.$el)) {\n      child._callHook('detached');\n    }\n  }\n\n  /**\n   * Trigger all handlers for a hook\n   *\n   * @param {String} hook\n   */\n\n  Vue.prototype._callHook = function (hook) {\n    this.$emit('pre-hook:' + hook);\n    var handlers = this.$options[hook];\n    if (handlers) {\n      for (var i = 0, j = handlers.length; i < j; i++) {\n        handlers[i].call(this);\n      }\n    }\n    this.$emit('hook:' + hook);\n  };\n}\n\nfunction noop$1() {}\n\n/**\n * A directive links a DOM element with a piece of data,\n * which is the result of evaluating an expression.\n * It registers a watcher with the expression and calls\n * the DOM update function when a change is triggered.\n *\n * @param {Object} descriptor\n *                 - {String} name\n *                 - {Object} def\n *                 - {String} expression\n *                 - {Array<Object>} [filters]\n *                 - {Object} [modifiers]\n *                 - {Boolean} literal\n *                 - {String} attr\n *                 - {String} arg\n *                 - {String} raw\n *                 - {String} [ref]\n *                 - {Array<Object>} [interp]\n *                 - {Boolean} [hasOneTime]\n * @param {Vue} vm\n * @param {Node} el\n * @param {Vue} [host] - transclusion host component\n * @param {Object} [scope] - v-for scope\n * @param {Fragment} [frag] - owner fragment\n * @constructor\n */\nfunction Directive(descriptor, vm, el, host, scope, frag) {\n  this.vm = vm;\n  this.el = el;\n  // copy descriptor properties\n  this.descriptor = descriptor;\n  this.name = descriptor.name;\n  this.expression = descriptor.expression;\n  this.arg = descriptor.arg;\n  this.modifiers = descriptor.modifiers;\n  this.filters = descriptor.filters;\n  this.literal = this.modifiers && this.modifiers.literal;\n  // private\n  this._locked = false;\n  this._bound = false;\n  this._listeners = null;\n  // link context\n  this._host = host;\n  this._scope = scope;\n  this._frag = frag;\n  // store directives on node in dev mode\n  if (process.env.NODE_ENV !== 'production' && this.el) {\n    this.el._vue_directives = this.el._vue_directives || [];\n    this.el._vue_directives.push(this);\n  }\n}\n\n/**\n * Initialize the directive, mixin definition properties,\n * setup the watcher, call definition bind() and update()\n * if present.\n */\n\nDirective.prototype._bind = function () {\n  var name = this.name;\n  var descriptor = this.descriptor;\n\n  // remove attribute\n  if ((name !== 'cloak' || this.vm._isCompiled) && this.el && this.el.removeAttribute) {\n    var attr = descriptor.attr || 'v-' + name;\n    this.el.removeAttribute(attr);\n  }\n\n  // copy def properties\n  var def = descriptor.def;\n  if (typeof def === 'function') {\n    this.update = def;\n  } else {\n    extend(this, def);\n  }\n\n  // setup directive params\n  this._setupParams();\n\n  // initial bind\n  if (this.bind) {\n    this.bind();\n  }\n  this._bound = true;\n\n  if (this.literal) {\n    this.update && this.update(descriptor.raw);\n  } else if ((this.expression || this.modifiers) && (this.update || this.twoWay) && !this._checkStatement()) {\n    // wrapped updater for context\n    var dir = this;\n    if (this.update) {\n      this._update = function (val, oldVal) {\n        if (!dir._locked) {\n          dir.update(val, oldVal);\n        }\n      };\n    } else {\n      this._update = noop$1;\n    }\n    var preProcess = this._preProcess ? bind(this._preProcess, this) : null;\n    var postProcess = this._postProcess ? bind(this._postProcess, this) : null;\n    var watcher = this._watcher = new Watcher(this.vm, this.expression, this._update, // callback\n    {\n      filters: this.filters,\n      twoWay: this.twoWay,\n      deep: this.deep,\n      preProcess: preProcess,\n      postProcess: postProcess,\n      scope: this._scope\n    });\n    // v-model with inital inline value need to sync back to\n    // model instead of update to DOM on init. They would\n    // set the afterBind hook to indicate that.\n    if (this.afterBind) {\n      this.afterBind();\n    } else if (this.update) {\n      this.update(watcher.value);\n    }\n  }\n};\n\n/**\n * Setup all param attributes, e.g. track-by,\n * transition-mode, etc...\n */\n\nDirective.prototype._setupParams = function () {\n  if (!this.params) {\n    return;\n  }\n  var params = this.params;\n  // swap the params array with a fresh object.\n  this.params = Object.create(null);\n  var i = params.length;\n  var key, val, mappedKey;\n  while (i--) {\n    key = hyphenate(params[i]);\n    mappedKey = camelize(key);\n    val = getBindAttr(this.el, key);\n    if (val != null) {\n      // dynamic\n      this._setupParamWatcher(mappedKey, val);\n    } else {\n      // static\n      val = getAttr(this.el, key);\n      if (val != null) {\n        this.params[mappedKey] = val === '' ? true : val;\n      }\n    }\n  }\n};\n\n/**\n * Setup a watcher for a dynamic param.\n *\n * @param {String} key\n * @param {String} expression\n */\n\nDirective.prototype._setupParamWatcher = function (key, expression) {\n  var self = this;\n  var called = false;\n  var unwatch = (this._scope || this.vm).$watch(expression, function (val, oldVal) {\n    self.params[key] = val;\n    // since we are in immediate mode,\n    // only call the param change callbacks if this is not the first update.\n    if (called) {\n      var cb = self.paramWatchers && self.paramWatchers[key];\n      if (cb) {\n        cb.call(self, val, oldVal);\n      }\n    } else {\n      called = true;\n    }\n  }, {\n    immediate: true,\n    user: false\n  });(this._paramUnwatchFns || (this._paramUnwatchFns = [])).push(unwatch);\n};\n\n/**\n * Check if the directive is a function caller\n * and if the expression is a callable one. If both true,\n * we wrap up the expression and use it as the event\n * handler.\n *\n * e.g. on-click=\"a++\"\n *\n * @return {Boolean}\n */\n\nDirective.prototype._checkStatement = function () {\n  var expression = this.expression;\n  if (expression && this.acceptStatement && !isSimplePath(expression)) {\n    var fn = parseExpression$1(expression).get;\n    var scope = this._scope || this.vm;\n    var handler = function handler(e) {\n      scope.$event = e;\n      fn.call(scope, scope);\n      scope.$event = null;\n    };\n    if (this.filters) {\n      handler = scope._applyFilters(handler, null, this.filters);\n    }\n    this.update(handler);\n    return true;\n  }\n};\n\n/**\n * Set the corresponding value with the setter.\n * This should only be used in two-way directives\n * e.g. v-model.\n *\n * @param {*} value\n * @public\n */\n\nDirective.prototype.set = function (value) {\n  /* istanbul ignore else */\n  if (this.twoWay) {\n    this._withLock(function () {\n      this._watcher.set(value);\n    });\n  } else if (process.env.NODE_ENV !== 'production') {\n    warn('Directive.set() can only be used inside twoWay' + 'directives.');\n  }\n};\n\n/**\n * Execute a function while preventing that function from\n * triggering updates on this directive instance.\n *\n * @param {Function} fn\n */\n\nDirective.prototype._withLock = function (fn) {\n  var self = this;\n  self._locked = true;\n  fn.call(self);\n  nextTick(function () {\n    self._locked = false;\n  });\n};\n\n/**\n * Convenience method that attaches a DOM event listener\n * to the directive element and autometically tears it down\n * during unbind.\n *\n * @param {String} event\n * @param {Function} handler\n * @param {Boolean} [useCapture]\n */\n\nDirective.prototype.on = function (event, handler, useCapture) {\n  on(this.el, event, handler, useCapture);(this._listeners || (this._listeners = [])).push([event, handler]);\n};\n\n/**\n * Teardown the watcher and call unbind.\n */\n\nDirective.prototype._teardown = function () {\n  if (this._bound) {\n    this._bound = false;\n    if (this.unbind) {\n      this.unbind();\n    }\n    if (this._watcher) {\n      this._watcher.teardown();\n    }\n    var listeners = this._listeners;\n    var i;\n    if (listeners) {\n      i = listeners.length;\n      while (i--) {\n        off(this.el, listeners[i][0], listeners[i][1]);\n      }\n    }\n    var unwatchFns = this._paramUnwatchFns;\n    if (unwatchFns) {\n      i = unwatchFns.length;\n      while (i--) {\n        unwatchFns[i]();\n      }\n    }\n    if (process.env.NODE_ENV !== 'production' && this.el) {\n      this.el._vue_directives.$remove(this);\n    }\n    this.vm = this.el = this._watcher = this._listeners = null;\n  }\n};\n\nfunction lifecycleMixin (Vue) {\n  /**\n   * Update v-ref for component.\n   *\n   * @param {Boolean} remove\n   */\n\n  Vue.prototype._updateRef = function (remove) {\n    var ref = this.$options._ref;\n    if (ref) {\n      var refs = (this._scope || this._context).$refs;\n      if (remove) {\n        if (refs[ref] === this) {\n          refs[ref] = null;\n        }\n      } else {\n        refs[ref] = this;\n      }\n    }\n  };\n\n  /**\n   * Transclude, compile and link element.\n   *\n   * If a pre-compiled linker is available, that means the\n   * passed in element will be pre-transcluded and compiled\n   * as well - all we need to do is to call the linker.\n   *\n   * Otherwise we need to call transclude/compile/link here.\n   *\n   * @param {Element} el\n   */\n\n  Vue.prototype._compile = function (el) {\n    var options = this.$options;\n\n    // transclude and init element\n    // transclude can potentially replace original\n    // so we need to keep reference; this step also injects\n    // the template and caches the original attributes\n    // on the container node and replacer node.\n    var original = el;\n    el = transclude(el, options);\n    this._initElement(el);\n\n    // handle v-pre on root node (#2026)\n    if (el.nodeType === 1 && getAttr(el, 'v-pre') !== null) {\n      return;\n    }\n\n    // root is always compiled per-instance, because\n    // container attrs and props can be different every time.\n    var contextOptions = this._context && this._context.$options;\n    var rootLinker = compileRoot(el, options, contextOptions);\n\n    // resolve slot distribution\n    resolveSlots(this, options._content);\n\n    // compile and link the rest\n    var contentLinkFn;\n    var ctor = this.constructor;\n    // component compilation can be cached\n    // as long as it's not using inline-template\n    if (options._linkerCachable) {\n      contentLinkFn = ctor.linker;\n      if (!contentLinkFn) {\n        contentLinkFn = ctor.linker = compile(el, options);\n      }\n    }\n\n    // link phase\n    // make sure to link root with prop scope!\n    var rootUnlinkFn = rootLinker(this, el, this._scope);\n    var contentUnlinkFn = contentLinkFn ? contentLinkFn(this, el) : compile(el, options)(this, el);\n\n    // register composite unlink function\n    // to be called during instance destruction\n    this._unlinkFn = function () {\n      rootUnlinkFn();\n      // passing destroying: true to avoid searching and\n      // splicing the directives\n      contentUnlinkFn(true);\n    };\n\n    // finally replace original\n    if (options.replace) {\n      replace(original, el);\n    }\n\n    this._isCompiled = true;\n    this._callHook('compiled');\n  };\n\n  /**\n   * Initialize instance element. Called in the public\n   * $mount() method.\n   *\n   * @param {Element} el\n   */\n\n  Vue.prototype._initElement = function (el) {\n    if (isFragment(el)) {\n      this._isFragment = true;\n      this.$el = this._fragmentStart = el.firstChild;\n      this._fragmentEnd = el.lastChild;\n      // set persisted text anchors to empty\n      if (this._fragmentStart.nodeType === 3) {\n        this._fragmentStart.data = this._fragmentEnd.data = '';\n      }\n      this._fragment = el;\n    } else {\n      this.$el = el;\n    }\n    this.$el.__vue__ = this;\n    this._callHook('beforeCompile');\n  };\n\n  /**\n   * Create and bind a directive to an element.\n   *\n   * @param {Object} descriptor - parsed directive descriptor\n   * @param {Node} node   - target node\n   * @param {Vue} [host] - transclusion host component\n   * @param {Object} [scope] - v-for scope\n   * @param {Fragment} [frag] - owner fragment\n   */\n\n  Vue.prototype._bindDir = function (descriptor, node, host, scope, frag) {\n    this._directives.push(new Directive(descriptor, this, node, host, scope, frag));\n  };\n\n  /**\n   * Teardown an instance, unobserves the data, unbind all the\n   * directives, turn off all the event listeners, etc.\n   *\n   * @param {Boolean} remove - whether to remove the DOM node.\n   * @param {Boolean} deferCleanup - if true, defer cleanup to\n   *                                 be called later\n   */\n\n  Vue.prototype._destroy = function (remove, deferCleanup) {\n    if (this._isBeingDestroyed) {\n      if (!deferCleanup) {\n        this._cleanup();\n      }\n      return;\n    }\n\n    var destroyReady;\n    var pendingRemoval;\n\n    var self = this;\n    // Cleanup should be called either synchronously or asynchronoysly as\n    // callback of this.$remove(), or if remove and deferCleanup are false.\n    // In any case it should be called after all other removing, unbinding and\n    // turning of is done\n    var cleanupIfPossible = function cleanupIfPossible() {\n      if (destroyReady && !pendingRemoval && !deferCleanup) {\n        self._cleanup();\n      }\n    };\n\n    // remove DOM element\n    if (remove && this.$el) {\n      pendingRemoval = true;\n      this.$remove(function () {\n        pendingRemoval = false;\n        cleanupIfPossible();\n      });\n    }\n\n    this._callHook('beforeDestroy');\n    this._isBeingDestroyed = true;\n    var i;\n    // remove self from parent. only necessary\n    // if parent is not being destroyed as well.\n    var parent = this.$parent;\n    if (parent && !parent._isBeingDestroyed) {\n      parent.$children.$remove(this);\n      // unregister ref (remove: true)\n      this._updateRef(true);\n    }\n    // destroy all children.\n    i = this.$children.length;\n    while (i--) {\n      this.$children[i].$destroy();\n    }\n    // teardown props\n    if (this._propsUnlinkFn) {\n      this._propsUnlinkFn();\n    }\n    // teardown all directives. this also tearsdown all\n    // directive-owned watchers.\n    if (this._unlinkFn) {\n      this._unlinkFn();\n    }\n    i = this._watchers.length;\n    while (i--) {\n      this._watchers[i].teardown();\n    }\n    // remove reference to self on $el\n    if (this.$el) {\n      this.$el.__vue__ = null;\n    }\n\n    destroyReady = true;\n    cleanupIfPossible();\n  };\n\n  /**\n   * Clean up to ensure garbage collection.\n   * This is called after the leave transition if there\n   * is any.\n   */\n\n  Vue.prototype._cleanup = function () {\n    if (this._isDestroyed) {\n      return;\n    }\n    // remove self from owner fragment\n    // do it in cleanup so that we can call $destroy with\n    // defer right when a fragment is about to be removed.\n    if (this._frag) {\n      this._frag.children.$remove(this);\n    }\n    // remove reference from data ob\n    // frozen object may not have observer.\n    if (this._data && this._data.__ob__) {\n      this._data.__ob__.removeVm(this);\n    }\n    // Clean up references to private properties and other\n    // instances. preserve reference to _data so that proxy\n    // accessors still work. The only potential side effect\n    // here is that mutating the instance after it's destroyed\n    // may affect the state of other components that are still\n    // observing the same object, but that seems to be a\n    // reasonable responsibility for the user rather than\n    // always throwing an error on them.\n    this.$el = this.$parent = this.$root = this.$children = this._watchers = this._context = this._scope = this._directives = null;\n    // call the last hook...\n    this._isDestroyed = true;\n    this._callHook('destroyed');\n    // turn off all instance listeners.\n    this.$off();\n  };\n}\n\nfunction miscMixin (Vue) {\n  /**\n   * Apply a list of filter (descriptors) to a value.\n   * Using plain for loops here because this will be called in\n   * the getter of any watcher with filters so it is very\n   * performance sensitive.\n   *\n   * @param {*} value\n   * @param {*} [oldValue]\n   * @param {Array} filters\n   * @param {Boolean} write\n   * @return {*}\n   */\n\n  Vue.prototype._applyFilters = function (value, oldValue, filters, write) {\n    var filter, fn, args, arg, offset, i, l, j, k;\n    for (i = 0, l = filters.length; i < l; i++) {\n      filter = filters[write ? l - i - 1 : i];\n      fn = resolveAsset(this.$options, 'filters', filter.name, true);\n      if (!fn) continue;\n      fn = write ? fn.write : fn.read || fn;\n      if (typeof fn !== 'function') continue;\n      args = write ? [value, oldValue] : [value];\n      offset = write ? 2 : 1;\n      if (filter.args) {\n        for (j = 0, k = filter.args.length; j < k; j++) {\n          arg = filter.args[j];\n          args[j + offset] = arg.dynamic ? this.$get(arg.value) : arg.value;\n        }\n      }\n      value = fn.apply(this, args);\n    }\n    return value;\n  };\n\n  /**\n   * Resolve a component, depending on whether the component\n   * is defined normally or using an async factory function.\n   * Resolves synchronously if already resolved, otherwise\n   * resolves asynchronously and caches the resolved\n   * constructor on the factory.\n   *\n   * @param {String|Function} value\n   * @param {Function} cb\n   */\n\n  Vue.prototype._resolveComponent = function (value, cb) {\n    var factory;\n    if (typeof value === 'function') {\n      factory = value;\n    } else {\n      factory = resolveAsset(this.$options, 'components', value, true);\n    }\n    /* istanbul ignore if */\n    if (!factory) {\n      return;\n    }\n    // async component factory\n    if (!factory.options) {\n      if (factory.resolved) {\n        // cached\n        cb(factory.resolved);\n      } else if (factory.requested) {\n        // pool callbacks\n        factory.pendingCallbacks.push(cb);\n      } else {\n        factory.requested = true;\n        var cbs = factory.pendingCallbacks = [cb];\n        factory.call(this, function resolve(res) {\n          if (isPlainObject(res)) {\n            res = Vue.extend(res);\n          }\n          // cache resolved\n          factory.resolved = res;\n          // invoke callbacks\n          for (var i = 0, l = cbs.length; i < l; i++) {\n            cbs[i](res);\n          }\n        }, function reject(reason) {\n          process.env.NODE_ENV !== 'production' && warn('Failed to resolve async component' + (typeof value === 'string' ? ': ' + value : '') + '. ' + (reason ? '\\nReason: ' + reason : ''));\n        });\n      }\n    } else {\n      // normal component\n      cb(factory);\n    }\n  };\n}\n\nvar filterRE$1 = /[^|]\\|[^|]/;\n\nfunction dataAPI (Vue) {\n  /**\n   * Get the value from an expression on this vm.\n   *\n   * @param {String} exp\n   * @param {Boolean} [asStatement]\n   * @return {*}\n   */\n\n  Vue.prototype.$get = function (exp, asStatement) {\n    var res = parseExpression$1(exp);\n    if (res) {\n      if (asStatement) {\n        var self = this;\n        return function statementHandler() {\n          self.$arguments = toArray(arguments);\n          var result = res.get.call(self, self);\n          self.$arguments = null;\n          return result;\n        };\n      } else {\n        try {\n          return res.get.call(this, this);\n        } catch (e) {}\n      }\n    }\n  };\n\n  /**\n   * Set the value from an expression on this vm.\n   * The expression must be a valid left-hand\n   * expression in an assignment.\n   *\n   * @param {String} exp\n   * @param {*} val\n   */\n\n  Vue.prototype.$set = function (exp, val) {\n    var res = parseExpression$1(exp, true);\n    if (res && res.set) {\n      res.set.call(this, this, val);\n    }\n  };\n\n  /**\n   * Delete a property on the VM\n   *\n   * @param {String} key\n   */\n\n  Vue.prototype.$delete = function (key) {\n    del(this._data, key);\n  };\n\n  /**\n   * Watch an expression, trigger callback when its\n   * value changes.\n   *\n   * @param {String|Function} expOrFn\n   * @param {Function} cb\n   * @param {Object} [options]\n   *                 - {Boolean} deep\n   *                 - {Boolean} immediate\n   * @return {Function} - unwatchFn\n   */\n\n  Vue.prototype.$watch = function (expOrFn, cb, options) {\n    var vm = this;\n    var parsed;\n    if (typeof expOrFn === 'string') {\n      parsed = parseDirective(expOrFn);\n      expOrFn = parsed.expression;\n    }\n    var watcher = new Watcher(vm, expOrFn, cb, {\n      deep: options && options.deep,\n      sync: options && options.sync,\n      filters: parsed && parsed.filters,\n      user: !options || options.user !== false\n    });\n    if (options && options.immediate) {\n      cb.call(vm, watcher.value);\n    }\n    return function unwatchFn() {\n      watcher.teardown();\n    };\n  };\n\n  /**\n   * Evaluate a text directive, including filters.\n   *\n   * @param {String} text\n   * @param {Boolean} [asStatement]\n   * @return {String}\n   */\n\n  Vue.prototype.$eval = function (text, asStatement) {\n    // check for filters.\n    if (filterRE$1.test(text)) {\n      var dir = parseDirective(text);\n      // the filter regex check might give false positive\n      // for pipes inside strings, so it's possible that\n      // we don't get any filters here\n      var val = this.$get(dir.expression, asStatement);\n      return dir.filters ? this._applyFilters(val, null, dir.filters) : val;\n    } else {\n      // no filter\n      return this.$get(text, asStatement);\n    }\n  };\n\n  /**\n   * Interpolate a piece of template text.\n   *\n   * @param {String} text\n   * @return {String}\n   */\n\n  Vue.prototype.$interpolate = function (text) {\n    var tokens = parseText(text);\n    var vm = this;\n    if (tokens) {\n      if (tokens.length === 1) {\n        return vm.$eval(tokens[0].value) + '';\n      } else {\n        return tokens.map(function (token) {\n          return token.tag ? vm.$eval(token.value) : token.value;\n        }).join('');\n      }\n    } else {\n      return text;\n    }\n  };\n\n  /**\n   * Log instance data as a plain JS object\n   * so that it is easier to inspect in console.\n   * This method assumes console is available.\n   *\n   * @param {String} [path]\n   */\n\n  Vue.prototype.$log = function (path) {\n    var data = path ? getPath(this._data, path) : this._data;\n    if (data) {\n      data = clean(data);\n    }\n    // include computed fields\n    if (!path) {\n      var key;\n      for (key in this.$options.computed) {\n        data[key] = clean(this[key]);\n      }\n      if (this._props) {\n        for (key in this._props) {\n          data[key] = clean(this[key]);\n        }\n      }\n    }\n    console.log(data);\n  };\n\n  /**\n   * \"clean\" a getter/setter converted object into a plain\n   * object copy.\n   *\n   * @param {Object} - obj\n   * @return {Object}\n   */\n\n  function clean(obj) {\n    return JSON.parse(JSON.stringify(obj));\n  }\n}\n\nfunction domAPI (Vue) {\n  /**\n   * Convenience on-instance nextTick. The callback is\n   * auto-bound to the instance, and this avoids component\n   * modules having to rely on the global Vue.\n   *\n   * @param {Function} fn\n   */\n\n  Vue.prototype.$nextTick = function (fn) {\n    nextTick(fn, this);\n  };\n\n  /**\n   * Append instance to target\n   *\n   * @param {Node} target\n   * @param {Function} [cb]\n   * @param {Boolean} [withTransition] - defaults to true\n   */\n\n  Vue.prototype.$appendTo = function (target, cb, withTransition) {\n    return insert(this, target, cb, withTransition, append, appendWithTransition);\n  };\n\n  /**\n   * Prepend instance to target\n   *\n   * @param {Node} target\n   * @param {Function} [cb]\n   * @param {Boolean} [withTransition] - defaults to true\n   */\n\n  Vue.prototype.$prependTo = function (target, cb, withTransition) {\n    target = query(target);\n    if (target.hasChildNodes()) {\n      this.$before(target.firstChild, cb, withTransition);\n    } else {\n      this.$appendTo(target, cb, withTransition);\n    }\n    return this;\n  };\n\n  /**\n   * Insert instance before target\n   *\n   * @param {Node} target\n   * @param {Function} [cb]\n   * @param {Boolean} [withTransition] - defaults to true\n   */\n\n  Vue.prototype.$before = function (target, cb, withTransition) {\n    return insert(this, target, cb, withTransition, beforeWithCb, beforeWithTransition);\n  };\n\n  /**\n   * Insert instance after target\n   *\n   * @param {Node} target\n   * @param {Function} [cb]\n   * @param {Boolean} [withTransition] - defaults to true\n   */\n\n  Vue.prototype.$after = function (target, cb, withTransition) {\n    target = query(target);\n    if (target.nextSibling) {\n      this.$before(target.nextSibling, cb, withTransition);\n    } else {\n      this.$appendTo(target.parentNode, cb, withTransition);\n    }\n    return this;\n  };\n\n  /**\n   * Remove instance from DOM\n   *\n   * @param {Function} [cb]\n   * @param {Boolean} [withTransition] - defaults to true\n   */\n\n  Vue.prototype.$remove = function (cb, withTransition) {\n    if (!this.$el.parentNode) {\n      return cb && cb();\n    }\n    var inDocument = this._isAttached && inDoc(this.$el);\n    // if we are not in document, no need to check\n    // for transitions\n    if (!inDocument) withTransition = false;\n    var self = this;\n    var realCb = function realCb() {\n      if (inDocument) self._callHook('detached');\n      if (cb) cb();\n    };\n    if (this._isFragment) {\n      removeNodeRange(this._fragmentStart, this._fragmentEnd, this, this._fragment, realCb);\n    } else {\n      var op = withTransition === false ? removeWithCb : removeWithTransition;\n      op(this.$el, this, realCb);\n    }\n    return this;\n  };\n\n  /**\n   * Shared DOM insertion function.\n   *\n   * @param {Vue} vm\n   * @param {Element} target\n   * @param {Function} [cb]\n   * @param {Boolean} [withTransition]\n   * @param {Function} op1 - op for non-transition insert\n   * @param {Function} op2 - op for transition insert\n   * @return vm\n   */\n\n  function insert(vm, target, cb, withTransition, op1, op2) {\n    target = query(target);\n    var targetIsDetached = !inDoc(target);\n    var op = withTransition === false || targetIsDetached ? op1 : op2;\n    var shouldCallHook = !targetIsDetached && !vm._isAttached && !inDoc(vm.$el);\n    if (vm._isFragment) {\n      mapNodeRange(vm._fragmentStart, vm._fragmentEnd, function (node) {\n        op(node, target, vm);\n      });\n      cb && cb();\n    } else {\n      op(vm.$el, target, vm, cb);\n    }\n    if (shouldCallHook) {\n      vm._callHook('attached');\n    }\n    return vm;\n  }\n\n  /**\n   * Check for selectors\n   *\n   * @param {String|Element} el\n   */\n\n  function query(el) {\n    return typeof el === 'string' ? document.querySelector(el) : el;\n  }\n\n  /**\n   * Append operation that takes a callback.\n   *\n   * @param {Node} el\n   * @param {Node} target\n   * @param {Vue} vm - unused\n   * @param {Function} [cb]\n   */\n\n  function append(el, target, vm, cb) {\n    target.appendChild(el);\n    if (cb) cb();\n  }\n\n  /**\n   * InsertBefore operation that takes a callback.\n   *\n   * @param {Node} el\n   * @param {Node} target\n   * @param {Vue} vm - unused\n   * @param {Function} [cb]\n   */\n\n  function beforeWithCb(el, target, vm, cb) {\n    before(el, target);\n    if (cb) cb();\n  }\n\n  /**\n   * Remove operation that takes a callback.\n   *\n   * @param {Node} el\n   * @param {Vue} vm - unused\n   * @param {Function} [cb]\n   */\n\n  function removeWithCb(el, vm, cb) {\n    remove(el);\n    if (cb) cb();\n  }\n}\n\nfunction eventsAPI (Vue) {\n  /**\n   * Listen on the given `event` with `fn`.\n   *\n   * @param {String} event\n   * @param {Function} fn\n   */\n\n  Vue.prototype.$on = function (event, fn) {\n    (this._events[event] || (this._events[event] = [])).push(fn);\n    modifyListenerCount(this, event, 1);\n    return this;\n  };\n\n  /**\n   * Adds an `event` listener that will be invoked a single\n   * time then automatically removed.\n   *\n   * @param {String} event\n   * @param {Function} fn\n   */\n\n  Vue.prototype.$once = function (event, fn) {\n    var self = this;\n    function on() {\n      self.$off(event, on);\n      fn.apply(this, arguments);\n    }\n    on.fn = fn;\n    this.$on(event, on);\n    return this;\n  };\n\n  /**\n   * Remove the given callback for `event` or all\n   * registered callbacks.\n   *\n   * @param {String} event\n   * @param {Function} fn\n   */\n\n  Vue.prototype.$off = function (event, fn) {\n    var cbs;\n    // all\n    if (!arguments.length) {\n      if (this.$parent) {\n        for (event in this._events) {\n          cbs = this._events[event];\n          if (cbs) {\n            modifyListenerCount(this, event, -cbs.length);\n          }\n        }\n      }\n      this._events = {};\n      return this;\n    }\n    // specific event\n    cbs = this._events[event];\n    if (!cbs) {\n      return this;\n    }\n    if (arguments.length === 1) {\n      modifyListenerCount(this, event, -cbs.length);\n      this._events[event] = null;\n      return this;\n    }\n    // specific handler\n    var cb;\n    var i = cbs.length;\n    while (i--) {\n      cb = cbs[i];\n      if (cb === fn || cb.fn === fn) {\n        modifyListenerCount(this, event, -1);\n        cbs.splice(i, 1);\n        break;\n      }\n    }\n    return this;\n  };\n\n  /**\n   * Trigger an event on self.\n   *\n   * @param {String|Object} event\n   * @return {Boolean} shouldPropagate\n   */\n\n  Vue.prototype.$emit = function (event) {\n    var isSource = typeof event === 'string';\n    event = isSource ? event : event.name;\n    var cbs = this._events[event];\n    var shouldPropagate = isSource || !cbs;\n    if (cbs) {\n      cbs = cbs.length > 1 ? toArray(cbs) : cbs;\n      // this is a somewhat hacky solution to the question raised\n      // in #2102: for an inline component listener like <comp @test=\"doThis\">,\n      // the propagation handling is somewhat broken. Therefore we\n      // need to treat these inline callbacks differently.\n      var hasParentCbs = isSource && cbs.some(function (cb) {\n        return cb._fromParent;\n      });\n      if (hasParentCbs) {\n        shouldPropagate = false;\n      }\n      var args = toArray(arguments, 1);\n      for (var i = 0, l = cbs.length; i < l; i++) {\n        var cb = cbs[i];\n        var res = cb.apply(this, args);\n        if (res === true && (!hasParentCbs || cb._fromParent)) {\n          shouldPropagate = true;\n        }\n      }\n    }\n    return shouldPropagate;\n  };\n\n  /**\n   * Recursively broadcast an event to all children instances.\n   *\n   * @param {String|Object} event\n   * @param {...*} additional arguments\n   */\n\n  Vue.prototype.$broadcast = function (event) {\n    var isSource = typeof event === 'string';\n    event = isSource ? event : event.name;\n    // if no child has registered for this event,\n    // then there's no need to broadcast.\n    if (!this._eventsCount[event]) return;\n    var children = this.$children;\n    var args = toArray(arguments);\n    if (isSource) {\n      // use object event to indicate non-source emit\n      // on children\n      args[0] = { name: event, source: this };\n    }\n    for (var i = 0, l = children.length; i < l; i++) {\n      var child = children[i];\n      var shouldPropagate = child.$emit.apply(child, args);\n      if (shouldPropagate) {\n        child.$broadcast.apply(child, args);\n      }\n    }\n    return this;\n  };\n\n  /**\n   * Recursively propagate an event up the parent chain.\n   *\n   * @param {String} event\n   * @param {...*} additional arguments\n   */\n\n  Vue.prototype.$dispatch = function (event) {\n    var shouldPropagate = this.$emit.apply(this, arguments);\n    if (!shouldPropagate) return;\n    var parent = this.$parent;\n    var args = toArray(arguments);\n    // use object event to indicate non-source emit\n    // on parents\n    args[0] = { name: event, source: this };\n    while (parent) {\n      shouldPropagate = parent.$emit.apply(parent, args);\n      parent = shouldPropagate ? parent.$parent : null;\n    }\n    return this;\n  };\n\n  /**\n   * Modify the listener counts on all parents.\n   * This bookkeeping allows $broadcast to return early when\n   * no child has listened to a certain event.\n   *\n   * @param {Vue} vm\n   * @param {String} event\n   * @param {Number} count\n   */\n\n  var hookRE = /^hook:/;\n  function modifyListenerCount(vm, event, count) {\n    var parent = vm.$parent;\n    // hooks do not get broadcasted so no need\n    // to do bookkeeping for them\n    if (!parent || !count || hookRE.test(event)) return;\n    while (parent) {\n      parent._eventsCount[event] = (parent._eventsCount[event] || 0) + count;\n      parent = parent.$parent;\n    }\n  }\n}\n\nfunction lifecycleAPI (Vue) {\n  /**\n   * Set instance target element and kick off the compilation\n   * process. The passed in `el` can be a selector string, an\n   * existing Element, or a DocumentFragment (for block\n   * instances).\n   *\n   * @param {Element|DocumentFragment|string} el\n   * @public\n   */\n\n  Vue.prototype.$mount = function (el) {\n    if (this._isCompiled) {\n      process.env.NODE_ENV !== 'production' && warn('$mount() should be called only once.', this);\n      return;\n    }\n    el = query(el);\n    if (!el) {\n      el = document.createElement('div');\n    }\n    this._compile(el);\n    this._initDOMHooks();\n    if (inDoc(this.$el)) {\n      this._callHook('attached');\n      ready.call(this);\n    } else {\n      this.$once('hook:attached', ready);\n    }\n    return this;\n  };\n\n  /**\n   * Mark an instance as ready.\n   */\n\n  function ready() {\n    this._isAttached = true;\n    this._isReady = true;\n    this._callHook('ready');\n  }\n\n  /**\n   * Teardown the instance, simply delegate to the internal\n   * _destroy.\n   *\n   * @param {Boolean} remove\n   * @param {Boolean} deferCleanup\n   */\n\n  Vue.prototype.$destroy = function (remove, deferCleanup) {\n    this._destroy(remove, deferCleanup);\n  };\n\n  /**\n   * Partially compile a piece of DOM and return a\n   * decompile function.\n   *\n   * @param {Element|DocumentFragment} el\n   * @param {Vue} [host]\n   * @param {Object} [scope]\n   * @param {Fragment} [frag]\n   * @return {Function}\n   */\n\n  Vue.prototype.$compile = function (el, host, scope, frag) {\n    return compile(el, this.$options, true)(this, el, host, scope, frag);\n  };\n}\n\n/**\n * The exposed Vue constructor.\n *\n * API conventions:\n * - public API methods/properties are prefixed with `$`\n * - internal methods/properties are prefixed with `_`\n * - non-prefixed properties are assumed to be proxied user\n *   data.\n *\n * @constructor\n * @param {Object} [options]\n * @public\n */\n\nfunction Vue(options) {\n  this._init(options);\n}\n\n// install internals\ninitMixin(Vue);\nstateMixin(Vue);\neventsMixin(Vue);\nlifecycleMixin(Vue);\nmiscMixin(Vue);\n\n// install instance APIs\ndataAPI(Vue);\ndomAPI(Vue);\neventsAPI(Vue);\nlifecycleAPI(Vue);\n\nvar slot = {\n\n  priority: SLOT,\n  params: ['name'],\n\n  bind: function bind() {\n    // this was resolved during component transclusion\n    var name = this.params.name || 'default';\n    var content = this.vm._slotContents && this.vm._slotContents[name];\n    if (!content || !content.hasChildNodes()) {\n      this.fallback();\n    } else {\n      this.compile(content.cloneNode(true), this.vm._context, this.vm);\n    }\n  },\n\n  compile: function compile(content, context, host) {\n    if (content && context) {\n      if (this.el.hasChildNodes() && content.childNodes.length === 1 && content.childNodes[0].nodeType === 1 && content.childNodes[0].hasAttribute('v-if')) {\n        // if the inserted slot has v-if\n        // inject fallback content as the v-else\n        var elseBlock = document.createElement('template');\n        elseBlock.setAttribute('v-else', '');\n        elseBlock.innerHTML = this.el.innerHTML;\n        // the else block should be compiled in child scope\n        elseBlock._context = this.vm;\n        content.appendChild(elseBlock);\n      }\n      var scope = host ? host._scope : this._scope;\n      this.unlink = context.$compile(content, host, scope, this._frag);\n    }\n    if (content) {\n      replace(this.el, content);\n    } else {\n      remove(this.el);\n    }\n  },\n\n  fallback: function fallback() {\n    this.compile(extractContent(this.el, true), this.vm);\n  },\n\n  unbind: function unbind() {\n    if (this.unlink) {\n      this.unlink();\n    }\n  }\n};\n\nvar partial = {\n\n  priority: PARTIAL,\n\n  params: ['name'],\n\n  // watch changes to name for dynamic partials\n  paramWatchers: {\n    name: function name(value) {\n      vIf.remove.call(this);\n      if (value) {\n        this.insert(value);\n      }\n    }\n  },\n\n  bind: function bind() {\n    this.anchor = createAnchor('v-partial');\n    replace(this.el, this.anchor);\n    this.insert(this.params.name);\n  },\n\n  insert: function insert(id) {\n    var partial = resolveAsset(this.vm.$options, 'partials', id, true);\n    if (partial) {\n      this.factory = new FragmentFactory(this.vm, partial);\n      vIf.insert.call(this);\n    }\n  },\n\n  unbind: function unbind() {\n    if (this.frag) {\n      this.frag.destroy();\n    }\n  }\n};\n\nvar elementDirectives = {\n  slot: slot,\n  partial: partial\n};\n\nvar convertArray = vFor._postProcess;\n\n/**\n * Limit filter for arrays\n *\n * @param {Number} n\n * @param {Number} offset (Decimal expected)\n */\n\nfunction limitBy(arr, n, offset) {\n  offset = offset ? parseInt(offset, 10) : 0;\n  n = toNumber(n);\n  return typeof n === 'number' ? arr.slice(offset, offset + n) : arr;\n}\n\n/**\n * Filter filter for arrays\n *\n * @param {String} search\n * @param {String} [delimiter]\n * @param {String} ...dataKeys\n */\n\nfunction filterBy(arr, search, delimiter) {\n  arr = convertArray(arr);\n  if (search == null) {\n    return arr;\n  }\n  if (typeof search === 'function') {\n    return arr.filter(search);\n  }\n  // cast to lowercase string\n  search = ('' + search).toLowerCase();\n  // allow optional `in` delimiter\n  // because why not\n  var n = delimiter === 'in' ? 3 : 2;\n  // extract and flatten keys\n  var keys = Array.prototype.concat.apply([], toArray(arguments, n));\n  var res = [];\n  var item, key, val, j;\n  for (var i = 0, l = arr.length; i < l; i++) {\n    item = arr[i];\n    val = item && item.$value || item;\n    j = keys.length;\n    if (j) {\n      while (j--) {\n        key = keys[j];\n        if (key === '$key' && contains(item.$key, search) || contains(getPath(val, key), search)) {\n          res.push(item);\n          break;\n        }\n      }\n    } else if (contains(item, search)) {\n      res.push(item);\n    }\n  }\n  return res;\n}\n\n/**\n * Order filter for arrays\n *\n * @param {String|Array<String>|Function} ...sortKeys\n * @param {Number} [order]\n */\n\nfunction orderBy(arr) {\n  var comparator = null;\n  var sortKeys = undefined;\n  arr = convertArray(arr);\n\n  // determine order (last argument)\n  var args = toArray(arguments, 1);\n  var order = args[args.length - 1];\n  if (typeof order === 'number') {\n    order = order < 0 ? -1 : 1;\n    args = args.length > 1 ? args.slice(0, -1) : args;\n  } else {\n    order = 1;\n  }\n\n  // determine sortKeys & comparator\n  var firstArg = args[0];\n  if (!firstArg) {\n    return arr;\n  } else if (typeof firstArg === 'function') {\n    // custom comparator\n    comparator = function (a, b) {\n      return firstArg(a, b) * order;\n    };\n  } else {\n    // string keys. flatten first\n    sortKeys = Array.prototype.concat.apply([], args);\n    comparator = function (a, b, i) {\n      i = i || 0;\n      return i >= sortKeys.length - 1 ? baseCompare(a, b, i) : baseCompare(a, b, i) || comparator(a, b, i + 1);\n    };\n  }\n\n  function baseCompare(a, b, sortKeyIndex) {\n    var sortKey = sortKeys[sortKeyIndex];\n    if (sortKey) {\n      if (sortKey !== '$key') {\n        if (isObject(a) && '$value' in a) a = a.$value;\n        if (isObject(b) && '$value' in b) b = b.$value;\n      }\n      a = isObject(a) ? getPath(a, sortKey) : a;\n      b = isObject(b) ? getPath(b, sortKey) : b;\n    }\n    return a === b ? 0 : a > b ? order : -order;\n  }\n\n  // sort on a copy to avoid mutating original array\n  return arr.slice().sort(comparator);\n}\n\n/**\n * String contain helper\n *\n * @param {*} val\n * @param {String} search\n */\n\nfunction contains(val, search) {\n  var i;\n  if (isPlainObject(val)) {\n    var keys = Object.keys(val);\n    i = keys.length;\n    while (i--) {\n      if (contains(val[keys[i]], search)) {\n        return true;\n      }\n    }\n  } else if (isArray(val)) {\n    i = val.length;\n    while (i--) {\n      if (contains(val[i], search)) {\n        return true;\n      }\n    }\n  } else if (val != null) {\n    return val.toString().toLowerCase().indexOf(search) > -1;\n  }\n}\n\nvar digitsRE = /(\\d{3})(?=\\d)/g;\n\n// asset collections must be a plain object.\nvar filters = {\n\n  orderBy: orderBy,\n  filterBy: filterBy,\n  limitBy: limitBy,\n\n  /**\n   * Stringify value.\n   *\n   * @param {Number} indent\n   */\n\n  json: {\n    read: function read(value, indent) {\n      return typeof value === 'string' ? value : JSON.stringify(value, null, arguments.length > 1 ? indent : 2);\n    },\n    write: function write(value) {\n      try {\n        return JSON.parse(value);\n      } catch (e) {\n        return value;\n      }\n    }\n  },\n\n  /**\n   * 'abc' => 'Abc'\n   */\n\n  capitalize: function capitalize(value) {\n    if (!value && value !== 0) return '';\n    value = value.toString();\n    return value.charAt(0).toUpperCase() + value.slice(1);\n  },\n\n  /**\n   * 'abc' => 'ABC'\n   */\n\n  uppercase: function uppercase(value) {\n    return value || value === 0 ? value.toString().toUpperCase() : '';\n  },\n\n  /**\n   * 'AbC' => 'abc'\n   */\n\n  lowercase: function lowercase(value) {\n    return value || value === 0 ? value.toString().toLowerCase() : '';\n  },\n\n  /**\n   * 12345 => $12,345.00\n   *\n   * @param {String} sign\n   * @param {Number} decimals Decimal places\n   */\n\n  currency: function currency(value, _currency, decimals) {\n    value = parseFloat(value);\n    if (!isFinite(value) || !value && value !== 0) return '';\n    _currency = _currency != null ? _currency : '$';\n    decimals = decimals != null ? decimals : 2;\n    var stringified = Math.abs(value).toFixed(decimals);\n    var _int = decimals ? stringified.slice(0, -1 - decimals) : stringified;\n    var i = _int.length % 3;\n    var head = i > 0 ? _int.slice(0, i) + (_int.length > 3 ? ',' : '') : '';\n    var _float = decimals ? stringified.slice(-1 - decimals) : '';\n    var sign = value < 0 ? '-' : '';\n    return sign + _currency + head + _int.slice(i).replace(digitsRE, '$1,') + _float;\n  },\n\n  /**\n   * 'item' => 'items'\n   *\n   * @params\n   *  an array of strings corresponding to\n   *  the single, double, triple ... forms of the word to\n   *  be pluralized. When the number to be pluralized\n   *  exceeds the length of the args, it will use the last\n   *  entry in the array.\n   *\n   *  e.g. ['single', 'double', 'triple', 'multiple']\n   */\n\n  pluralize: function pluralize(value) {\n    var args = toArray(arguments, 1);\n    var length = args.length;\n    if (length > 1) {\n      var index = value % 10 - 1;\n      return index in args ? args[index] : args[length - 1];\n    } else {\n      return args[0] + (value === 1 ? '' : 's');\n    }\n  },\n\n  /**\n   * Debounce a handler function.\n   *\n   * @param {Function} handler\n   * @param {Number} delay = 300\n   * @return {Function}\n   */\n\n  debounce: function debounce(handler, delay) {\n    if (!handler) return;\n    if (!delay) {\n      delay = 300;\n    }\n    return _debounce(handler, delay);\n  }\n};\n\nfunction installGlobalAPI (Vue) {\n  /**\n   * Vue and every constructor that extends Vue has an\n   * associated options object, which can be accessed during\n   * compilation steps as `this.constructor.options`.\n   *\n   * These can be seen as the default options of every\n   * Vue instance.\n   */\n\n  Vue.options = {\n    directives: directives,\n    elementDirectives: elementDirectives,\n    filters: filters,\n    transitions: {},\n    components: {},\n    partials: {},\n    replace: true\n  };\n\n  /**\n   * Expose useful internals\n   */\n\n  Vue.util = util;\n  Vue.config = config;\n  Vue.set = set;\n  Vue['delete'] = del;\n  Vue.nextTick = nextTick;\n\n  /**\n   * The following are exposed for advanced usage / plugins\n   */\n\n  Vue.compiler = compiler;\n  Vue.FragmentFactory = FragmentFactory;\n  Vue.internalDirectives = internalDirectives;\n  Vue.parsers = {\n    path: path,\n    text: text,\n    template: template,\n    directive: directive,\n    expression: expression\n  };\n\n  /**\n   * Each instance constructor, including Vue, has a unique\n   * cid. This enables us to create wrapped \"child\n   * constructors\" for prototypal inheritance and cache them.\n   */\n\n  Vue.cid = 0;\n  var cid = 1;\n\n  /**\n   * Class inheritance\n   *\n   * @param {Object} extendOptions\n   */\n\n  Vue.extend = function (extendOptions) {\n    extendOptions = extendOptions || {};\n    var Super = this;\n    var isFirstExtend = Super.cid === 0;\n    if (isFirstExtend && extendOptions._Ctor) {\n      return extendOptions._Ctor;\n    }\n    var name = extendOptions.name || Super.options.name;\n    if (process.env.NODE_ENV !== 'production') {\n      if (!/^[a-zA-Z][\\w-]*$/.test(name)) {\n        warn('Invalid component name: \"' + name + '\". Component names ' + 'can only contain alphanumeric characaters and the hyphen.');\n        name = null;\n      }\n    }\n    var Sub = createClass(name || 'VueComponent');\n    Sub.prototype = Object.create(Super.prototype);\n    Sub.prototype.constructor = Sub;\n    Sub.cid = cid++;\n    Sub.options = mergeOptions(Super.options, extendOptions);\n    Sub['super'] = Super;\n    // allow further extension\n    Sub.extend = Super.extend;\n    // create asset registers, so extended classes\n    // can have their private assets too.\n    config._assetTypes.forEach(function (type) {\n      Sub[type] = Super[type];\n    });\n    // enable recursive self-lookup\n    if (name) {\n      Sub.options.components[name] = Sub;\n    }\n    // cache constructor\n    if (isFirstExtend) {\n      extendOptions._Ctor = Sub;\n    }\n    return Sub;\n  };\n\n  /**\n   * A function that returns a sub-class constructor with the\n   * given name. This gives us much nicer output when\n   * logging instances in the console.\n   *\n   * @param {String} name\n   * @return {Function}\n   */\n\n  function createClass(name) {\n    /* eslint-disable no-new-func */\n    return new Function('return function ' + classify(name) + ' (options) { this._init(options) }')();\n    /* eslint-enable no-new-func */\n  }\n\n  /**\n   * Plugin system\n   *\n   * @param {Object} plugin\n   */\n\n  Vue.use = function (plugin) {\n    /* istanbul ignore if */\n    if (plugin.installed) {\n      return;\n    }\n    // additional parameters\n    var args = toArray(arguments, 1);\n    args.unshift(this);\n    if (typeof plugin.install === 'function') {\n      plugin.install.apply(plugin, args);\n    } else {\n      plugin.apply(null, args);\n    }\n    plugin.installed = true;\n    return this;\n  };\n\n  /**\n   * Apply a global mixin by merging it into the default\n   * options.\n   */\n\n  Vue.mixin = function (mixin) {\n    Vue.options = mergeOptions(Vue.options, mixin);\n  };\n\n  /**\n   * Create asset registration methods with the following\n   * signature:\n   *\n   * @param {String} id\n   * @param {*} definition\n   */\n\n  config._assetTypes.forEach(function (type) {\n    Vue[type] = function (id, definition) {\n      if (!definition) {\n        return this.options[type + 's'][id];\n      } else {\n        /* istanbul ignore if */\n        if (process.env.NODE_ENV !== 'production') {\n          if (type === 'component' && (commonTagRE.test(id) || reservedTagRE.test(id))) {\n            warn('Do not use built-in or reserved HTML elements as component ' + 'id: ' + id);\n          }\n        }\n        if (type === 'component' && isPlainObject(definition)) {\n          if (!definition.name) {\n            definition.name = id;\n          }\n          definition = Vue.extend(definition);\n        }\n        this.options[type + 's'][id] = definition;\n        return definition;\n      }\n    };\n  });\n\n  // expose internal transition API\n  extend(Vue.transition, transition);\n}\n\ninstallGlobalAPI(Vue);\n\nVue.version = '1.0.28';\n\n// devtools global hook\n/* istanbul ignore next */\nsetTimeout(function () {\n  if (config.devtools) {\n    if (devtools) {\n      devtools.emit('init', Vue);\n    } else if (process.env.NODE_ENV !== 'production' && inBrowser && /Chrome\\/\\d+/.test(window.navigator.userAgent)) {\n      console.log('Download the Vue Devtools for a better development experience:\\n' + 'https://github.com/vuejs/vue-devtools');\n    }\n  }\n}, 0);\n\nmodule.exports = Vue;","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = {};\nif (module.exports.__esModule) module.exports = module.exports.default\n;(typeof module.exports === \"function\"? module.exports.options: module.exports).template = \"\\n<form action=\\\"posts/1\\\" v-ajax=\\\"\\\">\\n    <button type=\\\"submit\\\">\\n        List\\n    </button>\\n</form>\\n\"\nif (module.hot) {(function () {  module.hot.accept()\n  var hotAPI = require(\"vue-hot-reload-api\")\n  hotAPI.install(require(\"vue\"), true)\n  if (!hotAPI.compatible) return\n  if (!module.hot.data) {\n    hotAPI.createRecord(\"_v-3f0c8eec\", module.exports)\n  } else {\n    hotAPI.update(\"_v-3f0c8eec\", module.exports, (typeof module.exports === \"function\" ? module.exports.options : module.exports).template)\n  }\n})()}","var Vue = require('vue');\n\nVue.http.headers.common['X-CSRF-TOKEN'] = document.querySelector('input[name=\"_token\"]').value;\n\nimport App  from './App.vue';\n\nVue.directive('ajax', {\n    bind() {\n        this.el.addEventListener('submit', this.onSubmit.bind(this));\n    },\n    update() {\n        console.log('updated');\n    },\n    unbind() {},\n\n    onSubmitn(e) {\n        var self = this;\n\n        e.preventDefault();\n\n        self.vm\n            .$http[this.getRequestType()](this.el.action)\n            .then(this.onComplete.bind(this))\n    },\n\n    onComplete() {\n        console.log('Complete');\n    },\n\n    getRequestType() {\n        var method = this.el.querySelector('input[name=\"_method\"]');\n\n        return (method ? method.value : this.el.method).toLowerCase();\n    }\n});\n\nnew Vue({\n    el: '#app',\n\n    components: {\n        App,\n    }\n});\n"],"sourceRoot":"/source/"}